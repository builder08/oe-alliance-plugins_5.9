# Embedded file name: /usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/TVSpielfilm.py
from base64 import b64encode, b64decode
from Components.ActionMap import ActionMap, NumberActionMap
from Components.ConditionalWidget import BlinkingWidget
from Components.config import config, configfile, ConfigDirectory, ConfigInteger, ConfigPassword, ConfigSelection, ConfigSubsection, ConfigText, getConfigListEntry
from Components.ConfigList import ConfigListScreen
from Components.FileList import FileList
from Components.Input import Input
from Components.Label import Label
from Components.MenuList import MenuList
from Components.MultiContent import MultiContentEntryText, MultiContentEntryPixmapAlphaTest, MultiContentEntryProgress
from Components.Pixmap import Pixmap, MovingPixmap
from Components.ScrollLabel import ScrollLabel
from Components.Slider import Slider
from Components.Sources.List import List
from enigma import eConsoleAppContainer, eListboxPythonMultiContent, eListbox, eEPGCache, eServiceCenter, eServiceReference, eTimer, getDesktop, gFont, loadPic, loadPNG, RT_HALIGN_LEFT, RT_HALIGN_RIGHT, RT_HALIGN_CENTER, RT_VALIGN_CENTER, RT_WRAP
from Plugins.Plugin import PluginDescriptor
from re import findall, match, search, split, sub
from RecordTimer import RecordTimerEntry
from Screens.ChannelSelection import ChannelSelection
from Screens.ChoiceBox import ChoiceBox
from Screens.Console import Console
from Screens.InfoBar import InfoBar, MoviePlayer
from Screens.Standby import TryQuitMainloop
from Screens.TimerEdit import TimerEditList, TimerSanityConflict
from Screens.TimerEntry import TimerEntry
from Screens.MessageBox import MessageBox
from Screens.Screen import Screen
from Screens.VirtualKeyBoard import VirtualKeyBoard
from ServiceReference import ServiceReference
from string import find, strip
from time import mktime
from Tools.Directories import fileExists
from Tools.LoadPixmap import LoadPixmap
from twisted.web import client, error
from twisted.web.client import getPage, downloadPage
from httplib import HTTPException
from urllib import unquote_plus, urlencode
from urllib2 import Request, urlopen, URLError, HTTPError
from urlparse import parse_qs
import cookielib
import datetime
import os
import re
import socket
import sys
import time
import urllib2
from os import path
config.plugins.tvspielfilm = ConfigSubsection()
deskWidth = getDesktop(0).size().width()
if deskWidth >= 1920:
    config.plugins.tvspielfilm.plugin_size = ConfigSelection(default='full', choices=[('full', '1920x1080'), ('normal', '1024x576')])
    config.plugins.tvspielfilm.position = ConfigInteger(60, (0, 80))
else:
    config.plugins.tvspielfilm.plugin_size = ConfigSelection(default='normal', choices=[('full', '1920x1080'), ('normal', '1024x576')])
    config.plugins.tvspielfilm.position = ConfigInteger(40, (0, 160))
config.plugins.tvspielfilm.font_size = ConfigSelection(default='large', choices=[('verylarge', 'Sehr gro\xc3\x9f'), ('large', 'Gro\xc3\x9f'), ('normal', 'Normal')])
config.plugins.tvspielfilm.font = ConfigSelection(default='yes', choices=[('yes', 'Ja'), ('no', 'Nein')])
if config.plugins.tvspielfilm.font.value == 'yes':
    from enigma import addFont
    try:
        addFont('/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/font/Sans.ttf', 'Sans', 100, False)
    except Exception as ex:
        addFont('/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/font/Sans.ttf', 'Sans', 100, False, 0)

config.plugins.tvspielfilm.fhd = ConfigSelection(default='no', choices=[('yes', 'Ja'), ('no', 'Nein')])
if config.plugins.tvspielfilm.fhd.value == 'yes':
    from enigma import eSize, gMainDC
config.plugins.tvspielfilm.meintvs = ConfigSelection(default='no', choices=[('yes', 'Ja'), ('no', 'Nein')])
config.plugins.tvspielfilm.login = ConfigText(default='', fixed_size=False)
config.plugins.tvspielfilm.password = ConfigPassword(default='', fixed_size=False)
config.plugins.tvspielfilm.encrypt = ConfigSelection(default='no', choices=[('yes', 'Ja'), ('no', 'Nein')])
config.plugins.tvspielfilm.picon = ConfigSelection(default='yes', choices=[('yes', 'Ja'), ('no', 'Nein')])
config.plugins.tvspielfilm.piconfolder = ConfigDirectory(default='/media/usb/picon/')
config.plugins.tvspielfilm.color = ConfigSelection(default='0x00000000', choices=[('0x00000000', 'Skin Default'),
 ('0x00F0A30A', 'Amber'),
 ('0x007895BC', 'Blue'),
 ('0x00825A2C', 'Brown'),
 ('0x000050EF', 'Cobalt'),
 ('0x00911D10', 'Crimson'),
 ('0x001BA1E2', 'Cyan'),
 ('0x00008A00', 'Emerald'),
 ('0x0070AD11', 'Green'),
 ('0x006A00FF', 'Indigo'),
 ('0x00BB0048', 'Magenta'),
 ('0x0076608A', 'Mauve'),
 ('0x006D8764', 'Olive'),
 ('0x00C3461B', 'Orange'),
 ('0x00F472D0', 'Pink'),
 ('0x00E51400', 'Red'),
 ('0x007A3B3F', 'Sienna'),
 ('0x00647687', 'Steel'),
 ('0x00149BAF', 'Teal'),
 ('0x004176B6', 'Tufts'),
 ('0x006C0AAB', 'Violet'),
 ('0x00BF9217', 'Yellow')])
config.plugins.tvspielfilm.tipps = ConfigSelection(default='yes', choices=[('no', 'Gr\xfcne Taste im Startmen\xfc'), ('yes', 'Beim Start des Plugins'), ('false', 'Deaktiviert')])
config.plugins.tvspielfilm.primetime = ConfigSelection(default='primetime', choices=[('primetime', 'Primetime'), ('now', 'Aktuelle Zeit')])
config.plugins.tvspielfilm.eventview = ConfigSelection(default='list', choices=[('list', 'Programmliste'), ('info', 'Sendungsinfo')])
config.plugins.tvspielfilm.genreinfo = ConfigSelection(default='no', choices=[('no', 'Nein'), ('yes', 'Ja')])
config.plugins.tvspielfilm.zapexit = ConfigSelection(default='yes', choices=[('yes', 'Ja'), ('no', 'Nein')])
config.plugins.tvspielfilm.maxsearch = ConfigInteger(50, (10, 999))
config.plugins.tvspielfilm.maxgenre = ConfigInteger(250, (10, 999))
config.plugins.tvspielfilm.autotimer = ConfigSelection(default='yes', choices=[('yes', 'Ja'), ('no', 'Nein')])
config.plugins.tvspielfilm.autoupdate = ConfigSelection(default='yes', choices=[('yes', 'Ja'), ('no', 'Nein')])
config.plugins.tvspielfilm.paypal = ConfigSelection(default='yes', choices=[('yes', 'Ja'), ('no', 'Nein')])

def applySkinVars(skin, dict):
    for key in dict.keys():
        try:
            skin = skin.replace('{' + key + '}', dict[key])
        except Exception as e:
            print e, '@key=', key

    return skin


def shortenChannel(text):
    text = text.replace('ProSieben ', 'Pro7 ').replace('kabel eins CLASSICS', 'k1CLASSICS').replace('Sky Family', 'SkyFamily').replace('Sky Cinema+', 'SkyCine+').replace('Sky Comedy', 'SkyComedy').replace('Sky Emotion', 'SkyEmotion').replace('Sky Sport HD', 'SkySport').replace('Eurosport ', 'Eurosport').replace('EXTREME SPORTS', 'EXTREME').replace('NAT GEO WILD', 'NatGeoWild').replace('Romance TV', 'RomanceTV')
    text = text.replace('13th Street', '13thStreet').replace('VH1 Classic', 'VH1Classic').replace('COMEDY CENTRAL', 'COMEDY C').replace('Cartoon Network', 'CartoonNet').replace('Disney Cinemagic', 'DisneyCine').replace('HISTORY HD', 'History HD').replace('DELUXE MUSIC', 'DeluxMusic')
    return text


def transWIKI(text):
    text = text.replace('\xc3\x84', '\xc4').replace('\xc3\x96', '\xd6').replace('\xc3\x9c', '\xdc').replace('\xc3\x9f', '\xdf').replace('\xc3\xa4', '\xe4').replace('\xc3\xb6', '\xf6').replace('\xc3\xbc', '\xfc').replace('&', '%26').replace('\xe2\x80', '-')
    return text


def transHTML(text):
    text = text.replace('&nbsp;', ' ').replace('&szlig;', 'ss').replace('&quot;', '"').replace('&ndash;', '-').replace('&Oslash;', '').replace('&bdquo;', '"').replace('&ldquo;', '"').replace('&rsquo;', "'").replace('&gt;', '>').replace('&lt;', '<').replace('&shy;', '')
    text = text.replace('&copy;.*', ' ').replace('&amp;copy;', '').replace('&amp;', '&').replace('&uuml;', '\xc3\xbc').replace('&auml;', '\xc3\xa4').replace('&ouml;', '\xc3\xb6').replace('&eacute;', '\xe9').replace('&hellip;', '...').replace('&egrave;', '\xe8').replace('&agrave;', '\xe0').replace('&mdash;', '-')
    text = text.replace('&Uuml;', 'Ue').replace('&Auml;', 'Ae').replace('&Ouml;', 'Oe').replace('&#034;', '"').replace('&#039;', "'").replace('&#34;', '"').replace('&#38;', 'und').replace('&#39;', "'").replace('&#133;', '...').replace('&#196;', '\xc3\x84').replace('&#214;', '\xc3\x96').replace('&#220;', '\xc3\x9c').replace('&#223;', '\xc3\x9f').replace('&#228;', '\xc3\xa4').replace('&#246;', '\xc3\xb6').replace('&#252;', '\xc3\xbc').replace('&#287;', 'c').replace('&#324;', 'n').replace('&#351;', 's')
    text = text.replace('&#8211;', '-').replace('&#8212;', '\x97').replace('&#8216;', "'").replace('&#8217;', "'").replace('&#8220;', '"').replace('&#8221;', '"').replace('&#8230;', '...').replace('&#8242;', "'").replace('&#8243;', '"')
    return text


class TVTippsView(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="TV-Tipps - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,60" size="880,450" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="pic1" position="890,60" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic2" position="890,135" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic3" position="890,210" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic4" position="890,285" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic5" position="890,360" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic6" position="890,435" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtimer" position="306,0" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,60" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,60" size="727,60" font="{font};24" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,120" size="992,360" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="306,60" size="400,200" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="391,216" size="90,22" font="{font};20" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="391,238" size="90,22" font="{font};16" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,60" size="252,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="685,60" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="685,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="685,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="685,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="65,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="120,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="65,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="267,60" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="463,138" size="85,45" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/play.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,270" size="992,235" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="987,270" size="20,235" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_235.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="150,5" size="712,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="376,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="486,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="596,27" size="100,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="352,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="462,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="572,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1200,620" title="TV-Tipps - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,75" size="1100,620" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="pic1" position="1095,75" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic2" position="1095,165" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic3" position="1095,255" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic4" position="1095,345" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic5" position="1095,435" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic6" position="1095,525" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtimer" position="420,5" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,75" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,75" size="955,65" font="{font};26" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,140" size="1220,480" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="375,70" size="490,245" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="476,265" size="100,25" font="{font};22" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="476,290" size="100,25" font="{font};18" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,70" size="310,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="855,70" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="855,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="855,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="855,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="80,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="150,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="80,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="325,70" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="565,163" size="109,58" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/playHD.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,325" size="1220,315" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="1214,325" size="22,315" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_315.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="220,10" size="800,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="469,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="594,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="719,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="445,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="570,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="695,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'

    def __init__(self, session, link, sparte):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '24'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '22'
            else:
                self.fontlarge = False
                fontsize = '20'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVTippsView.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '20'
            else:
                self.fontlarge = False
                fontsize = '18'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVTippsView.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.pic1 = '/tmp/tvspielfilm1.jpg'
        self.pic2 = '/tmp/tvspielfilm2.jpg'
        self.pic3 = '/tmp/tvspielfilm3.jpg'
        self.pic4 = '/tmp/tvspielfilm4.jpg'
        self.pic5 = '/tmp/tvspielfilm5.jpg'
        self.pic6 = '/tmp/tvspielfilm6.jpg'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.localhtml2 = '/tmp/tvspielfilm2.html'
        self.current = 'menu'
        self.oldcurrent = 'menu'
        self.sparte = sparte
        self.titel = ''
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.picurllist = []
        self.searchlink = []
        self.searchref = []
        self.searchentries = []
        self.start = ''
        self.end = ''
        self.day = ''
        self.name = ''
        self.shortdesc = ''
        self.sref = []
        self.postlink = link
        self.link = link
        self.trailerurl = ''
        self.POSTtext = ''
        self.EPGtext = ''
        if config.plugins.tvspielfilm.picon.value == 'yes':
            self.picon = True
            self.piconfolder = config.plugins.tvspielfilm.piconfolder.value
        else:
            self.picon = False
        self.hideflag = True
        self.new = False
        self.newfilter = False
        self.search = False
        self.rec = False
        self.ready = False
        self.postviewready = False
        self.mehrbilder = False
        self.trailer = False
        self.movie = False
        self.datum = False
        self.filter = True
        self.len = 0
        self.oldindex = 0
        self.oldsearchindex = 1
        self['pic1'] = Pixmap()
        self['pic2'] = Pixmap()
        self['pic3'] = Pixmap()
        self['pic4'] = Pixmap()
        self['pic5'] = Pixmap()
        self['pic6'] = Pixmap()
        self['picpost'] = Pixmap()
        self['tvinfo1'] = Pixmap()
        self['tvinfo2'] = Pixmap()
        self['tvinfo3'] = Pixmap()
        self['tvinfo4'] = Pixmap()
        self['tvinfo5'] = Pixmap()
        self['cinlogo'] = Pixmap()
        self['cinlogo'].hide()
        self['playlogo'] = Pixmap()
        self['playlogo'].hide()
        self['searchlogo'] = Pixmap()
        self['searchlogo'].hide()
        self['searchtimer'] = Pixmap()
        self['searchtimer'].hide()
        self['searchtext'] = Label('')
        self['searchtext'].hide()
        self['textpage'] = ScrollLabel('')
        self['infotext'] = Label('')
        self['infotext'].hide()
        self['infotext2'] = Label('')
        self['infotext2'].hide()
        self['infotext3'] = Label('')
        self['infotext3'].hide()
        self['infotext4'] = Label('')
        self['infotext4'].hide()
        self['infotext5'] = Label('')
        self['infotext5'].hide()
        self['infotext6'] = Label('')
        self['infotext6'].hide()
        self['infotext7'] = Label('')
        self['infotext7'].hide()
        self['infotext8'] = Label('')
        self['infotext8'].hide()
        self['piclabel'] = Label('')
        self['piclabel'].hide()
        self['piclabel2'] = Label('')
        self['piclabel2'].hide()
        self['slider_textpage'] = Pixmap()
        self['slider_textpage'].hide()
        self['searchmenu'] = ItemList([])
        self['searchmenu'].hide()
        self['menu'] = ItemList([])
        self['label'] = BlinkingLabel('Bitte warten...')
        self['label'].startBlinking()
        self['label2'] = Label('= Timer')
        self['label3'] = Label('= Suche')
        self['label4'] = Label('= Zappen')
        self['actions'] = ActionMap(['OkCancelActions',
         'ChannelSelectBaseActions',
         'DirectionActions',
         'EPGSelectActions',
         'NumberActions',
         'InfobarTeletextActions',
         'MoviePlayerActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'nextBouquet': self.nextDay,
         'prevBouquet': self.prevDay,
         'nextMarker': self.nextWeek,
         'prevMarker': self.prevWeek,
         '0': self.gotoEnd,
         '1': self.zapUp,
         '2': self.zapDown,
         '7': self.IMDb,
         '8': self.TMDb,
         '9': self.TVDb,
         'info': self.getEPG,
         'epg': self.getEPG,
         'leavePlayer': self.youTube,
         'startTeletext': self.pressText,
         'displayHelp': self.infoScreen}, -1)
        self['ColorActions'] = ActionMap(['ColorActions'], {'green': self.green,
         'yellow': self.yellow,
         'red': self.makeTimer,
         'blue': self.hideScreen}, -1)
        self.servicefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/service.references'
        self.service_db = serviceDB(self.servicefile)
        self.timer = open('/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db').read()
        self.date = datetime.date.today()
        one_day = datetime.timedelta(days=1)
        self.nextdate = self.date + one_day
        weekday = self.date.weekday()
        if weekday == 0:
            self.weekday = 'Montag'
        elif weekday == 1:
            self.weekday = 'Dienstag'
        elif weekday == 2:
            self.weekday = 'Mittwoch'
        elif weekday == 3:
            self.weekday = 'Donnerstag'
        elif weekday == 4:
            self.weekday = 'Freitag'
        elif weekday == 5:
            self.weekday = 'Samstag'
        elif weekday == 6:
            self.weekday = 'Sonntag'
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        if config.plugins.tvspielfilm.genreinfo.value == 'no':
            self.showgenre = False
        else:
            self.showgenre = True
        self.makeTVTimer = eTimer()
        self.makeTVTimer.callback.append(self.downloadFullPage(link, self.makeTVTipps))
        self.makeTVTimer.start(500, True)

    def makeTVTipps(self, string):
        output = open(self.localhtml, 'r').read()
        self.sref = []
        self['pic1'].hide()
        self['pic2'].hide()
        self['pic3'].hide()
        self['pic4'].hide()
        self['pic5'].hide()
        self['pic6'].hide()
        if self.sparte == 'Spielfilm':
            startpos = find(output, 'id="c-sp-opener"><span>Spielfilm</span></a>')
            endpos = find(output, 'id="c-se-opener"><span>Serie</span></a>')
        elif self.sparte == 'Serie':
            startpos = find(output, 'id="c-se-opener"><span>Serie</span></a>')
            endpos = find(output, 'id="c-re-opener"><span>Report</span></a>')
        elif self.sparte == 'Report':
            startpos = find(output, 'id="c-re-opener"><span>Report</span></a>')
            endpos = find(output, 'id="c-u-opener"><span>Unterhaltung</span></a>')
        elif self.sparte == 'Unterhaltung':
            startpos = find(output, 'id="c-u-opener"><span>Unterhaltung</span></a>')
            endpos = find(output, 'id="c-kin-opener"><span>Kinder</span></a>')
        elif self.sparte == 'Kinder':
            startpos = find(output, 'id="c-kin-opener"><span>Kinder</span></a>')
            endpos = find(output, 'id="c-spo-opener"><span>Sport</span></a>')
        elif self.sparte == 'Sport':
            startpos = find(output, 'id="c-spo-opener"><span>Sport</span></a>')
            endpos = find(output, '<p class="h3 headline headline--section">')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        date = str(self.date.strftime('%d.%m.%Y'))
        self.titel = 'TV-Tipps - ' + str(self.sparte) + ' - ' + str(self.weekday) + ', ' + date
        self.setTitle(self.titel)
        bereich = sub('<div class="image-wrapper.*?">\n\\s+<a href="', '<td>LINK', bereich)
        bereich = sub('" target="_self" onclick="', '</td>', bereich)
        bereich = sub('class="aholder" title=".*?<strong>', '<td>NAME', bereich)
        bereich = sub('class="aholder" title="', '<td>TITEL', bereich)
        bereich = sub('<span class="add-info ', '<td>INFO', bereich)
        bereich = sub('">TIPP</span>', '</td>', bereich)
        bereich = sub('">LIVE</span>', '</td>', bereich)
        bereich = sub('">HDTV</span>', '</td>', bereich)
        bereich = sub('">NEU</span>', '</td>', bereich)
        bereich = sub('">OMU</span>', '</td>', bereich)
        bereich = sub('"></span>', '</td>', bereich)
        bereich = sub('">.*?<img src="', '</td><td>PIC', bereich)
        bereich = sub('" width="', '</td>', bereich)
        bereich = sub('<span class="time">', '<td>TIME', bereich)
        bereich = sub('</span>', '</td>', bereich)
        bereich = sub('</strong>', '</td>', bereich)
        bereich = sub('opener"><span>', '', bereich)
        bereich = sub('<span>Play</td>', '', bereich)
        bereich = sub('<span>', '<td>GENRE', bereich)
        bereich = sub('<span class="logotype chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('">\n.*?<a href="', '</td>', bereich)
        bereich = sub('<wbr/>', '', bereich)
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.picurllist = []
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 9
        for x in a:
            if y == 0:
                res = [x]
                self.new = False
                if self.backcolor == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1085, 90), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(880, 75), font=0, backcolor_sel=self.back_color, text=''))
                x = sub('LINK', '', x)
                linkfilter = x
            if y == 2:
                x = sub('PIC', '', x)
                picfilter = x
            if y == 3:
                x = sub('TIME', '', x)		###########Zeit
                start = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(120, 30), size=(75, 30), font=-1, backcolor=12255304, color=16777215, backcolor_sel=12255304, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))#Zeit
                    else:
                        res.append(MultiContentEntryText(pos=(112, 13), size=(63, 23), font=0, backcolor=12255304, color=16777215, backcolor_sel=12255304, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(74, 18), size=(75, 25), font=-1, backcolor=12255304, color=16777215, backcolor_sel=12255304, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(56, 13), size=(63, 23), font=0, backcolor=12255304, color=16777215, backcolor_sel=12255304, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
            if y == 4:
                if search('INFO', x) is not None:
                    x = sub('INFO', '', x)
                    if search('neu|new', x) is not None:
                        self.new = True
                    if self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(1005, 20), size=(60, 20), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(815, 20), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 6
            if y == 5:
                if search('INFO', x) is not None:
                    x = sub('INFO', '', x)
                    if search('neu|new', x) is not None:
                        self.new = True
                    if self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(1005, 50), size=(60, 20), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(815, 40), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 6
            if y == 6:
                x = sub('NAME', '', x)
                titelfilter = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(220, 17), size=(732, 30), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))#Name Spielfilm
                    else:
                        res.append(MultiContentEntryText(pos=(186, 12), size=(572, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(162, 17), size=(773, 30), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(130, 12), size=(628, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
            if y == 7:
                x = sub('GENRE', '', x)
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(220, 48), size=(732, 30), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))#Beschreibung und Jahr
                    else:
                        res.append(MultiContentEntryText(pos=(186, 39), size=(572, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(162, 48), size=(773, 30), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(130, 39), size=(628, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
            if y == 8:
                if self.sparte == 'Spielfilm':
                    if self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/rating small1HD.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(940, 25), size=(40, 40), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/rating small1.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(763, 23), size=(29, 29), png=loadPNG(png)))
                x = sub('LOGO', '', x)
                service = x
                sref = self.service_db.lookup(service)
                if self.picon == True:
                    picon = self.findPicon(sref)
                    if picon is not None:
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 18), size=(100, 60), png=LoadPixmap(picon)))###picon
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(100, 60), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER | RT_WRAP, text='Picon not found'))
                elif self.xd == False:
                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                    if fileExists(png):
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 12), size=(59, 36), png=loadPNG(png)))
                else:
                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                    if fileExists(png):
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 11), size=(44, 27), png=loadPNG(png)))
                if sref == 'nope':
                    pass
                elif self.newfilter == False or self.newfilter == True and self.new == True:
                    hour = sub(':..', '', start)
                    if int(hour) < 5:
                        one_day = datetime.timedelta(days=1)
                        date = self.date + one_day
                    else:
                        date = self.date
                    timer = str(date) + ':::' + start + ':::' + str(sref)
                    if timer in self.timer:
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(130, 52), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(121, 44), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(89, 52), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(65, 44), size=(45, 15), png=loadPNG(png)))
                    self.sref.append(sref)
                    self.picurllist.append(picfilter)
                    self.tvlink.append(linkfilter)
                    self.tvtitel.append(titelfilter)
                    self.tventries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.xd == False:
            self['menu'].l.setItemHeight(90)
        else:
            self['menu'].l.setItemHeight(75)
        self['menu'].l.setList(self.tventries)
        self['menu'].moveToIndex(self.oldindex)
        if self.oldindex > 5:
            self.leftUp()
            self.rightDown()
        self.len = len(self.tventries)
        self['label'].setText('Info = Filter: NEU, Bouquet = +- Tag, <> = +- Woche')
        self['label'].stopBlinking()
        self['label'].show()
        self.ready = True
        try:
            picurl1 = self.picurllist[0]
            self.download(picurl1, self.getPic1)
            self['pic1'].show()
        except IndexError:
            self['pic1'].hide()

        try:
            picurl2 = self.picurllist[1]
            self.download(picurl2, self.getPic2)
            self['pic2'].show()
        except IndexError:
            self['pic2'].hide()

        try:
            picurl3 = self.picurllist[2]
            self.download(picurl3, self.getPic3)
            self['pic3'].show()
        except IndexError:
            self['pic3'].hide()

        try:
            picurl4 = self.picurllist[3]
            self.download(picurl4, self.getPic4)
            self['pic4'].show()
        except IndexError:
            self['pic4'].hide()

        try:
            picurl5 = self.picurllist[4]
            self.download(picurl5, self.getPic5)
            self['pic5'].show()
        except IndexError:
            self['pic5'].hide()

        try:
            picurl6 = self.picurllist[5]
            self.download(picurl6, self.getPic6)
            self['pic6'].show()
        except IndexError:
            self['pic6'].hide()

        return

    def makePostviewPage(self, string):
        output = open(self.localhtml2, 'r').read()
        self['label2'].setText('= Timer')
        self['label3'].setText('= YouTube')
        self['label4'].setText('= Wikipedia')
        self['menu'].hide()
        self['pic1'].hide()
        self['pic2'].hide()
        self['pic3'].hide()
        self['pic4'].hide()
        self['pic5'].hide()
        self['pic6'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        output = sub('</dl>.\n\\s+</div>.\n\\s+</section>', '</cast>', output)
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('</cast>')
            if endpos == -1:
                endpos = output.find('<h2 class="broadcast-info">')
                if endpos == -1:
                    endpos = output.find('<div class="OUTBRAIN"')
                    if endpos == -1:
                        endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('\r', '', bereich)
        bereich = re.sub('<ul class="slidelist">.*?</ul>', '', bereich, flags=re.S)
        bereich = re.sub('<script.*?</script>', '', bereich, flags=re.S)
        bereich = re.sub('<style.*?</style>', '', bereich, flags=re.S)
        bereich = re.sub('<div class="text" id=".*?</div>', '', bereich, flags=re.S)
        if search('rl: .https://video.tvspielfilm.de/.*?mp4', output) is not None:
            trailerurl = search('rl: .https://video.tvspielfilm.de/(.*?).mp4', output)
            self.trailerurl = 'https://video.tvspielfilm.de/' + trailerurl.group(1) + '.mp4'
            self.trailer = True
        else:
            self.trailer = False
        bereich = sub('" alt=".*?" width="', '" width="', bereich)
        picurl = search('<img src="(.*?)" width="', bereich)
        if picurl is not None:
            self.download(picurl.group(1), self.getPicPost)
            self['picpost'].show()
        else:
            picurl = search('<meta property="og:image" content="(.*?)"', output)
            if picurl is not None:
                self.download(picurl.group(1), self.getPicPost)
                self['picpost'].show()
            else:
                picurl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/TV-Spielfilm-Logo.svg/500px-TV-Spielfilm-Logo.svg.png'
                self.download(picurl, self.getPicPost)
                self['picpost'].show()
        if self.search == False:
            title = search('<title>(.*?)</title>', output)
            self.title = transHTML(title.group(1))
            self.setTitle(self.title)
        if search('<ul class="rating-dots">', bereich) is not None:
            self.movie = True
        else:
            self.movie = False
        if search('<div class="film-gallery">', output) is not None:
            self.mehrbilder = True
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        else:
            self.mehrbilder = False
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        try:
            parts = infotext[0].split(', ')
            self['infotext'].setText(parts[0])
            self['infotext'].show()
        except IndexError:
            self['infotext'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext2'].setText(parts[1])
            self['infotext2'].show()
        except IndexError:
            self['infotext2'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext3'].setText(parts[2])
            self['infotext3'].show()
        except IndexError:
            self['infotext3'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext4'].setText(parts[0])
            self['infotext4'].show()
        except IndexError:
            self['infotext4'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext5'].setText(parts[1])
            self['infotext5'].show()
        except IndexError:
            self['infotext5'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext6'].setText(parts[2])
            self['infotext6'].show()
        except IndexError:
            self['infotext6'].setText('')

        try:
            parts = infotext[2].split(', ')
            self['infotext7'].setText(parts[0] + ', ' + parts[1])
            self['infotext7'].show()
        except IndexError:
            self['infotext7'].setText('')

        try:
            self['infotext8'].setText(infotext[3])
            self['infotext8'].show()
        except IndexError:
            self['infotext8'].setText('')

        tvinfo = re.findall('<span class="add-info (.*?)">', bereich)
        try:
            if self.xd == False:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + 'HD.png'
            else:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + '.png'
            self.showPicTVinfo1(tvinfo1)
            self['tvinfo1'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + 'HD.png'
            else:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + '.png'
            self.showPicTVinfo2(tvinfo2)
            self['tvinfo2'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + 'HD.png'
            else:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + '.png'
            self.showPicTVinfo3(tvinfo3)
            self['tvinfo3'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + 'HD.png'
            else:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + '.png'
            self.showPicTVinfo4(tvinfo4)
            self['tvinfo4'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + 'HD.png'
            else:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + '.png'
            self.showPicTVinfo5(tvinfo5)
            self['tvinfo5'].show()
        except IndexError:
            pass

        self['piclabel'].setText(self.start[0:5])
        try:
            parts = infotext[0].split(', ')
            text = shortenChannel(parts[2])
            self['piclabel2'].setText(text[0:10])
        except IndexError:
            self['piclabel2'].setText('')

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        bereich = sub('<blockquote class="broadcast-detail__quote">\n\\s+<p>', '<p>>> ', bereich)
        bereich = sub('</p>\n[ ]+</blockquote>', ' <<</p>', bereich)
        bereich = sub('<section class="serial-info">\n\\s+', '<p>', bereich)
        bereich = sub('</section>', '</p>', bereich)
        bereich = sub('</span>\\s+', '</span>, ', bereich)
        bereich = sub('<li class="titleName">', '</p><p> \xc2\xb7 ', bereich)
        bereich = sub('<li class="subtitleName">', '#sub#', bereich)
        bereich = sub('ShowView [0-9-]+', '', bereich)
        bereich = sub('<a href=".*?">', '', bereich)
        bereich = sub('<h1.*?>', '<p>', bereich)
        bereich = sub('</h1>', '</p>', bereich)
        bereich = sub('<h3.*?>', '<p>', bereich)
        bereich = sub('</h3>', '</p>', bereich)
        bereich = sub('<br/>', '</p><p>', bereich)
        bereich = sub('<p>\n', '<p>', bereich)
        bereich = sub('<dt>', '<p>', bereich)
        bereich = sub('<dt class="role">', '<p>', bereich)
        bereich = sub('</dt>\n\\s+<dd>\n\\s+', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd>', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd class="name">', ': ', bereich)
        bereich = sub('\n[ ]+,', ',', bereich)
        bereich = sub(', [ ]+', ', ', bereich)
        bereich = sub('</a>', '</p>', bereich)
        bereich = sub('\n\\s+</dd>', '</p>', bereich)
        bereich = sub('</a></dd>', '</p>', bereich)
        bereich = sub('</dd>', '</p>', bereich)
        bereich = sub('</dt>', '</p>', bereich)
        text = ''
        a = findall('<p.*?>(.*?)</p>', bereich)
        for x in a:
            if x != '':
                text = text + x + '\n\n'

        text = sub('<[^>]*>', '', text)
        text = sub('</p<<p<', '\n\n', text)
        text = sub('\n\\s+\n*', '\n\n', text)
        text = sub('#sub#', '\n  ', text)
        if self.fontlarge == True:
            if self.xd == False:
                fill = '____________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
            else:
                fill = '________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        elif self.xd == False:
            fill = '____________________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        else:
            fill = '_________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        self.POSTtext = text + fill
        self['textpage'].setText(self.POSTtext)
        self['textpage'].show()
        self['slider_textpage'].show()
        self.showEPG = False
        self.postviewready = True
        return

    def makePostTimer(self, output):
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('<h2 class="broadcast-info">')
            if endpos == -1:
                endpos = output.find('<div class="OUTBRAIN"')
                if endpos == -1:
                    endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        self.current = 'postview'
        self.postviewready = True
        self.red()
        return

    def makeSearchView(self, url):
        header = {'User-Agent': 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100627 Firefox/3.6.6',
         'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
         'Accept-Language': 'en-us,en;q=0.5'}
        searchrequest = Request(url, None, header)
        try:
            output = urlopen(searchrequest).read()
        except (HTTPError,
         URLError,
         HTTPException,
         socket.error,
         AttributeError):
            output = ' '

        title = search('<title>(.*?)</title>', output)
        if title is not None:
            self['searchtext'].setText(title.group(1))
            self['searchtext'].show()
            self.setTitle('')
            self.setTitle(title.group(1))
        startpos = find(output, '<table class="primetime-table">')
        endpos = find(output, '</table>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('<span>TV-Sendungen am', '<td>DATUMTV-Sendungen am', bereich)
        bereich = sub('class="search-starttimes">\n\\s+<span>', '<td>TIME', bereich)
        bereich = sub('<h3><a href="', '<td>LINK', bereich)
        if self.showgenre == False:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title=".*?">', '</td><td>TITEL', bereich)
            bereich = sub('</a></h3>', '</td>', bereich)
        else:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title="', '</td><td>TITEL', bereich)
            bereich = sub('">.*?</a></h3>', '</td>', bereich)
        bereich = sub('<span class="logotype chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('<p>', '<td>GENRE', bereich)
        bereich = sub('<li class="', '<td>INFO', bereich)
        bereich = sub('<span\n\\s+class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span class="editorial-', '<td>RATING', bereich)
        bereich = sub('"></span>', '', bereich)
        bereich = sub('</span>\n', '</td>', bereich)
        bereich = sub('</span>', '', bereich)
        bereich = sub('\n\\s+</div>\n', '</td>', bereich)
        bereich = sub('\n.*?</p>', '</td>', bereich)
        bereich = sub('"></li>', '</td>', bereich)
        bereich = sub('\n.*?<br/><em class=".*?</em>', '', bereich)
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 10
        for x in a:
            if y == 0:
                res = [x]
                if self.backcolor == True:
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                if search('DATUM', x) is not None:
                    if self.datum == True:
                        try:
                            del self.searchref[-1]
                            del self.searchlink[-1]
                            del self.searchentries[-1]
                        except IndexError:
                            pass

                    else:
                        self.datum = True
                    x = sub('DATUM', '', x)
                    self.datum_string = x
                    res_datum = [x]
                    if self.backcolor == True:
                        if self.picon == True:
                            if self.xd == False:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                            else:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                        elif self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                    if self.picon == True:
                        if self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    elif self.xd == False:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    else:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    self.searchref.append('na')
                    self.searchlink.append('na')
                    self.searchentries.append(res_datum)
                    self.filter = True
                    y = 9
                else:
                    y = 1
            if y == 1:
                x = sub('TIME', '', x)
                start = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(100, 17), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(100, 18), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(60, 7), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(45, 3), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
            if y == 2:
                if search('LOGO', x) is not None:
                    logo = search('LOGO(.*?)">', x)
                    if logo is not None:
                        x = logo.group(1)
                    service = x
                    sref = self.service_db.lookup(service)
                    if sref == 'nope':
                        self.filter = True
                    else:
                        self.filter = False
                        self.searchref.append(sref)
                        if self.picon == True:
                            picon = self.findPicon(sref)
                            if picon is not None:
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 0), size=(100, 60), png=LoadPixmap(picon)))
                            else:
                                res.append(MultiContentEntryText(pos=(0, 0), size=(100, 60), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER | RT_WRAP, text='Picon not found'))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(59, 36), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(44, 27), png=loadPNG(png)))
                        start = sub(' - ..:..', '', start)
                        daynow = sub('....-..-', '', str(self.date))
                        day = search(', ([0-9]+). ', self.datum_string)
                        if day is not None:
                            day = day.group(1)
                        else:
                            day = daynow
                        if int(day) >= int(daynow) - 1:
                            date = str(self.date) + 'FIN'
                        else:
                            four_weeks = datetime.timedelta(weeks=4)
                            date = str(self.date + four_weeks) + 'FIN'
                        date = sub('[0-9][0-9]FIN', day, date)
                        timer = date + ':::' + start + ':::' + str(sref)
                        if timer in self.timer:
                            self.rec = True
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
            if y == 3:
                if self.filter == False:
                    x = sub('LINK', '', x)
                    self.searchlink.append(x)
            if y == 4:
                if self.filter == False:
                    x = sub('TITEL', '', x)
                    titelfilter = x
            if y == 5:
                if self.filter == False:
                    if search('GENRE', x) is None:
                        if self.picon == True:
                            if self.xd == False:
                                res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                            else:
                                res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        elif self.xd == False:
                            res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        y = 6
            if y == 6:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        if self.rec == True:
                            self.rec = False
                        else:
                            x = sub('INFO', '', x)
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 7:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 8:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 9:
                if search('INFO', x) is not None:
                    y = 7
                elif self.filter == False:
                    self.datum = False
                    if search('RATING', x) is not None:
                        x = sub('RATING', '', x)
                        if x != 'rating small':
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 10), size=(40, 40), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 16), size=(29, 29), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 0), size=(40, 40), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 1), size=(29, 29), png=loadPNG(png)))
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    else:
                        res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    self.searchentries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.picon == True:
            self['searchmenu'].l.setItemHeight(60)
        elif self.xd == False:
            self['searchmenu'].l.setItemHeight(40)
        else:
            self['searchmenu'].l.setItemHeight(30)
        self['searchmenu'].l.setList(self.searchentries)
        self['searchmenu'].show()
        self.searchcount += 1
        if self.searchcount <= self.maxsearchcount and search('<a class="next" href=".*?"', bereich) is not None:
            nextpage = search('<a class="next" href="(.*?)"', bereich)
            if nextpage is not None:
                self.makeSearchView(nextpage.group(1))
            else:
                self.ready = True
        else:
            try:
                if self.searchref[-1] == 'na':
                    del self.searchref[-1]
                    del self.searchlink[-1]
                    del self.searchentries[-1]
                    self['searchmenu'].l.setList(self.searchentries)
            except IndexError:
                pass

            self['searchmenu'].moveToIndex(self.oldsearchindex)
            self.current = 'searchmenu'
            self.ready = True
        return

    def ok(self):
        if self.hideflag == False:
            return
        if self.current == 'menu' or self.current == 'searchmenu':
            self.selectPage('ok')
        elif self.current == 'postview' and self.postviewready == True:
            if self.trailer == True:
                sref = eServiceReference(4097, 0, self.trailerurl)
                sref.setName(self.name)
                self.session.open(MoviePlayer, sref)
            elif self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)

    def selectPage(self, action):
        if self.current == 'menu' and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                self.postlink = self.tvlink[c]
            except IndexError:
                pass

        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

        if action == 'ok' and self.ready == True:
            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.current = 'postview'
                self.downloadPostPage(self.postlink, self.makePostviewPage)
        return

    def getEPG(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.showEPG == False:
                self.showEPG = True
                if self.search == False:
                    try:
                        c = self['menu'].getSelectedIndex()
                        sref = self.sref[c]
                        channel = ServiceReference(eServiceReference(sref)).getServiceName()
                    except IndexError:
                        sref = None
                        channel = ''

                else:
                    try:
                        c = self['searchmenu'].getSelectedIndex()
                        sref = self.searchref[c]
                        channel = ServiceReference(eServiceReference(sref)).getServiceName()
                    except IndexError:
                        sref = None
                        channel = ''

                if sref is not None:
                    try:
                        start = self.start
                        s1 = sub(':..', '', start)
                        date = str(self.postdate) + 'FIN'
                        date = sub('..FIN', '', date)
                        date = date + self.day
                        parts = start.split(':')
                        seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                        start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                        s2 = sub(':..:..', '', start)
                        if int(s2) > int(s1):
                            start = str(self.date) + ' ' + start
                        else:
                            start = date + ' ' + start
                        start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                        start = int(mktime(start.timetuple()))
                        epgcache = eEPGCache.getInstance()
                        event = epgcache.startTimeQuery(eServiceReference(sref), start)
                        if event == -1:
                            try:
                                self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                            except (KeyError, NameError):
                                self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                        else:
                            event = epgcache.getNextTimeEntry()
                            self.EPGtext = event.getEventName()
                            short = event.getShortDescription()
                            ext = event.getExtendedDescription()
                            dur = '%d Minuten' % (event.getDuration() / 60)
                            if short and short != self.EPGtext:
                                self.EPGtext += '\n\n' + short
                            if ext:
                                self.EPGtext += '\n\n' + ext
                            if dur:
                                self.EPGtext += '\n\n' + dur
                    except:
                        try:
                            self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                        except (KeyError, NameError):
                            self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                else:
                    self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'
                if self.fontlarge == True:
                    if self.xd == False:
                        fill = '____________________________________________________________________________________________________________________________________\n%s' % channel
                    else:
                        fill = '________________________________________________________________________________________________________________________\n%s' % channel
                elif self.xd == False:
                    fill = '____________________________________________________________________________________________________________________________________________________\n%s' % channel
                else:
                    fill = '_________________________________________________________________________________________________________________________________________\n%s' % channel
                self.EPGtext += '\n\n' + fill
                self['textpage'].setText(self.EPGtext)
                self['textpage'].show()
            else:
                self.showEPG = False
                self['textpage'].setText(self.POSTtext)
                self['textpage'].show()
        elif self.current == 'menu' and self.ready == True and self.search == False:
            if self.newfilter == False:
                self.newfilter = True
            else:
                self.newfilter = False
            self.refresh()
        else:
            self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def makeTimer(self):
        if config.plugins.tvspielfilm.autotimer.value == 'yes' and fileExists('/usr/lib/enigma2/python/Plugins/Extensions/AutoTimer/plugin.pyo'):
            self.autotimer = True
            self.session.openWithCallback(self.choiceTimer, ChoiceBox, title='Timer Auswahl', list=[('Timer', 'timer'), ('AutoTimer', 'autotimer')])
        else:
            self.autotimer = False
            self.red()

    def choiceTimer(self, choice):
        choice = choice and choice[1]
        if choice == 'autotimer':
            self.autotimer = True
            self.red()
        else:
            self.autotimer = False
            self.red()

    def red(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.search == False:
                try:
                    c = self['menu'].getSelectedIndex()
                    self.oldindex = c
                    sref = self.sref[c]
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            elif self.search == True:
                try:
                    c = self['searchmenu'].getSelectedIndex()
                    self.oldsearchindex = c
                    sref = self.searchref[c]
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            else:
                self.session.open(MessageBox, '\nTimer nicht m\xc3\xb6glich:\nKeine Service Reference vorhanden, der ausgew\xc3\xa4hlte Sender wurde nicht importiert.', MessageBox.TYPE_ERROR, close_on_any_key=True)
        elif self.current == 'menu' and self.ready == True:
            c = self['menu'].getSelectedIndex()
            self.oldindex = c
            try:
                self.postlink = self.tvlink[c]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.download(self.postlink, self.makePostTimer)
        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            self.oldsearchindex = c
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.download(self.postlink, self.makePostTimer)
        return

    def finishedTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer[0]:
            entry = answer[1]
            simulTimerList = self.session.nav.RecordTimer.record(entry)
            if simulTimerList is not None:
                for x in simulTimerList:
                    if x.setAutoincreaseEnd(entry):
                        self.session.nav.RecordTimer.timeChanged(x)

                simulTimerList = self.session.nav.RecordTimer.record(entry)
                if simulTimerList is not None:
                    self.session.openWithCallback(self.finishSanityCorrection, TimerSanityConflict, simulTimerList)
            self.makeTimerDB()
            self.ready = True
            self.postviewready = False
            self.current = self.oldcurrent
            if self.search == False:
                self.showProgrammPage()
                self.refresh()
            else:
                self.showsearch()
        else:
            self.ready = True
            self.postviewready = False
            self.current = self.oldcurrent
            if self.search == False:
                self.showProgrammPage()
            else:
                self.showsearch()
        return

    def finishSanityCorrection(self, answer):
        self.finishedTimer(answer)

    def finishedAutoTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.AutoTimerEditor import AutoTimerEditor
            answer, session = answer
            if config.plugins.tvspielfilm.fhd.value == 'yes':
                try:
                    gMainDC.getInstance().setResolution(1920, 1080)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 1080))
                except:
                    import traceback
                    traceback.print_exc()

            session.openWithCallback(self.finishedAutoTimerEdit, AutoTimerEditor, answer)

    def finishedAutoTimerEdit(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.plugin import autotimer
            if autotimer is None:
                from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                autotimer = AutoTimer()
            autotimer.add(answer)
            autotimer.writeXml()
        return

    def makeTimerDB(self):
        timerxml = open('/etc/enigma2/timers.xml').read()
        timer = re.findall('<timer begin="(.*?)" end=".*?" serviceref="(.*?)"', timerxml)
        timerfile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db'
        f = open(timerfile, 'w')
        data = ''
        idx = 0
        for x in timer:
            idx += 1

        for i in range(idx):
            try:
                timerstart = timer[i - 1][0]
                timerstart = int(timerstart) + int(config.recording.margin_before.value) * 60
                timerday = time.strftime('%Y-%m-%d', time.localtime(timerstart))
                timerhour = time.strftime('%H:%M', time.localtime(timerstart))
                timersref = timer[i - 1][1]
                data = data + timerday + ':::' + timerhour + ':::' + timersref + '\n'
            except IndexError:
                pass

        f.write(data)
        f.close()
        self.timer = data

    def green(self):
        if self.current == 'menu' and self.search == False:
            c = self['menu'].getSelectedIndex()
            try:
                sref = self.sref[c]
                if sref != '':
                    self.session.nav.playService(eServiceReference(sref))
            except IndexError:
                pass

        elif self.current == 'postview':
            self.wiki()

    def yellow(self):
        if self.current == 'postview':
            self.youTube()
        elif self.current == 'menu' and self.search == False and self.ready == True:
            try:
                c = self['menu'].getSelectedIndex()
                self.oldindex = c
                titel = self.tvtitel[c]
                self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='TV Spielfilm Suche:', text=titel)
            except IndexError:
                self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='TV Spielfilm Suche:', text='')

    def searchReturn(self, search):
        if search and search != '':
            self.searchstring = search
            self['menu'].hide()
            self['pic1'].hide()
            self['pic2'].hide()
            self['pic3'].hide()
            self['pic4'].hide()
            self['pic5'].hide()
            self['pic6'].hide()
            self['label'].setText('')
            self['label2'].setText('')
            self['label3'].setText('')
            self['label4'].setText('')
            self['searchlogo'].show()
            self['searchtimer'].show()
            self.searchlink = []
            self.searchref = []
            self.searchentries = []
            self.search = True
            self.datum = False
            self.filter = True
            search = search.replace(' ', '+')
            searchlink = 'http://www.tvspielfilm.de/suche/tvs-suche,,ApplicationSearch.html?tab=TV-Sendungen&q=' + search + '&page=1'
            self.maxsearchcount = config.plugins.tvspielfilm.maxsearch.value
            self.searchcount = 0
            self.makeSearchView(searchlink)

    def showsearch(self):
        self.postviewready = False
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['label'].setText('')
        self['label2'].setText('')
        self['label3'].setText('')
        self['label4'].setText('')
        self['searchmenu'].show()
        self['searchlogo'].show()
        self['searchtimer'].show()
        self['searchtext'].show()

    def pressText(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)

    def playTrailer(self):
        if self.current == 'postview' and self.postviewready == True and self.trailer == True:
            sref = eServiceReference(4097, 0, self.trailerurl)
            sref.setName(self.name)
            self.session.open(MoviePlayer, sref)

    def youTube(self):
        if self.current == 'postview' and self.postviewready == True:
            self.session.open(searchYouTube, self.name, self.movie)
        elif self.current == 'menu' and self.search == False and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                titel = self.tvtitel[c]
                self.session.open(searchYouTube, titel, self.movie)
            except IndexError:
                pass

    def wiki(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/Wikipedia.pyo'):
                from Plugins.Extensions.Wikipedia.Wikipedia import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/plugin.pyo'):
                from Plugins.Extensions.Wikipedia.plugin import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            else:
                self.session.openWithCallback(self.wikiInstall, MessageBox, '\nDas Wikipedia Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)

    def wikiInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'wiki', True)

    def translator(self):
        if self.current == 'postview':
            if self.showEPG == False:
                text = self.POSTtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            else:
                text = self.EPGtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/EPGTranslator.pyo'):
                from Plugins.Extensions.EPGTranslator.EPGTranslator import translatorMain
                self.session.open(translatorMain, text)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/plugin.pyo'):
                from Plugins.Extensions.EPGTranslator.plugin import translatorMain
                self.session.open(translatorMain, text)
            else:
                self.session.openWithCallback(self.translatorInstall, MessageBox, '\nDas EPG Translator Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)

    def translatorInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'translator', True)

    def IMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
                from Plugins.Extensions.IMDb.plugin import IMDB
                self.session.open(IMDB, self.name)
            else:
                self.session.openWithCallback(self.IMDbInstall, MessageBox, '\nDas IMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
                from Plugins.Extensions.TMDb.plugin import TMDbMain
                self.session.open(TMDbMain, self.name)
            else:
                self.session.openWithCallback(self.TMDbInstall, MessageBox, '\nDas TMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TVDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
                from Plugins.Extensions.TheTVDB.plugin import TheTVDBMain
                self.name = sub('Die ', '', self.name)
                self.session.open(TheTVDBMain, self.name)
            else:
                self.session.openWithCallback(self.TVDbInstall, MessageBox, '\nDas TheTVDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def IMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedIMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-imdb')

    def finishedIMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas IMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas IMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das IMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-tmdbinfo')

    def finishedTMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TVDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTVDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-thetvdb')

    def finishedTVDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TheTVDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TheTVDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TheTVDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def restartGUI(self, answer):
        if answer is True:
            try:
                self.session.open(TryQuitMainloop, 3)
            except RuntimeError:
                self.close()

    def nextDay(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('date', self.link) is not None:
                self.link = self.link + 'FIN'
                date1 = re.findall('date=(.*?)-..-..FIN', self.link)
                date2 = re.findall('date=....-(.*?)-..FIN', self.link)
                date3 = re.findall('date=....-..-(.*?)FIN', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

                one_day = datetime.timedelta(days=1)
                tomorrow = today + one_day
                weekday = tomorrow.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                nextday = sub('date=(.*?FIN)', 'date=', self.link)
                nextday = nextday + str(tomorrow)
                self.date = tomorrow
                one_day = datetime.timedelta(days=1)
                self.nextdate = self.date + one_day
            else:
                today = datetime.date.today()
                one_day = datetime.timedelta(days=1)
                tomorrow = today + one_day
                weekday = tomorrow.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                nextday = self.link + '?date=' + str(tomorrow)
                self.date = tomorrow
                one_day = datetime.timedelta(days=1)
                self.nextdate = self.date + one_day
            self.link = nextday
            self.oldindex = 0
            self.refresh()
        elif self.current == 'postview' or self.search == True:
            servicelist = self.session.instantiateDialog(ChannelSelection)
            self.session.execDialog(servicelist)
        return

    def prevDay(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('date', self.link) is not None:
                self.link = self.link + 'FIN'
                date1 = re.findall('date=(.*?)-..-..FIN', self.link)
                date2 = re.findall('date=....-(.*?)-..FIN', self.link)
                date3 = re.findall('date=....-..-(.*?)FIN', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

                one_day = datetime.timedelta(days=1)
                yesterday = today - one_day
                weekday = yesterday.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                prevday = sub('date=(.*?FIN)', 'date=', self.link)
                prevday = prevday + str(yesterday)
                self.date = yesterday
                one_day = datetime.timedelta(days=1)
                self.nextdate = self.date + one_day
            else:
                today = datetime.date.today()
                one_day = datetime.timedelta(days=1)
                yesterday = today - one_day
                weekday = yesterday.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                prevday = self.link + '?date=' + str(yesterday)
                self.date = yesterday
                one_day = datetime.timedelta(days=1)
                self.nextdate = self.date + one_day
            self.link = prevday
            self.oldindex = 0
            self.refresh()
        elif self.current == 'postview' or self.search == True:
            servicelist = self.session.instantiateDialog(ChannelSelection)
            self.session.execDialog(servicelist)
        return

    def nextWeek(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('date', self.link) is not None:
                self.link = self.link + 'FIN'
                date1 = re.findall('date=(.*?)-..-..FIN', self.link)
                date2 = re.findall('date=....-(.*?)-..FIN', self.link)
                date3 = re.findall('date=....-..-(.*?)FIN', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

                one_week = datetime.timedelta(days=7)
                tomorrow = today + one_week
                weekday = tomorrow.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                nextweek = sub('date=(.*?FIN)', 'date=', self.link)
                nextweek = nextweek + str(tomorrow)
                self.date = tomorrow
                one_week = datetime.timedelta(days=7)
                self.nextdate = self.date + one_week
            else:
                today = datetime.date.today()
                one_week = datetime.timedelta(days=7)
                tomorrow = today + one_week
                weekday = tomorrow.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                nextweek = self.link + '?date=' + str(tomorrow)
                self.date = tomorrow
                one_week = datetime.timedelta(days=7)
                self.nextdate = self.date + one_week
            self.link = nextweek
            self.oldindex = 0
            self.refresh()
        elif self.current == 'postview':
            self.translator()
        return

    def prevWeek(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('date', self.link) is not None:
                self.link = self.link + 'FIN'
                date1 = re.findall('date=(.*?)-..-..FIN', self.link)
                date2 = re.findall('date=....-(.*?)-..FIN', self.link)
                date3 = re.findall('date=....-..-(.*?)FIN', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

                one_week = datetime.timedelta(days=7)
                yesterday = today - one_week
                weekday = yesterday.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                prevweek = sub('date=(.*?FIN)', 'date=', self.link)
                prevweek = prevweek + str(yesterday)
                self.date = yesterday
                one_week = datetime.timedelta(days=7)
                self.nextdate = self.date + one_week
            else:
                today = datetime.date.today()
                one_week = datetime.timedelta(days=7)
                yesterday = today - one_week
                weekday = yesterday.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                prevweek = self.link + '?date=' + str(yesterday)
                self.date = yesterday
                one_week = datetime.timedelta(days=7)
                self.nextdate = self.date + one_week
            self.link = prevweek
            self.oldindex = 0
            self.refresh()
        return

    def gotoEnd(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            end = self.len - 1
            self['menu'].moveToIndex(end)
            if end > 5:
                self.leftUp()
                self.rightDown()
        elif self.current != 'postview' and self.ready == True and self.search == True:
            end = len(self.searchentries) - 1
            self['searchmenu'].moveToIndex(end)

    def findPicon(self, sref):
        sref = sref + 'FIN'
        sref = sref.replace(':', '_')
        sref = sref.replace('_FIN', '')
        sref = sref.replace('FIN', '')
        pngname = self.piconfolder + sref + '.png'
        if fileExists(pngname):
            return pngname

    def getPic1(self, output):
        f = open(self.pic1, 'wb')
        f.write(output)
        f.close()
        self.showPic1(self.pic1)

    def showPic1(self, pic1):
        if self.xd == False:
            currPic = loadPic(pic1, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic1, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic1'].instance.setPixmap(currPic)
        return

    def getPic2(self, output):
        f = open(self.pic2, 'wb')
        f.write(output)
        f.close()
        self.showPic2(self.pic2)

    def showPic2(self, pic2):
        if self.xd == False:
            currPic = loadPic(pic2, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic2, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic2'].instance.setPixmap(currPic)
        return

    def getPic3(self, output):
        f = open(self.pic3, 'wb')
        f.write(output)
        f.close()
        self.showPic3(self.pic3)

    def showPic3(self, pic3):
        if self.xd == False:
            currPic = loadPic(pic3, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic3, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic3'].instance.setPixmap(currPic)
        return

    def getPic4(self, output):
        f = open(self.pic4, 'wb')
        f.write(output)
        f.close()
        self.showPic4(self.pic4)

    def showPic4(self, pic4):
        if self.xd == False:
            currPic = loadPic(pic4, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic4, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic4'].instance.setPixmap(currPic)
        return

    def getPic5(self, output):
        f = open(self.pic5, 'wb')
        f.write(output)
        f.close()
        self.showPic5(self.pic5)

    def showPic5(self, pic5):
        if self.xd == False:
            currPic = loadPic(pic5, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic5, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic5'].instance.setPixmap(currPic)
        return

    def getPic6(self, output):
        f = open(self.pic6, 'wb')
        f.write(output)
        f.close()
        self.showPic6(self.pic6)

    def showPic6(self, pic6):
        if self.xd == False:
            currPic = loadPic(pic6, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic6, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic6'].instance.setPixmap(currPic)
        return

    def getPicPost(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPicPost(self.picfile)

    def showPicPost(self, picpost):
        if self.xd == False:
            currPic = loadPic(picpost, 490, 245, 3, 0, 0, 0)
        else:
            currPic = loadPic(picpost, 400, 200, 3, 0, 0, 0)
        if currPic != None:
            self['picpost'].instance.setPixmap(currPic)
            self['piclabel'].show()
            self['piclabel2'].show()
            if self.trailer == True:
                self['cinlogo'].show()
                self['playlogo'].show()
        return

    def showPicTVinfo1(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo1'].instance.setPixmap(currPic)
        return

    def showPicTVinfo2(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo2'].instance.setPixmap(currPic)
        return

    def showPicTVinfo3(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo3'].instance.setPixmap(currPic)
        return

    def showPicTVinfo4(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo4'].instance.setPixmap(currPic)
        return

    def showPicTVinfo5(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo5'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def downloadPostPage(self, link, name):
        downloadPage(link, self.localhtml2).addCallback(name).addErrback(self.downloadError)

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadPageError)

    def downloadPageError(self, output):
        self['label'].setText('Info = Filter: NEU, Bouquet = +- Tag, <> = +- Woche')
        self['label'].stopBlinking()
        self['label'].show()
        self.ready = True

    def refresh(self):
        self.postviewready = False
        self.ready = False
        self.current = 'menu'
        self['label'].setText('Bitte warten...')
        self['label'].startBlinking()
        self.makeTVTimer.callback.append(self.downloadFullPage(self.link, self.makeTVTipps))

    def showProgrammPage(self):
        self['label'].setText('Info = Filter: NEU, Bouquet = +- Tag, <> = +- Woche')
        self['label2'].setText('= Timer')
        self['label3'].setText('= Suche')
        self['label4'].setText('= Zappen')
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        self.current = 'menu'
        self['menu'].show()
        try:
            c = self['menu'].getSelectedIndex()
            d = self.len - c
            x = self.len % 6
            if d > 6:
                x = 0
            elif d > x:
                x = 0
        except IndexError:
            x = 0

        if x == 0:
            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
            self['pic4'].show()
            self['pic5'].show()
            self['pic6'].show()
        elif x == 1:
            self['pic1'].show()
        elif x == 2:
            self['pic1'].show()
            self['pic2'].show()
        elif x == 3:
            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
        elif x == 4:
            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
            self['pic4'].show()
        elif x == 5:
            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
            self['pic4'].show()
            self['pic5'].show()

    def down(self):
        if self.current == 'menu':
            try:
                c = self['menu'].getSelectedIndex()
            except IndexError:
                return

            self['menu'].down()
            if c + 1 == self.len:
                try:
                    picurl1 = self.picurllist[0]
                    self.download(picurl1, self.getPic1)
                    self['pic1'].show()
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[1]
                    self.download(picurl2, self.getPic2)
                    self['pic2'].show()
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[2]
                    self.download(picurl3, self.getPic3)
                    self['pic3'].show()
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[3]
                    self.download(picurl4, self.getPic4)
                    self['pic4'].show()
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[4]
                    self.download(picurl5, self.getPic5)
                    self['pic5'].show()
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[5]
                    self.download(picurl6, self.getPic6)
                    self['pic6'].show()
                except IndexError:
                    self['pic6'].hide()

            elif c % 6 == 5:
                try:
                    picurl1 = self.picurllist[c + 1]
                    self.download(picurl1, self.getPic1)
                    self['pic1'].show()
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 2]
                    self.download(picurl2, self.getPic2)
                    self['pic2'].show()
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 3]
                    self.download(picurl3, self.getPic3)
                    self['pic3'].show()
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 4]
                    self.download(picurl4, self.getPic4)
                    self['pic4'].show()
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 5]
                    self.download(picurl5, self.getPic5)
                    self['pic5'].show()
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 6]
                    self.download(picurl6, self.getPic6)
                    self['pic6'].show()
                except IndexError:
                    self['pic6'].hide()

        elif self.current == 'searchmenu':
            self['searchmenu'].down()
        else:
            self['textpage'].pageDown()

    def up(self):
        if self.current == 'menu':
            try:
                c = self['menu'].getSelectedIndex()
            except IndexError:
                return

            self['menu'].up()
            if c == 0:
                l = self.len
                d = l % 6
                if d == 0:
                    d = 6
                try:
                    picurl1 = self.picurllist[l - d]
                    self.download(picurl1, self.getPic1)
                    self['pic1'].show()
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[l - d + 1]
                    self.download(picurl2, self.getPic2)
                    self['pic2'].show()
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[l - d + 2]
                    self.download(picurl3, self.getPic3)
                    self['pic3'].show()
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[l - d + 3]
                    self.download(picurl4, self.getPic4)
                    self['pic4'].show()
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[l - d + 4]
                    self.download(picurl5, self.getPic5)
                    self['pic5'].show()
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[l - d + 5]
                    self.download(picurl6, self.getPic6)
                    self['pic6'].show()
                except IndexError:
                    self['pic6'].hide()

            elif c % 6 == 0:
                try:
                    picurl1 = self.picurllist[c - 6]
                    self.download(picurl1, self.getPic1)
                    self['pic1'].show()
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c - 5]
                    self.download(picurl2, self.getPic2)
                    self['pic2'].show()
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c - 4]
                    self.download(picurl3, self.getPic3)
                    self['pic3'].show()
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c - 3]
                    self.download(picurl4, self.getPic4)
                    self['pic4'].show()
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c - 2]
                    self.download(picurl5, self.getPic5)
                    self['pic5'].show()
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c - 1]
                    self.download(picurl6, self.getPic6)
                    self['pic6'].show()
                except IndexError:
                    self['pic6'].hide()

        elif self.current == 'searchmenu':
            self['searchmenu'].up()
        else:
            self['textpage'].pageUp()

    def rightDown(self):
        if self.current == 'menu':
            try:
                c = self['menu'].getSelectedIndex()
            except IndexError:
                return

            self['menu'].pageDown()
            l = self.len
            d = c % 6
            e = l % 6
            if e == 0:
                e = 6
            if c + e >= l:
                pass
            elif d == 0:
                try:
                    picurl1 = self.picurllist[c + 6]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 7]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 8]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 9]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 10]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 11]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 1:
                try:
                    picurl1 = self.picurllist[c + 5]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 6]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 7]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 8]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 9]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 10]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 2:
                try:
                    picurl1 = self.picurllist[c + 4]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 5]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 6]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 7]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 8]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 9]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 3:
                try:
                    picurl1 = self.picurllist[c + 3]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 4]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 5]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 6]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 7]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 8]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 4:
                try:
                    picurl1 = self.picurllist[c + 2]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 3]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 4]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 5]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 6]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 7]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 5:
                try:
                    picurl1 = self.picurllist[c + 1]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 2]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 3]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 4]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 5]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 6]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

        elif self.current == 'searchmenu':
            self['searchmenu'].pageDown()
        else:
            self['textpage'].pageDown()

    def leftUp(self):
        if self.current == 'menu':
            try:
                c = self['menu'].getSelectedIndex()
            except IndexError:
                return

            self['menu'].pageUp()
            d = c % 6
            if c < 6:
                pass
            elif d == 0:
                try:
                    picurl1 = self.picurllist[c - 6]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 5]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 4]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 3]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 2]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 1]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 1:
                try:
                    picurl1 = self.picurllist[c - 7]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 6]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 5]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 4]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 3]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 2]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 2:
                try:
                    picurl1 = self.picurllist[c - 8]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 7]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 6]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 5]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 4]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 3]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 3:
                try:
                    picurl1 = self.picurllist[c - 9]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 8]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 7]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 6]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 5]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 4]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 4:
                try:
                    picurl1 = self.picurllist[c - 10]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 9]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 8]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 7]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 6]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 5]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 5:
                try:
                    picurl1 = self.picurllist[c - 11]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 10]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 9]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 8]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 7]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 6]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
            self['pic4'].show()
            self['pic5'].show()
            self['pic6'].show()
        elif self.current == 'searchmenu':
            self['searchmenu'].pageUp()
        else:
            self['textpage'].pageUp()

    def zapUp(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapUp(InfoBar.instance)

    def zapDown(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapDown(InfoBar.instance)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def picReturn(self):
        pass

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if self.current == 'menu':
            self.close()
        elif self.current == 'searchmenu':
            self.search = False
            self.oldsearchindex = 1
            self['searchmenu'].hide()
            self['searchlogo'].hide()
            self['searchtimer'].hide()
            self['searchtext'].hide()
            self.showProgrammPage()
            self.setTitle('')
            self.setTitle(self.titel)
        elif self.current == 'postview' and self.search == False:
            self.postviewready = False
            self.setTitle('')
            self.setTitle(self.titel)
            self.showProgrammPage()
        elif self.current == 'postview' and self.search == True:
            self.postviewready = False
            self.showsearch()
            self.current = 'searchmenu'


class TVNeuView(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="TV Neuerscheinungen - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,60" size="880,450" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="pic1" position="890,60" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic2" position="890,135" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic3" position="890,210" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic4" position="890,285" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic5" position="890,360" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic6" position="890,435" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtimer" position="306,0" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,60" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,60" size="727,60" font="{font};24" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,120" size="992,360" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="306,60" size="400,200" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="391,216" size="90,22" font="{font};20" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="391,238" size="90,22" font="{font};16" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,60" size="252,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="685,60" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="685,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="685,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="685,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="65,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="120,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="65,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="267,60" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="463,138" size="85,45" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/play.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,270" size="992,235" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="987,270" size="20,235" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_235.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="150,5" size="712,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="376,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="486,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="596,27" size="100,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="352,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="462,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="572,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title="TV Neuerscheinungen - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,75" size="1085,540" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="pic1" position="1095,75" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic2" position="1095,165" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic3" position="1095,255" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic4" position="1095,345" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic5" position="1095,435" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic6" position="1095,525" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtimer" position="420,5" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,75" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,75" size="955,65" font="{font};26" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,140" size="1220,480" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="375,70" size="490,245" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="476,265" size="100,25" font="{font};22" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="476,290" size="100,25" font="{font};18" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,70" size="310,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="855,70" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="855,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="855,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="855,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="80,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="150,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="80,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="325,70" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="565,163" size="109,58" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/playHD.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,325" size="1220,315" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="1214,325" size="22,315" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_315.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="220,10" size="800,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="469,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="594,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="719,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="445,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="570,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="695,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'

    def __init__(self, session, link):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '24'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '22'
            else:
                self.fontlarge = False
                fontsize = '20'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVNeuView.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '20'
            else:
                self.fontlarge = False
                fontsize = '18'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVNeuView.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.pic1 = '/tmp/tvspielfilm1.jpg'
        self.pic2 = '/tmp/tvspielfilm2.jpg'
        self.pic3 = '/tmp/tvspielfilm3.jpg'
        self.pic4 = '/tmp/tvspielfilm4.jpg'
        self.pic5 = '/tmp/tvspielfilm5.jpg'
        self.pic6 = '/tmp/tvspielfilm6.jpg'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.localhtml2 = '/tmp/tvspielfilm2.html'
        self.current = 'menu'
        self.oldcurrent = 'menu'
        self.titel = ''
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.picurllist = []
        self.searchlink = []
        self.searchref = []
        self.searchentries = []
        self.start = ''
        self.end = ''
        self.day = ''
        self.name = ''
        self.shortdesc = ''
        self.sref = []
        self.postlink = link
        self.link = link
        self.trailerurl = ''
        self.POSTtext = ''
        self.EPGtext = ''
        if config.plugins.tvspielfilm.picon.value == 'yes':
            self.picon = True
            self.piconfolder = config.plugins.tvspielfilm.piconfolder.value
        else:
            self.picon = False
        self.hideflag = True
        self.new = False
        self.search = False
        self.rec = False
        self.ready = False
        self.postviewready = False
        self.mehrbilder = False
        self.trailer = False
        self.movie = False
        self.datum = False
        self.filter = True
        self.len = 0
        self.oldindex = 0
        self.oldsearchindex = 1
        self['pic1'] = Pixmap()
        self['pic2'] = Pixmap()
        self['pic3'] = Pixmap()
        self['pic4'] = Pixmap()
        self['pic5'] = Pixmap()
        self['pic6'] = Pixmap()
        self['picpost'] = Pixmap()
        self['tvinfo1'] = Pixmap()
        self['tvinfo2'] = Pixmap()
        self['tvinfo3'] = Pixmap()
        self['tvinfo4'] = Pixmap()
        self['tvinfo5'] = Pixmap()
        self['cinlogo'] = Pixmap()
        self['cinlogo'].hide()
        self['playlogo'] = Pixmap()
        self['playlogo'].hide()
        self['searchlogo'] = Pixmap()
        self['searchlogo'].hide()
        self['searchtimer'] = Pixmap()
        self['searchtimer'].hide()
        self['searchtext'] = Label('')
        self['searchtext'].hide()
        self['textpage'] = ScrollLabel('')
        self['infotext'] = Label('')
        self['infotext'].hide()
        self['infotext2'] = Label('')
        self['infotext2'].hide()
        self['infotext3'] = Label('')
        self['infotext3'].hide()
        self['infotext4'] = Label('')
        self['infotext4'].hide()
        self['infotext5'] = Label('')
        self['infotext5'].hide()
        self['infotext6'] = Label('')
        self['infotext6'].hide()
        self['infotext7'] = Label('')
        self['infotext7'].hide()
        self['infotext8'] = Label('')
        self['infotext8'].hide()
        self['piclabel'] = Label('')
        self['piclabel'].hide()
        self['piclabel2'] = Label('')
        self['piclabel2'].hide()
        self['slider_textpage'] = Pixmap()
        self['slider_textpage'].hide()
        self['searchmenu'] = ItemList([])
        self['searchmenu'].hide()
        self['menu'] = ItemList([])
        self['label'] = BlinkingLabel('Bitte warten...')
        self['label'].startBlinking()
        self['label2'] = Label('= Timer')
        self['label3'] = Label('= Suche')
        self['label4'] = Label('= Zappen')
        self['actions'] = ActionMap(['OkCancelActions',
         'ChannelSelectBaseActions',
         'DirectionActions',
         'EPGSelectActions',
         'NumberActions',
         'InfobarTeletextActions',
         'MoviePlayerActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'nextBouquet': self.nextDay,
         'prevBouquet': self.prevDay,
         'nextMarker': self.nextWeek,
         'prevMarker': self.prevWeek,
         '0': self.gotoEnd,
         '1': self.zapUp,
         '2': self.zapDown,
         '7': self.IMDb,
         '8': self.TMDb,
         '9': self.TVDb,
         'info': self.getEPG,
         'epg': self.getEPG,
         'leavePlayer': self.youTube,
         'startTeletext': self.pressText,
         'displayHelp': self.infoScreen}, -1)
        self['ColorActions'] = ActionMap(['ColorActions'], {'green': self.green,
         'yellow': self.yellow,
         'red': self.makeTimer,
         'blue': self.hideScreen}, -1)
        self.servicefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/service.references'
        self.service_db = serviceDB(self.servicefile)
        self.timer = open('/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db').read()
        self.date = datetime.date.today()
        one_day = datetime.timedelta(days=1)
        self.nextdate = self.date + one_day
        weekday = self.date.weekday()
        if weekday == 0:
            self.weekday = 'Montag'
        elif weekday == 1:
            self.weekday = 'Dienstag'
        elif weekday == 2:
            self.weekday = 'Mittwoch'
        elif weekday == 3:
            self.weekday = 'Donnerstag'
        elif weekday == 4:
            self.weekday = 'Freitag'
        elif weekday == 5:
            self.weekday = 'Samstag'
        elif weekday == 6:
            self.weekday = 'Sonntag'
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        if config.plugins.tvspielfilm.genreinfo.value == 'no':
            self.showgenre = False
        else:
            self.showgenre = True
        self.makeTVTimer = eTimer()
        self.makeTVTimer.callback.append(self.downloadFullPage(link, self.makeTVTipps))
        self.makeTVTimer.start(500, True)

    def makeTVTipps(self, string):
        output = open(self.localhtml, 'r').read()
        self.sref = []
        self['pic1'].hide()
        self['pic2'].hide()
        self['pic3'].hide()
        self['pic4'].hide()
        self['pic5'].hide()
        self['pic6'].hide()
        startpos = find(output, 'id="c-sp-opener"><span>Spielfilm</span></a>')
        endpos = find(output, 'id="c-spo-opener"><span>Sport</span></a>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        date = str(self.date.strftime('%d.%m.%Y'))
        self.titel = 'TV Neuerscheinungen - ' + str(self.weekday) + ', ' + date
        self.setTitle(self.titel)
        bereich = sub('<div class="image-wrapper.*?">\n\\s+<a href="', '<td>LINK', bereich)
        bereich = sub('" target="_self" onclick="', '</td>', bereich)
        bereich = sub('class="aholder" title=".*?<strong>', '<td>NAME', bereich)
        bereich = sub('class="aholder" title="', '<td>TITEL', bereich)
        bereich = sub('<span class="add-info ', '<td>INFO', bereich)
        bereich = sub('">TIPP</span>', '</td>', bereich)
        bereich = sub('">LIVE</span>', '</td>', bereich)
        bereich = sub('">HDTV</span>', '</td>', bereich)
        bereich = sub('">NEU</span>', '</td>', bereich)
        bereich = sub('">OMU</span>', '</td>', bereich)
        bereich = sub('"></span>', '</td>', bereich)
        bereich = sub('">.*?<img src="', '</td><td>PIC', bereich)
        bereich = sub('" width="', '</td>', bereich)
        bereich = sub('<span class="time">', '<td>TIME', bereich)
        bereich = sub('</span>', '</td>', bereich)
        bereich = sub('</strong>', '</td>', bereich)
        bereich = sub('opener"><span>', '', bereich)
        bereich = sub('<span>Play</td>', '', bereich)
        bereich = sub('<span>', '<td>GENRE', bereich)
        bereich = sub('<span class="logotype chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('">\n.*?<a href="', '</td>', bereich)
        bereich = sub('<wbr/>', '', bereich)
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.picurllist = []
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 9
        for x in a:
            if y == 0:
                res = [x]
                self.new = False
                if self.backcolor == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1885, 90), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1880, 75), font=0, backcolor_sel=self.back_color, text=''))
                x = sub('LINK', '', x)
                linkfilter = x
            if y == 2:
                x = sub('PIC', '', x)
                picfilter = x
            if y == 3:
                x = sub('TIME', '', x)
                start = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(115, 25), size=(75, 30), font=-1, backcolor=12255304, color=16777215, backcolor_sel=12255304, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(112, 13), size=(63, 30), font=0, backcolor=12255304, color=16777215, backcolor_sel=12255304, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(74, 18), size=(75, 25), font=-1, backcolor=12255304, color=16777215, backcolor_sel=12255304, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(56, 13), size=(63, 23), font=0, backcolor=12255304, color=16777215, backcolor_sel=12255304, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
            if y == 4:
                if search('INFO', x) is not None:
                    x = sub('INFO', '', x)
                    if search('neu|new', x) is not None:
                        self.new = True
                    if self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(1005, 20), size=(60, 20), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(815, 20), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 6
            if y == 5:
                if search('INFO', x) is not None:
                    x = sub('INFO', '', x)
                    if search('neu|new', x) is not None:
                        self.new = True
                    if self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(1005, 50), size=(60, 20), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(815, 40), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 6
            if y == 6:
                x = sub('NAME', '', x)
                titelfilter = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(203, 17), size=(732, 30), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(186, 12), size=(572, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(162, 17), size=(773, 30), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(130, 12), size=(628, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
            if y == 7:
                x = sub('GENRE', '', x)
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(203, 48), size=(732, 30), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(186, 39), size=(572, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(162, 48), size=(773, 30), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(130, 39), size=(628, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
            if y == 8:
                x = sub('LOGO', '', x)
                service = x
                sref = self.service_db.lookup(service)
                if self.picon == True:
                    picon = self.findPicon(sref)
                    if picon is not None:
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 0), size=(100, 60), png=LoadPixmap(picon)))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(100, 60), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER | RT_WRAP, text='Picon not found'))
                elif self.xd == False:
                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                    if fileExists(png):
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 12), size=(59, 36), png=loadPNG(png)))
                else:
                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                    if fileExists(png):
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 11), size=(44, 27), png=loadPNG(png)))
                if sref == 'nope':
                    pass
                elif self.new == True:
                    hour = sub(':..', '', start)
                    if int(hour) < 5:
                        one_day = datetime.timedelta(days=1)
                        date = self.date + one_day
                    else:
                        date = self.date
                    timer = str(date) + ':::' + start + ':::' + str(sref)
                    if timer in self.timer:
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(130, 52), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(121, 44), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(89, 52), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(65, 44), size=(45, 15), png=loadPNG(png)))
                    self.sref.append(sref)
                    self.picurllist.append(picfilter)
                    self.tvlink.append(linkfilter)
                    self.tvtitel.append(titelfilter)
                    self.tventries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.xd == False:
            self['menu'].l.setItemHeight(90)
        else:
            self['menu'].l.setItemHeight(75)
        self['menu'].l.setList(self.tventries)
        self['menu'].moveToIndex(self.oldindex)
        if self.oldindex > 5:
            self.leftUp()
            self.rightDown()
        self.len = len(self.tventries)
        self['label'].setText('Bouquet = +- Tag, <> = +- Woche')
        self['label'].stopBlinking()
        self['label'].show()
        self.ready = True
        try:
            picurl1 = self.picurllist[0]
            self.download(picurl1, self.getPic1)
            self['pic1'].show()
        except IndexError:
            self['pic1'].hide()

        try:
            picurl2 = self.picurllist[1]
            self.download(picurl2, self.getPic2)
            self['pic2'].show()
        except IndexError:
            self['pic2'].hide()

        try:
            picurl3 = self.picurllist[2]
            self.download(picurl3, self.getPic3)
            self['pic3'].show()
        except IndexError:
            self['pic3'].hide()

        try:
            picurl4 = self.picurllist[3]
            self.download(picurl4, self.getPic4)
            self['pic4'].show()
        except IndexError:
            self['pic4'].hide()

        try:
            picurl5 = self.picurllist[4]
            self.download(picurl5, self.getPic5)
            self['pic5'].show()
        except IndexError:
            self['pic5'].hide()

        try:
            picurl6 = self.picurllist[5]
            self.download(picurl6, self.getPic6)
            self['pic6'].show()
        except IndexError:
            self['pic6'].hide()

        return

    def makePostviewPage(self, string):
        output = open(self.localhtml2, 'r').read()
        self['label2'].setText('= Timer')
        self['label3'].setText('= YouTube')
        self['label4'].setText('= Wikipedia')
        self['menu'].hide()
        self['pic1'].hide()
        self['pic2'].hide()
        self['pic3'].hide()
        self['pic4'].hide()
        self['pic5'].hide()
        self['pic6'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        output = sub('</dl>.\n\\s+</div>.\n\\s+</section>', '</cast>', output)
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('</cast>')
            if endpos == -1:
                endpos = output.find('<h2 class="broadcast-info">')
                if endpos == -1:
                    endpos = output.find('<div class="OUTBRAIN"')
                    if endpos == -1:
                        endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('\r', '', bereich)
        bereich = re.sub('<ul class="slidelist">.*?</ul>', '', bereich, flags=re.S)
        bereich = re.sub('<script.*?</script>', '', bereich, flags=re.S)
        bereich = re.sub('<style.*?</style>', '', bereich, flags=re.S)
        bereich = re.sub('<div class="text" id=".*?</div>', '', bereich, flags=re.S)
        if search('rl: .https://video.tvspielfilm.de/.*?mp4', output) is not None:
            trailerurl = search('rl: .https://video.tvspielfilm.de/(.*?).mp4', output)
            self.trailerurl = 'https://video.tvspielfilm.de/' + trailerurl.group(1) + '.mp4'
            self.trailer = True
        else:
            self.trailer = False
        bereich = sub('" alt=".*?" width="', '" width="', bereich)
        picurl = search('<img src="(.*?)" width="', bereich)
        if picurl is not None:
            self.download(picurl.group(1), self.getPicPost)
            self['picpost'].show()
        else:
            picurl = search('<meta property="og:image" content="(.*?)"', output)
            if picurl is not None:
                self.download(picurl.group(1), self.getPicPost)
                self['picpost'].show()
            else:
                picurl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/TV-Spielfilm-Logo.svg/500px-TV-Spielfilm-Logo.svg.png'
                self.download(picurl, self.getPicPost)
                self['picpost'].show()
        if self.search == False:
            title = search('<title>(.*?)</title>', output)
            self.title = transHTML(title.group(1))
            self.setTitle(self.title)
        if search('<ul class="rating-dots">', bereich) is not None:
            self.movie = True
        else:
            self.movie = False
        if search('<div class="film-gallery">', output) is not None:
            self.mehrbilder = True
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        else:
            self.mehrbilder = False
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        try:
            parts = infotext[0].split(', ')
            self['infotext'].setText(parts[0])
            self['infotext'].show()
        except IndexError:
            self['infotext'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext2'].setText(parts[1])
            self['infotext2'].show()
        except IndexError:
            self['infotext2'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext3'].setText(parts[2])
            self['infotext3'].show()
        except IndexError:
            self['infotext3'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext4'].setText(parts[0])
            self['infotext4'].show()
        except IndexError:
            self['infotext4'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext5'].setText(parts[1])
            self['infotext5'].show()
        except IndexError:
            self['infotext5'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext6'].setText(parts[2])
            self['infotext6'].show()
        except IndexError:
            self['infotext6'].setText('')

        try:
            parts = infotext[2].split(', ')
            self['infotext7'].setText(parts[0] + ', ' + parts[1])
            self['infotext7'].show()
        except IndexError:
            self['infotext7'].setText('')

        try:
            self['infotext8'].setText(infotext[3])
            self['infotext8'].show()
        except IndexError:
            self['infotext8'].setText('')

        tvinfo = re.findall('<span class="add-info (.*?)">', bereich)
        try:
            if self.xd == False:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + 'HD.png'
            else:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + '.png'
            self.showPicTVinfo1(tvinfo1)
            self['tvinfo1'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + 'HD.png'
            else:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + '.png'
            self.showPicTVinfo2(tvinfo2)
            self['tvinfo2'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + 'HD.png'
            else:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + '.png'
            self.showPicTVinfo3(tvinfo3)
            self['tvinfo3'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + 'HD.png'
            else:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + '.png'
            self.showPicTVinfo4(tvinfo4)
            self['tvinfo4'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + 'HD.png'
            else:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + '.png'
            self.showPicTVinfo5(tvinfo5)
            self['tvinfo5'].show()
        except IndexError:
            pass

        self['piclabel'].setText(self.start[0:5])
        try:
            parts = infotext[0].split(', ')
            text = shortenChannel(parts[2])
            self['piclabel2'].setText(text[0:10])
        except IndexError:
            self['piclabel2'].setText('')

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        bereich = sub('<blockquote class="broadcast-detail__quote">\n\\s+<p>', '<p>>> ', bereich)
        bereich = sub('</p>\n[ ]+</blockquote>', ' <<</p>', bereich)
        bereich = sub('<section class="serial-info">\n\\s+', '<p>', bereich)
        bereich = sub('</section>', '</p>', bereich)
        bereich = sub('</span>\\s+', '</span>, ', bereich)
        bereich = sub('<li class="titleName">', '</p><p> \xc2\xb7 ', bereich)
        bereich = sub('<li class="subtitleName">', '#sub#', bereich)
        bereich = sub('ShowView [0-9-]+', '', bereich)
        bereich = sub('<a href=".*?">', '', bereich)
        bereich = sub('<h1.*?>', '<p>', bereich)
        bereich = sub('</h1>', '</p>', bereich)
        bereich = sub('<h3.*?>', '<p>', bereich)
        bereich = sub('</h3>', '</p>', bereich)
        bereich = sub('<br/>', '</p><p>', bereich)
        bereich = sub('<p>\n', '<p>', bereich)
        bereich = sub('<dt>', '<p>', bereich)
        bereich = sub('<dt class="role">', '<p>', bereich)
        bereich = sub('</dt>\n\\s+<dd>\n\\s+', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd>', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd class="name">', ': ', bereich)
        bereich = sub('\n[ ]+,', ',', bereich)
        bereich = sub(', [ ]+', ', ', bereich)
        bereich = sub('</a>', '</p>', bereich)
        bereich = sub('\n\\s+</dd>', '</p>', bereich)
        bereich = sub('</a></dd>', '</p>', bereich)
        bereich = sub('</dd>', '</p>', bereich)
        bereich = sub('</dt>', '</p>', bereich)
        text = ''
        a = findall('<p.*?>(.*?)</p>', bereich)
        for x in a:
            if x != '':
                text = text + x + '\n\n'

        text = sub('<[^>]*>', '', text)
        text = sub('</p<<p<', '\n\n', text)
        text = sub('\n\\s+\n*', '\n\n', text)
        text = sub('#sub#', '\n  ', text)
        if self.fontlarge == True:
            if self.xd == False:
                fill = '____________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
            else:
                fill = '________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        elif self.xd == False:
            fill = '____________________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        else:
            fill = '_________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        self.POSTtext = text + fill
        self['textpage'].setText(self.POSTtext)
        self['textpage'].show()
        self['slider_textpage'].show()
        self.showEPG = False
        self.postviewready = True
        return

    def makePostTimer(self, output):
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('<h2 class="broadcast-info">')
            if endpos == -1:
                endpos = output.find('<div class="OUTBRAIN"')
                if endpos == -1:
                    endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        self.current = 'postview'
        self.postviewready = True
        self.red()
        return

    def makeSearchView(self, url):
        header = {'User-Agent': 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100627 Firefox/3.6.6',
         'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
         'Accept-Language': 'en-us,en;q=0.5'}
        searchrequest = Request(url, None, header)
        try:
            output = urlopen(searchrequest).read()
        except (HTTPError,
         URLError,
         HTTPException,
         socket.error,
         AttributeError):
            output = ' '

        title = search('<title>(.*?)</title>', output)
        if title is not None:
            self['searchtext'].setText(title.group(1))
            self['searchtext'].show()
            self.setTitle('')
            self.setTitle(title.group(1))
        startpos = find(output, '<table class="primetime-table">')
        endpos = find(output, '</table>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('<span>TV-Sendungen am', '<td>DATUMTV-Sendungen am', bereich)
        bereich = sub('class="search-starttimes">\n\\s+<span>', '<td>TIME', bereich)
        bereich = sub('<h3><a href="', '<td>LINK', bereich)
        if self.showgenre == False:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title=".*?">', '</td><td>TITEL', bereich)
            bereich = sub('</a></h3>', '</td>', bereich)
        else:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title="', '</td><td>TITEL', bereich)
            bereich = sub('">.*?</a></h3>', '</td>', bereich)
        bereich = sub('<span class="logotype chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('<p>', '<td>GENRE', bereich)
        bereich = sub('<li class="', '<td>INFO', bereich)
        bereich = sub('<span\n\\s+class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span class="editorial-', '<td>RATING', bereich)
        bereich = sub('"></span>', '', bereich)
        bereich = sub('</span>\n', '</td>', bereich)
        bereich = sub('</span>', '', bereich)
        bereich = sub('\n\\s+</div>\n', '</td>', bereich)
        bereich = sub('\n.*?</p>', '</td>', bereich)
        bereich = sub('"></li>', '</td>', bereich)
        bereich = sub('\n.*?<br/><em class=".*?</em>', '', bereich)
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 10
        for x in a:
            if y == 0:
                res = [x]
                if self.backcolor == True:
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                if search('DATUM', x) is not None:
                    if self.datum == True:
                        try:
                            del self.searchref[-1]
                            del self.searchlink[-1]
                            del self.searchentries[-1]
                        except IndexError:
                            pass

                    else:
                        self.datum = True
                    x = sub('DATUM', '', x)
                    self.datum_string = x
                    res_datum = [x]
                    if self.backcolor == True:
                        if self.picon == True:
                            if self.xd == False:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                            else:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                        elif self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                    if self.picon == True:
                        if self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    elif self.xd == False:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    else:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    self.searchref.append('na')
                    self.searchlink.append('na')
                    self.searchentries.append(res_datum)
                    self.filter = True
                    y = 9
                else:
                    y = 1
            if y == 1:
                x = sub('TIME', '', x)
                start = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(100, 17), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(100, 18), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(60, 7), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(45, 3), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
            if y == 2:
                if search('LOGO', x) is not None:
                    logo = search('LOGO(.*?)">', x)
                    if logo is not None:
                        x = logo.group(1)
                    service = x
                    sref = self.service_db.lookup(service)
                    if sref == 'nope':
                        self.filter = True
                    else:
                        self.filter = False
                        self.searchref.append(sref)
                        if self.picon == True:
                            picon = self.findPicon(sref)
                            if picon is not None:
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 0), size=(100, 60), png=LoadPixmap(picon)))
                            else:
                                res.append(MultiContentEntryText(pos=(0, 0), size=(100, 60), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER | RT_WRAP, text='Picon not found'))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(59, 36), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(44, 27), png=loadPNG(png)))
                        start = sub(' - ..:..', '', start)
                        daynow = sub('....-..-', '', str(self.date))
                        day = search(', ([0-9]+). ', self.datum_string)
                        if day is not None:
                            day = day.group(1)
                        else:
                            day = daynow
                        if int(day) >= int(daynow) - 1:
                            date = str(self.date) + 'FIN'
                        else:
                            four_weeks = datetime.timedelta(weeks=4)
                            date = str(self.date + four_weeks) + 'FIN'
                        date = sub('[0-9][0-9]FIN', day, date)
                        timer = date + ':::' + start + ':::' + str(sref)
                        if timer in self.timer:
                            self.rec = True
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
            if y == 3:
                if self.filter == False:
                    x = sub('LINK', '', x)
                    self.searchlink.append(x)
            if y == 4:
                if self.filter == False:
                    x = sub('TITEL', '', x)
                    titelfilter = x
            if y == 5:
                if self.filter == False:
                    if search('GENRE', x) is None:
                        if self.picon == True:
                            if self.xd == False:
                                res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                            else:
                                res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        elif self.xd == False:
                            res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        y = 6
            if y == 6:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        if self.rec == True:
                            self.rec = False
                        else:
                            x = sub('INFO', '', x)
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 7:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 8:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 9:
                if search('INFO', x) is not None:
                    y = 7
                elif self.filter == False:
                    self.datum = False
                    if search('RATING', x) is not None:
                        x = sub('RATING', '', x)
                        if x != 'rating small':
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 10), size=(40, 40), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 16), size=(29, 29), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 0), size=(40, 40), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 1), size=(29, 29), png=loadPNG(png)))
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    else:
                        res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    self.searchentries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.picon == True:
            self['searchmenu'].l.setItemHeight(60)
        elif self.xd == False:
            self['searchmenu'].l.setItemHeight(40)
        else:
            self['searchmenu'].l.setItemHeight(30)
        self['searchmenu'].l.setList(self.searchentries)
        self['searchmenu'].show()
        self.searchcount += 1
        if self.searchcount <= self.maxsearchcount and search('<a class="next" href=".*?"', bereich) is not None:
            nextpage = search('<a class="next" href="(.*?)"', bereich)
            if nextpage is not None:
                self.makeSearchView(nextpage.group(1))
            else:
                self.ready = True
        else:
            try:
                if self.searchref[-1] == 'na':
                    del self.searchref[-1]
                    del self.searchlink[-1]
                    del self.searchentries[-1]
                    self['searchmenu'].l.setList(self.searchentries)
            except IndexError:
                pass

            self['searchmenu'].moveToIndex(self.oldsearchindex)
            self.current = 'searchmenu'
            self.ready = True
        return

    def ok(self):
        if self.hideflag == False:
            return
        if self.current == 'menu' or self.current == 'searchmenu':
            self.selectPage('ok')
        elif self.current == 'postview' and self.postviewready == True:
            if self.trailer == True:
                sref = eServiceReference(4097, 0, self.trailerurl)
                sref.setName(self.name)
                self.session.open(MoviePlayer, sref)
            elif self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)

    def selectPage(self, action):
        if self.current == 'menu' and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                self.postlink = self.tvlink[c]
            except IndexError:
                pass

        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

        if action == 'ok' and self.ready == True:
            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.current = 'postview'
                self.downloadPostPage(self.postlink, self.makePostviewPage)
        return

    def getEPG(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.showEPG == False:
                self.showEPG = True
                if self.search == False:
                    try:
                        c = self['menu'].getSelectedIndex()
                        sref = self.sref[c]
                        channel = ServiceReference(eServiceReference(sref)).getServiceName()
                    except IndexError:
                        sref = None
                        channel = ''

                else:
                    try:
                        c = self['searchmenu'].getSelectedIndex()
                        sref = self.searchref[c]
                        channel = ServiceReference(eServiceReference(sref)).getServiceName()
                    except IndexError:
                        sref = None
                        channel = ''

                if sref is not None:
                    try:
                        start = self.start
                        s1 = sub(':..', '', start)
                        date = str(self.postdate) + 'FIN'
                        date = sub('..FIN', '', date)
                        date = date + self.day
                        parts = start.split(':')
                        seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                        start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                        s2 = sub(':..:..', '', start)
                        if int(s2) > int(s1):
                            start = str(self.date) + ' ' + start
                        else:
                            start = date + ' ' + start
                        start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                        start = int(mktime(start.timetuple()))
                        epgcache = eEPGCache.getInstance()
                        event = epgcache.startTimeQuery(eServiceReference(sref), start)
                        if event == -1:
                            try:
                                self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                            except (KeyError, NameError):
                                self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                        else:
                            event = epgcache.getNextTimeEntry()
                            self.EPGtext = event.getEventName()
                            short = event.getShortDescription()
                            ext = event.getExtendedDescription()
                            dur = '%d Minuten' % (event.getDuration() / 60)
                            if short and short != self.EPGtext:
                                self.EPGtext += '\n\n' + short
                            if ext:
                                self.EPGtext += '\n\n' + ext
                            if dur:
                                self.EPGtext += '\n\n' + dur
                    except:
                        try:
                            self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                        except (KeyError, NameError):
                            self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                else:
                    self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'
                if self.fontlarge == True:
                    if self.xd == False:
                        fill = '____________________________________________________________________________________________________________________________________\n%s' % channel
                    else:
                        fill = '________________________________________________________________________________________________________________________\n%s' % channel
                elif self.xd == False:
                    fill = '____________________________________________________________________________________________________________________________________________________\n%s' % channel
                else:
                    fill = '_________________________________________________________________________________________________________________________________________\n%s' % channel
                self.EPGtext += '\n\n' + fill
                self['textpage'].setText(self.EPGtext)
                self['textpage'].show()
            else:
                self.showEPG = False
                self['textpage'].setText(self.POSTtext)
                self['textpage'].show()
        else:
            self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def makeTimer(self):
        if config.plugins.tvspielfilm.autotimer.value == 'yes' and fileExists('/usr/lib/enigma2/python/Plugins/Extensions/AutoTimer/plugin.pyo'):
            self.autotimer = True
            self.session.openWithCallback(self.choiceTimer, ChoiceBox, title='Timer Auswahl', list=[('Timer', 'timer'), ('AutoTimer', 'autotimer')])
        else:
            self.autotimer = False
            self.red()

    def choiceTimer(self, choice):
        choice = choice and choice[1]
        if choice == 'autotimer':
            self.autotimer = True
            self.red()
        else:
            self.autotimer = False
            self.red()

    def red(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.search == False:
                try:
                    c = self['menu'].getSelectedIndex()
                    self.oldindex = c
                    sref = self.sref[c]
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            elif self.search == True:
                try:
                    c = self['searchmenu'].getSelectedIndex()
                    self.oldsearchindex = c
                    sref = self.searchref[c]
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            else:
                self.session.open(MessageBox, '\nTimer nicht m\xc3\xb6glich:\nKeine Service Reference vorhanden, der ausgew\xc3\xa4hlte Sender wurde nicht importiert.', MessageBox.TYPE_ERROR, close_on_any_key=True)
        elif self.current == 'menu' and self.ready == True:
            c = self['menu'].getSelectedIndex()
            self.oldindex = c
            try:
                self.postlink = self.tvlink[c]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.download(self.postlink, self.makePostTimer)
        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            self.oldsearchindex = c
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.download(self.postlink, self.makePostTimer)
        return

    def finishedTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer[0]:
            entry = answer[1]
            simulTimerList = self.session.nav.RecordTimer.record(entry)
            if simulTimerList is not None:
                for x in simulTimerList:
                    if x.setAutoincreaseEnd(entry):
                        self.session.nav.RecordTimer.timeChanged(x)

                simulTimerList = self.session.nav.RecordTimer.record(entry)
                if simulTimerList is not None:
                    self.session.openWithCallback(self.finishSanityCorrection, TimerSanityConflict, simulTimerList)
            self.makeTimerDB()
            self.ready = True
            self.postviewready = False
            self.current = self.oldcurrent
            if self.search == False:
                self.showProgrammPage()
                self.refresh()
            else:
                self.showsearch()
        else:
            self.ready = True
            self.postviewready = False
            self.current = self.oldcurrent
            if self.search == False:
                self.showProgrammPage()
            else:
                self.showsearch()
        return

    def finishSanityCorrection(self, answer):
        self.finishedTimer(answer)

    def finishedAutoTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.AutoTimerEditor import AutoTimerEditor
            answer, session = answer
            if config.plugins.tvspielfilm.fhd.value == 'yes':
                try:
                    gMainDC.getInstance().setResolution(1920, 1080)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 1080))
                except:
                    import traceback
                    traceback.print_exc()

            session.openWithCallback(self.finishedAutoTimerEdit, AutoTimerEditor, answer)

    def finishedAutoTimerEdit(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.plugin import autotimer
            if autotimer is None:
                from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                autotimer = AutoTimer()
            autotimer.add(answer)
            autotimer.writeXml()
        return

    def makeTimerDB(self):
        timerxml = open('/etc/enigma2/timers.xml').read()
        timer = re.findall('<timer begin="(.*?)" end=".*?" serviceref="(.*?)"', timerxml)
        timerfile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db'
        f = open(timerfile, 'w')
        data = ''
        idx = 0
        for x in timer:
            idx += 1

        for i in range(idx):
            try:
                timerstart = timer[i - 1][0]
                timerstart = int(timerstart) + int(config.recording.margin_before.value) * 60
                timerday = time.strftime('%Y-%m-%d', time.localtime(timerstart))
                timerhour = time.strftime('%H:%M', time.localtime(timerstart))
                timersref = timer[i - 1][1]
                data = data + timerday + ':::' + timerhour + ':::' + timersref + '\n'
            except IndexError:
                pass

        f.write(data)
        f.close()
        self.timer = data

    def green(self):
        if self.current == 'menu' and self.search == False:
            c = self['menu'].getSelectedIndex()
            try:
                sref = self.sref[c]
                if sref != '':
                    self.session.nav.playService(eServiceReference(sref))
            except IndexError:
                pass

        elif self.current == 'postview':
            self.wiki()

    def yellow(self):
        if self.current == 'postview':
            self.youTube()
        elif self.current == 'menu' and self.search == False and self.ready == True:
            try:
                c = self['menu'].getSelectedIndex()
                self.oldindex = c
                titel = self.tvtitel[c]
                self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='TV Spielfilm Suche:', text=titel)
            except IndexError:
                self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='TV Spielfilm Suche:', text='')

    def searchReturn(self, search):
        if search and search != '':
            self.searchstring = search
            self['menu'].hide()
            self['pic1'].hide()
            self['pic2'].hide()
            self['pic3'].hide()
            self['pic4'].hide()
            self['pic5'].hide()
            self['pic6'].hide()
            self['label'].setText('')
            self['label2'].setText('')
            self['label3'].setText('')
            self['label4'].setText('')
            self['searchlogo'].show()
            self['searchtimer'].show()
            self.searchlink = []
            self.searchref = []
            self.searchentries = []
            self.search = True
            self.datum = False
            self.filter = True
            search = search.replace(' ', '+')
            searchlink = 'http://www.tvspielfilm.de/suche/tvs-suche,,ApplicationSearch.html?tab=TV-Sendungen&q=' + search + '&page=1'
            self.maxsearchcount = config.plugins.tvspielfilm.maxsearch.value
            self.searchcount = 0
            self.makeSearchView(searchlink)

    def showsearch(self):
        self.postviewready = False
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['label'].setText('')
        self['label2'].setText('')
        self['label3'].setText('')
        self['label4'].setText('')
        self['searchmenu'].show()
        self['searchlogo'].show()
        self['searchtimer'].show()
        self['searchtext'].show()

    def pressText(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)

    def playTrailer(self):
        if self.current == 'postview' and self.postviewready == True and self.trailer == True:
            sref = eServiceReference(4097, 0, self.trailerurl)
            sref.setName(self.name)
            self.session.open(MoviePlayer, sref)

    def youTube(self):
        if self.current == 'postview' and self.postviewready == True:
            self.session.open(searchYouTube, self.name, self.movie)
        elif self.current == 'menu' and self.search == False and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                titel = self.tvtitel[c]
                self.session.open(searchYouTube, titel, self.movie)
            except IndexError:
                pass

    def wiki(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/Wikipedia.pyo'):
                from Plugins.Extensions.Wikipedia.Wikipedia import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/plugin.pyo'):
                from Plugins.Extensions.Wikipedia.plugin import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            else:
                self.session.openWithCallback(self.wikiInstall, MessageBox, '\nDas Wikipedia Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)
                return

    def wikiInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'wiki', True)

    def translator(self):
        if self.current == 'postview':
            if self.showEPG == False:
                text = self.POSTtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            else:
                text = self.EPGtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/EPGTranslator.pyo'):
                from Plugins.Extensions.EPGTranslator.EPGTranslator import translatorMain
                self.session.open(translatorMain, text)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/plugin.pyo'):
                from Plugins.Extensions.EPGTranslator.plugin import translatorMain
                self.session.open(translatorMain, text)
            else:
                self.session.openWithCallback(self.translatorInstall, MessageBox, '\nDas EPG Translator Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)
                return

    def translatorInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'translator', True)

    def IMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
                from Plugins.Extensions.IMDb.plugin import IMDB
                self.session.open(IMDB, self.name)
            else:
                self.session.openWithCallback(self.IMDbInstall, MessageBox, '\nDas IMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
                from Plugins.Extensions.TMDb.plugin import TMDbMain
                self.session.open(TMDbMain, self.name)
            else:
                self.session.openWithCallback(self.TMDbInstall, MessageBox, '\nDas TMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TVDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
                from Plugins.Extensions.TheTVDB.plugin import TheTVDBMain
                self.name = sub('Die ', '', self.name)
                self.session.open(TheTVDBMain, self.name)
            else:
                self.session.openWithCallback(self.TVDbInstall, MessageBox, '\nDas TheTVDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def IMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedIMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-imdb')

    def finishedIMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas IMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas IMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das IMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-tmdbinfo')

    def finishedTMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TVDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTVDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-thetvdb')

    def finishedTVDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TheTVDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TheTVDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TheTVDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def restartGUI(self, answer):
        if answer is True:
            try:
                self.session.open(TryQuitMainloop, 3)
            except RuntimeError:
                self.close()

    def nextDay(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('date', self.link) is not None:
                self.link = self.link + 'FIN'
                date1 = re.findall('date=(.*?)-..-..FIN', self.link)
                date2 = re.findall('date=....-(.*?)-..FIN', self.link)
                date3 = re.findall('date=....-..-(.*?)FIN', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

                one_day = datetime.timedelta(days=1)
                tomorrow = today + one_day
                weekday = tomorrow.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                nextday = sub('date=(.*?FIN)', 'date=', self.link)
                nextday = nextday + str(tomorrow)
                self.date = tomorrow
                one_day = datetime.timedelta(days=1)
                self.nextdate = self.date + one_day
            else:
                today = datetime.date.today()
                one_day = datetime.timedelta(days=1)
                tomorrow = today + one_day
                weekday = tomorrow.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                nextday = self.link + '?date=' + str(tomorrow)
                self.date = tomorrow
                one_day = datetime.timedelta(days=1)
                self.nextdate = self.date + one_day
            self.link = nextday
            self.oldindex = 0
            self.refresh()
        elif self.current == 'postview' or self.search == True:
            servicelist = self.session.instantiateDialog(ChannelSelection)
            self.session.execDialog(servicelist)
        return

    def prevDay(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('date', self.link) is not None:
                self.link = self.link + 'FIN'
                date1 = re.findall('date=(.*?)-..-..FIN', self.link)
                date2 = re.findall('date=....-(.*?)-..FIN', self.link)
                date3 = re.findall('date=....-..-(.*?)FIN', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

                one_day = datetime.timedelta(days=1)
                yesterday = today - one_day
                weekday = yesterday.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                prevday = sub('date=(.*?FIN)', 'date=', self.link)
                prevday = prevday + str(yesterday)
                self.date = yesterday
                one_day = datetime.timedelta(days=1)
                self.nextdate = self.date + one_day
            else:
                today = datetime.date.today()
                one_day = datetime.timedelta(days=1)
                yesterday = today - one_day
                weekday = yesterday.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                prevday = self.link + '?date=' + str(yesterday)
                self.date = yesterday
                one_day = datetime.timedelta(days=1)
                self.nextdate = self.date + one_day
            self.link = prevday
            self.oldindex = 0
            self.refresh()
        elif self.current == 'postview' or self.search == True:
            servicelist = self.session.instantiateDialog(ChannelSelection)
            self.session.execDialog(servicelist)
        return

    def nextWeek(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('date', self.link) is not None:
                self.link = self.link + 'FIN'
                date1 = re.findall('date=(.*?)-..-..FIN', self.link)
                date2 = re.findall('date=....-(.*?)-..FIN', self.link)
                date3 = re.findall('date=....-..-(.*?)FIN', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

                one_week = datetime.timedelta(days=7)
                tomorrow = today + one_week
                weekday = tomorrow.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                nextweek = sub('date=(.*?FIN)', 'date=', self.link)
                nextweek = nextweek + str(tomorrow)
                self.date = tomorrow
                one_week = datetime.timedelta(days=7)
                self.nextdate = self.date + one_week
            else:
                today = datetime.date.today()
                one_week = datetime.timedelta(days=7)
                tomorrow = today + one_week
                weekday = tomorrow.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                nextweek = self.link + '?date=' + str(tomorrow)
                self.date = tomorrow
                one_week = datetime.timedelta(days=7)
                self.nextdate = self.date + one_week
            self.link = nextweek
            self.oldindex = 0
            self.refresh()
        elif self.current == 'postview':
            self.translator()
        return

    def prevWeek(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('date', self.link) is not None:
                self.link = self.link + 'FIN'
                date1 = re.findall('date=(.*?)-..-..FIN', self.link)
                date2 = re.findall('date=....-(.*?)-..FIN', self.link)
                date3 = re.findall('date=....-..-(.*?)FIN', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

                one_week = datetime.timedelta(days=7)
                yesterday = today - one_week
                weekday = yesterday.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                prevweek = sub('date=(.*?FIN)', 'date=', self.link)
                prevweek = prevweek + str(yesterday)
                self.date = yesterday
                one_week = datetime.timedelta(days=7)
                self.nextdate = self.date + one_week
            else:
                today = datetime.date.today()
                one_week = datetime.timedelta(days=7)
                yesterday = today - one_week
                weekday = yesterday.weekday()
                if weekday == 0:
                    self.weekday = 'Montag'
                elif weekday == 1:
                    self.weekday = 'Dienstag'
                elif weekday == 2:
                    self.weekday = 'Mittwoch'
                elif weekday == 3:
                    self.weekday = 'Donnerstag'
                elif weekday == 4:
                    self.weekday = 'Freitag'
                elif weekday == 5:
                    self.weekday = 'Samstag'
                elif weekday == 6:
                    self.weekday = 'Sonntag'
                prevweek = self.link + '?date=' + str(yesterday)
                self.date = yesterday
                one_week = datetime.timedelta(days=7)
                self.nextdate = self.date + one_week
            self.link = prevweek
            self.oldindex = 0
            self.refresh()
        return

    def gotoEnd(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            end = self.len - 1
            self['menu'].moveToIndex(end)
            if end > 5:
                self.leftUp()
                self.rightDown()
        elif self.current != 'postview' and self.ready == True and self.search == True:
            end = len(self.searchentries) - 1
            self['searchmenu'].moveToIndex(end)

    def findPicon(self, sref):
        sref = sref + 'FIN'
        sref = sref.replace(':', '_')
        sref = sref.replace('_FIN', '')
        sref = sref.replace('FIN', '')
        pngname = self.piconfolder + sref + '.png'
        if fileExists(pngname):
            return pngname

    def getPic1(self, output):
        f = open(self.pic1, 'wb')
        f.write(output)
        f.close()
        self.showPic1(self.pic1)

    def showPic1(self, pic1):
        if self.xd == False:
            currPic = loadPic(pic1, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic1, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic1'].instance.setPixmap(currPic)
        return

    def getPic2(self, output):
        f = open(self.pic2, 'wb')
        f.write(output)
        f.close()
        self.showPic2(self.pic2)

    def showPic2(self, pic2):
        if self.xd == False:
            currPic = loadPic(pic2, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic2, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic2'].instance.setPixmap(currPic)
        return

    def getPic3(self, output):
        f = open(self.pic3, 'wb')
        f.write(output)
        f.close()
        self.showPic3(self.pic3)

    def showPic3(self, pic3):
        if self.xd == False:
            currPic = loadPic(pic3, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic3, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic3'].instance.setPixmap(currPic)
        return

    def getPic4(self, output):
        f = open(self.pic4, 'wb')
        f.write(output)
        f.close()
        self.showPic4(self.pic4)

    def showPic4(self, pic4):
        if self.xd == False:
            currPic = loadPic(pic4, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic4, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic4'].instance.setPixmap(currPic)
        return

    def getPic5(self, output):
        f = open(self.pic5, 'wb')
        f.write(output)
        f.close()
        self.showPic5(self.pic5)

    def showPic5(self, pic5):
        if self.xd == False:
            currPic = loadPic(pic5, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic5, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic5'].instance.setPixmap(currPic)
        return

    def getPic6(self, output):
        f = open(self.pic6, 'wb')
        f.write(output)
        f.close()
        self.showPic6(self.pic6)

    def showPic6(self, pic6):
        if self.xd == False:
            currPic = loadPic(pic6, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic6, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic6'].instance.setPixmap(currPic)
        return

    def getPicPost(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPicPost(self.picfile)

    def showPicPost(self, picpost):
        if self.xd == False:
            currPic = loadPic(picpost, 490, 245, 3, 0, 0, 0)
        else:
            currPic = loadPic(picpost, 400, 200, 3, 0, 0, 0)
        if currPic != None:
            self['picpost'].instance.setPixmap(currPic)
            self['piclabel'].show()
            self['piclabel2'].show()
            if self.trailer == True:
                self['cinlogo'].show()
                self['playlogo'].show()
        return

    def showPicTVinfo1(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo1'].instance.setPixmap(currPic)
        return

    def showPicTVinfo2(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo2'].instance.setPixmap(currPic)
        return

    def showPicTVinfo3(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo3'].instance.setPixmap(currPic)
        return

    def showPicTVinfo4(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo4'].instance.setPixmap(currPic)
        return

    def showPicTVinfo5(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo5'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def downloadPostPage(self, link, name):
        downloadPage(link, self.localhtml2).addCallback(name).addErrback(self.downloadError)

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadPageError)

    def downloadPageError(self, output):
        self['label'].setText('Bouquet = +- Tag, <> = +- Woche')
        self['label'].stopBlinking()
        self['label'].show()
        self.ready = True

    def refresh(self):
        self.postviewready = False
        self.ready = False
        self.current = 'menu'
        self['label'].setText('Bitte warten...')
        self['label'].startBlinking()
        self.makeTVTimer.callback.append(self.downloadFullPage(self.link, self.makeTVTipps))

    def showProgrammPage(self):
        self['label'].setText('Bouquet = +- Tag, <> = +- Woche')
        self['label2'].setText('= Timer')
        self['label3'].setText('= Suche')
        self['label4'].setText('= Zappen')
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        self.current = 'menu'
        self['menu'].show()
        try:
            c = self['menu'].getSelectedIndex()
            d = self.len - c
            x = self.len % 6
            if d > 6:
                x = 0
            elif d > x:
                x = 0
        except IndexError:
            x = 0

        if x == 0:
            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
            self['pic4'].show()
            self['pic5'].show()
            self['pic6'].show()
        elif x == 1:
            self['pic1'].show()
        elif x == 2:
            self['pic1'].show()
            self['pic2'].show()
        elif x == 3:
            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
        elif x == 4:
            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
            self['pic4'].show()
        elif x == 5:
            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
            self['pic4'].show()
            self['pic5'].show()

    def down(self):
        if self.current == 'menu':
            try:
                c = self['menu'].getSelectedIndex()
            except IndexError:
                return

            self['menu'].down()
            if c + 1 == self.len:
                try:
                    picurl1 = self.picurllist[0]
                    self.download(picurl1, self.getPic1)
                    self['pic1'].show()
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[1]
                    self.download(picurl2, self.getPic2)
                    self['pic2'].show()
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[2]
                    self.download(picurl3, self.getPic3)
                    self['pic3'].show()
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[3]
                    self.download(picurl4, self.getPic4)
                    self['pic4'].show()
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[4]
                    self.download(picurl5, self.getPic5)
                    self['pic5'].show()
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[5]
                    self.download(picurl6, self.getPic6)
                    self['pic6'].show()
                except IndexError:
                    self['pic6'].hide()

            elif c % 6 == 5:
                try:
                    picurl1 = self.picurllist[c + 1]
                    self.download(picurl1, self.getPic1)
                    self['pic1'].show()
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 2]
                    self.download(picurl2, self.getPic2)
                    self['pic2'].show()
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 3]
                    self.download(picurl3, self.getPic3)
                    self['pic3'].show()
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 4]
                    self.download(picurl4, self.getPic4)
                    self['pic4'].show()
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 5]
                    self.download(picurl5, self.getPic5)
                    self['pic5'].show()
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 6]
                    self.download(picurl6, self.getPic6)
                    self['pic6'].show()
                except IndexError:
                    self['pic6'].hide()

        elif self.current == 'searchmenu':
            self['searchmenu'].down()
        else:
            self['textpage'].pageDown()

    def up(self):
        if self.current == 'menu':
            try:
                c = self['menu'].getSelectedIndex()
            except IndexError:
                return

            self['menu'].up()
            if c == 0:
                l = self.len
                d = l % 6
                if d == 0:
                    d = 6
                try:
                    picurl1 = self.picurllist[l - d]
                    self.download(picurl1, self.getPic1)
                    self['pic1'].show()
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[l - d + 1]
                    self.download(picurl2, self.getPic2)
                    self['pic2'].show()
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[l - d + 2]
                    self.download(picurl3, self.getPic3)
                    self['pic3'].show()
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[l - d + 3]
                    self.download(picurl4, self.getPic4)
                    self['pic4'].show()
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[l - d + 4]
                    self.download(picurl5, self.getPic5)
                    self['pic5'].show()
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[l - d + 5]
                    self.download(picurl6, self.getPic6)
                    self['pic6'].show()
                except IndexError:
                    self['pic6'].hide()

            elif c % 6 == 0:
                try:
                    picurl1 = self.picurllist[c - 6]
                    self.download(picurl1, self.getPic1)
                    self['pic1'].show()
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c - 5]
                    self.download(picurl2, self.getPic2)
                    self['pic2'].show()
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c - 4]
                    self.download(picurl3, self.getPic3)
                    self['pic3'].show()
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c - 3]
                    self.download(picurl4, self.getPic4)
                    self['pic4'].show()
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c - 2]
                    self.download(picurl5, self.getPic5)
                    self['pic5'].show()
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c - 1]
                    self.download(picurl6, self.getPic6)
                    self['pic6'].show()
                except IndexError:
                    self['pic6'].hide()

        elif self.current == 'searchmenu':
            self['searchmenu'].up()
        else:
            self['textpage'].pageUp()

    def rightDown(self):
        if self.current == 'menu':
            try:
                c = self['menu'].getSelectedIndex()
            except IndexError:
                return

            self['menu'].pageDown()
            l = self.len
            d = c % 6
            e = l % 6
            if e == 0:
                e = 6
            if c + e >= l:
                pass
            elif d == 0:
                try:
                    picurl1 = self.picurllist[c + 6]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 7]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 8]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 9]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 10]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 11]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 1:
                try:
                    picurl1 = self.picurllist[c + 5]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 6]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 7]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 8]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 9]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 10]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 2:
                try:
                    picurl1 = self.picurllist[c + 4]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 5]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 6]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 7]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 8]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 9]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 3:
                try:
                    picurl1 = self.picurllist[c + 3]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 4]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 5]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 6]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 7]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 8]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 4:
                try:
                    picurl1 = self.picurllist[c + 2]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 3]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 4]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 5]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 6]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 7]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

            elif d == 5:
                try:
                    picurl1 = self.picurllist[c + 1]
                    self.download(picurl1, self.getPic1)
                except IndexError:
                    self['pic1'].hide()

                try:
                    picurl2 = self.picurllist[c + 2]
                    self.download(picurl2, self.getPic2)
                except IndexError:
                    self['pic2'].hide()

                try:
                    picurl3 = self.picurllist[c + 3]
                    self.download(picurl3, self.getPic3)
                except IndexError:
                    self['pic3'].hide()

                try:
                    picurl4 = self.picurllist[c + 4]
                    self.download(picurl4, self.getPic4)
                except IndexError:
                    self['pic4'].hide()

                try:
                    picurl5 = self.picurllist[c + 5]
                    self.download(picurl5, self.getPic5)
                except IndexError:
                    self['pic5'].hide()

                try:
                    picurl6 = self.picurllist[c + 6]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    self['pic6'].hide()

        elif self.current == 'searchmenu':
            self['searchmenu'].pageDown()
        else:
            self['textpage'].pageDown()

    def leftUp(self):
        if self.current == 'menu':
            try:
                c = self['menu'].getSelectedIndex()
            except IndexError:
                return

            self['menu'].pageUp()
            d = c % 6
            if c < 6:
                pass
            elif d == 0:
                try:
                    picurl1 = self.picurllist[c - 6]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 5]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 4]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 3]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 2]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 1]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 1:
                try:
                    picurl1 = self.picurllist[c - 7]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 6]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 5]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 4]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 3]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 2]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 2:
                try:
                    picurl1 = self.picurllist[c - 8]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 7]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 6]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 5]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 4]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 3]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 3:
                try:
                    picurl1 = self.picurllist[c - 9]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 8]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 7]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 6]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 5]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 4]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 4:
                try:
                    picurl1 = self.picurllist[c - 10]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 9]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 8]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 7]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 6]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 5]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            elif d == 5:
                try:
                    picurl1 = self.picurllist[c - 11]
                    self.download(picurl1, self.getPic1)
                    picurl2 = self.picurllist[c - 10]
                    self.download(picurl2, self.getPic2)
                    picurl3 = self.picurllist[c - 9]
                    self.download(picurl3, self.getPic3)
                    picurl4 = self.picurllist[c - 8]
                    self.download(picurl4, self.getPic4)
                    picurl5 = self.picurllist[c - 7]
                    self.download(picurl5, self.getPic5)
                    picurl6 = self.picurllist[c - 6]
                    self.download(picurl6, self.getPic6)
                except IndexError:
                    pass

            self['pic1'].show()
            self['pic2'].show()
            self['pic3'].show()
            self['pic4'].show()
            self['pic5'].show()
            self['pic6'].show()
        elif self.current == 'searchmenu':
            self['searchmenu'].pageUp()
        else:
            self['textpage'].pageUp()

    def zapUp(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapUp(InfoBar.instance)

    def zapDown(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapDown(InfoBar.instance)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def picReturn(self):
        pass

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if self.current == 'menu':
            self.close()
        elif self.current == 'searchmenu':
            self.search = False
            self.oldsearchindex = 1
            self['searchmenu'].hide()
            self['searchlogo'].hide()
            self['searchtimer'].hide()
            self['searchtext'].hide()
            self.showProgrammPage()
            self.setTitle('')
            self.setTitle(self.titel)
        elif self.current == 'postview' and self.search == False:
            self.postviewready = False
            self.setTitle('')
            self.setTitle(self.titel)
            self.showProgrammPage()
        elif self.current == 'postview' and self.search == True:
            self.postviewready = False
            self.showsearch()
            self.current = 'searchmenu'


class TVGenreView(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="TV Genre - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,60" size="{size}" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="searchtimer" position="306,0" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,60" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,60" size="727,60" font="{font};24" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,120" size="992,360" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="306,60" size="400,200" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="391,216" size="90,22" font="{font};20" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="391,238" size="90,22" font="{font};16" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,60" size="252,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="685,60" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="685,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="685,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="685,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="65,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="120,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="65,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="267,60" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="463,138" size="85,45" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/play.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,270" size="992,235" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="987,270" size="20,235" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_235.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="125,5" size="762,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="376,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="486,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="596,27" size="100,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="352,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="462,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="572,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title=" ">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,75" size="{size}" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="searchtimer" position="420,5" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,75" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,75" size="955,65" font="{font};26" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,140" size="1220,480" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="375,70" size="490,245" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="476,265" size="100,25" font="{font};22" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="476,290" size="100,25" font="{font};18" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,70" size="310,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="855,70" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="855,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="855,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="855,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="80,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="150,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="80,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="325,70" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="565,163" size="109,58" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/playHD.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,325" size="1220,315" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="1214,325" size="22,315" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_315.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="170,10" size="900,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="469,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="594,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="719,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="445,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="570,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="695,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'

    def __init__(self, session, link, genre):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.picon.value == 'yes':
                size = '1220,558'
                self.picon = True
                self.piconfolder = config.plugins.tvspielfilm.piconfolder.value
            else:
                size = '1220,560'
                self.picon = False
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '24'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '22'
            else:
                self.fontlarge = False
                fontsize = '20'
            self.dict = {'position': position,
             'font': font,
             'size': size,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVGenreView.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.picon.value == 'yes':
                size = '992,434'
                self.picon = True
                self.piconfolder = config.plugins.tvspielfilm.piconfolder.value
            else:
                size = '992,450'
                self.picon = False
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '20'
            else:
                self.fontlarge = False
                fontsize = '18'
            self.dict = {'position': position,
             'font': font,
             'size': size,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVGenreView.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.localhtml2 = '/tmp/tvspielfilm2.html'
        self.current = 'menu'
        self.oldcurrent = 'menu'
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.sref = []
        self.searchlink = []
        self.searchref = []
        self.searchentries = []
        self.start = ''
        self.end = ''
        self.day = ''
        self.name = ''
        self.shortdesc = ''
        self.postlink = link
        self.link = link
        self.trailerurl = ''
        self.POSTtext = ''
        self.EPGtext = ''
        self.genre = genre
        if search('Serie', genre) is not None:
            self.serie = True
        else:
            self.serie = False
        self.titel = ''
        self.hideflag = True
        self.search = False
        self.rec = False
        self.load = True
        self.ready = False
        self.postviewready = False
        self.mehrbilder = False
        self.trailer = False
        self.movie = False
        self.datum = False
        self.filter = True
        self.maxgenrecount = config.plugins.tvspielfilm.maxgenre.value
        self.genrecount = 0
        self.oldindex = 0
        self.oldsearchindex = 1
        self['picpost'] = Pixmap()
        self['tvinfo1'] = Pixmap()
        self['tvinfo2'] = Pixmap()
        self['tvinfo3'] = Pixmap()
        self['tvinfo4'] = Pixmap()
        self['tvinfo5'] = Pixmap()
        self['cinlogo'] = Pixmap()
        self['cinlogo'].hide()
        self['playlogo'] = Pixmap()
        self['playlogo'].hide()
        self['searchlogo'] = Pixmap()
        self['searchlogo'].hide()
        self['searchtimer'] = Pixmap()
        self['searchtimer'].hide()
        self['searchtext'] = Label('')
        self['searchtext'].hide()
        self['textpage'] = ScrollLabel('')
        self['infotext'] = Label('')
        self['infotext'].hide()
        self['infotext2'] = Label('')
        self['infotext2'].hide()
        self['infotext3'] = Label('')
        self['infotext3'].hide()
        self['infotext4'] = Label('')
        self['infotext4'].hide()
        self['infotext5'] = Label('')
        self['infotext5'].hide()
        self['infotext6'] = Label('')
        self['infotext6'].hide()
        self['infotext7'] = Label('')
        self['infotext7'].hide()
        self['infotext8'] = Label('')
        self['infotext8'].hide()
        self['piclabel'] = Label('')
        self['piclabel'].hide()
        self['piclabel2'] = Label('')
        self['piclabel2'].hide()
        self['slider_textpage'] = Pixmap()
        self['slider_textpage'].hide()
        self['searchmenu'] = ItemList([])
        self['searchmenu'].hide()
        self['menu'] = ItemList([])
        self['label'] = BlinkingLabel('Bitte warten...')
        self['label'].startBlinking()
        self['label2'] = Label('= Timer')
        self['label3'] = Label('= Filter')
        self['label4'] = Label('= Zappen')
        self['actions'] = ActionMap(['OkCancelActions',
         'DirectionActions',
         'HelpActions',
         'EPGSelectActions',
         'NumberActions',
         'InfobarTeletextActions',
         'ChannelSelectBaseActions',
         'MoviePlayerActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'nextBouquet': self.zap,
         'prevBouquet': self.zap,
         'nextMarker': self.translator,
         'prevMarker': self.wiki,
         '0': self.gotoEnd,
         '1': self.zapUp,
         '2': self.zapDown,
         '7': self.IMDb,
         '8': self.TMDb,
         '9': self.TVDb,
         'info': self.getEPG,
         'epg': self.getEPG,
         'leavePlayer': self.youTube,
         'startTeletext': self.pressText,
         'displayHelp': self.infoScreen}, -1)
        self['ColorActions'] = ActionMap(['ColorActions'], {'green': self.green,
         'yellow': self.yellow,
         'red': self.makeTimer,
         'blue': self.hideScreen}, -1)
        self.servicefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/service.references'
        self.service_db = serviceDB(self.servicefile)
        f = open(self.servicefile, 'r')
        lines = f.readlines()
        f.close()
        self.timer = open('/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db').read()
        self.date = datetime.date.today()
        one_day = datetime.timedelta(days=1)
        self.nextdate = self.date + one_day
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        if config.plugins.tvspielfilm.genreinfo.value == 'no':
            self.showgenre = False
        else:
            self.showgenre = True
        self.makeTVTimer = eTimer()
        self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
        self.makeTVTimer.start(500, True)
        return

    def makeTVView(self, output):
        self.titel = '%s - Sendungen der n\xc3\xa4chsten 14 Tage' % self.genre
        self.setTitle(self.titel)
        startpos = find(output, '<table class="primetime-table">')
        endpos = find(output, '</table>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('<span>TV-Sendungen am', '<td>DATUMTV-Sendungen am', bereich)
        bereich = sub('class="search-starttimes">\n\\s+<span>', '<td>TIME', bereich)
        bereich = sub('<h3><a href="', '<td>LINK', bereich)
        if self.showgenre == False:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title=".*?">', '</td><td>TITEL', bereich)
            bereich = sub('</a></h3>', '</td>', bereich)
        else:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title="', '</td><td>TITEL', bereich)
            bereich = sub('">.*?</a></h3>', '</td>', bereich)
        bereich = sub('<span class="logotype chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('<p>', '<td>GENRE', bereich)
        bereich = sub('<li class="', '<td>INFO', bereich)
        bereich = sub('<span\n\\s+class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span class="editorial-', '<td>RATING', bereich)
        bereich = sub('"></span>', '', bereich)
        bereich = sub('</span>\n', '</td>', bereich)
        bereich = sub('</span>', '', bereich)
        bereich = sub('\n\\s+</div>\n', '</td>', bereich)
        bereich = sub('\n.*?</p>', '</td>', bereich)
        bereich = sub('"></li>', '</td>', bereich)
        bereich = sub('\n.*?<br/><em class=".*?</em>', '', bereich)
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 10
        for x in a:
            if y == 0:
                res = [x]
                if self.backcolor == True:
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 62), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(992, 62), font=0, backcolor_sel=self.back_color, text=''))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                if search('DATUM', x) is not None:
                    if self.datum == True:
                        try:
                            del self.sref[-1]
                            del self.tvlink[-1]
                            del self.tvtitel[-1]
                            del self.tventries[-1]
                            self.datum = True
                        except IndexError:
                            pass

                    else:
                        self.datum = True
                    x = sub('DATUM', '', x)
                    self.datum_string = x
                    res_datum = [x]
                    if self.backcolor == True:
                        if self.picon == True:
                            if self.xd == False:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 62), font=-1, backcolor_sel=self.back_color, text=''))
                            else:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 62), font=0, backcolor_sel=self.back_color, text=''))
                        elif self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                    if self.picon == True:
                        if self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 62), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 62), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    elif self.xd == False:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    else:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    self.sref.append('na')
                    self.tvlink.append('na')
                    self.tvtitel.append('na')
                    self.tventries.append(res_datum)
                    self.filter = True
                    y = 9
                else:
                    y = 1
            if y == 1:
                x = sub('TIME', '', x)
                start = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(100, 18), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(100, 19), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(60, 7), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(45, 3), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
            if y == 2:
                if search('LOGO', x) is not None:
                    logo = search('LOGO(.*?)">', x)
                    if logo is not None:
                        x = logo.group(1)
                    service = x
                    sref = self.service_db.lookup(service)
                    if sref == 'nope':
                        self.filter = True
                    else:
                        self.filter = False
                        self.sref.append(sref)
                        if self.picon == True:
                            picon = self.findPicon(sref)
                            if picon is not None:
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 1), size=(100, 60), png=LoadPixmap(picon)))
                            else:
                                res.append(MultiContentEntryText(pos=(0, 1), size=(100, 60), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER | RT_WRAP, text='Picon not found'))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(59, 36), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(44, 27), png=loadPNG(png)))
                        start = sub(' - ..:..', '', start)
                        daynow = sub('....-..-', '', str(self.date))
                        day = search(', ([0-9]+). ', self.datum_string)
                        if day is not None:
                            day = day.group(1)
                        else:
                            day = daynow
                        if int(day) >= int(daynow) - 1:
                            date = str(self.date) + 'FIN'
                        else:
                            four_weeks = datetime.timedelta(weeks=4)
                            date = str(self.date + four_weeks) + 'FIN'
                        date = sub('[0-9][0-9]FIN', day, date)
                        timer = date + ':::' + start + ':::' + str(sref)
                        if timer in self.timer:
                            self.rec = True
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 21), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 24), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
            if y == 3:
                if self.filter == False:
                    x = sub('LINK', '', x)
                    self.tvlink.append(x)
            if y == 4:
                if self.filter == False:
                    x = sub('TITEL', '', x)
                    self.tvtitel.append(x)
                    titelfilter = x
            if y == 5:
                if self.filter == False:
                    if search('GENRE', x) is None:
                        if self.picon == True:
                            if self.xd == False:
                                res.append(MultiContentEntryText(pos=(275, 18), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                            else:
                                res.append(MultiContentEntryText(pos=(255, 19), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        elif self.xd == False:
                            res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        y = 6
            if y == 6:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        if self.rec == True:
                            self.rec = False
                        else:
                            x = sub('INFO', '', x)
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 21), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 24), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 7:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 21), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 24), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 8:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 21), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 24), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 9:
                if search('INFO', x) is not None:
                    y = 7
                elif self.filter == False:
                    self.datum = False
                    if search('RATING', x) is not None:
                        x = sub('RATING', '', x)
                        if x != 'rating small':
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 11), size=(40, 40), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 17), size=(29, 29), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 0), size=(40, 40), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 1), size=(29, 29), png=loadPNG(png)))
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(275, 18), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(255, 19), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    else:
                        res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    self.tventries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.picon == True:
            self['menu'].l.setItemHeight(62)
        elif self.xd == False:
            self['menu'].l.setItemHeight(40)
        else:
            self['menu'].l.setItemHeight(30)
        self['menu'].l.setList(self.tventries)
        end = len(self.tventries) - 1
        self['menu'].moveToIndex(end)
        self['menu'].show()
        self.genrecount += 1
        if self.genrecount <= self.maxgenrecount and search('class="pagination__link pagination__link--next" >', bereich) is not None and self.load == True:
            nextpage = search('<a href="(.*?)"\\n\\s+class="pagination__link pagination__link--next" >', bereich)
            if nextpage is not None:
                self.downloadFull(nextpage.group(1), self.makeTVView)
            else:
                self.load = False
                self.ready = True
        else:
            self['label'].setText('OK = Sendung, Stop = YouTube Trailer')
            self['label'].stopBlinking()
            self['label'].show()
            try:
                if self.sref[-1] == 'na':
                    del self.sref[-1]
                    del self.tvlink[-1]
                    del self.tvtitel[-1]
                    del self.tventries[-1]
                    self['menu'].l.setList(self.tventries)
            except IndexError:
                pass

            self['menu'].moveToIndex(self.oldindex)
            self.load = False
            self.ready = True
        return

    def makePostviewPage(self, string):
        output = open(self.localhtml2, 'r').read()
        self['label2'].setText('= Timer')
        self['label3'].setText('= YouTube')
        self['label4'].setText('= Wikipedia')
        self['menu'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        output = sub('</dl>.\n\\s+</div>.\n\\s+</section>', '</cast>', output)
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('</cast>')
            if endpos == -1:
                endpos = output.find('<h2 class="broadcast-info">')
                if endpos == -1:
                    endpos = output.find('<div class="OUTBRAIN"')
                    if endpos == -1:
                        endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('\r', '', bereich)
        bereich = re.sub('<ul class="slidelist">.*?</ul>', '', bereich, flags=re.S)
        bereich = re.sub('<script.*?</script>', '', bereich, flags=re.S)
        bereich = re.sub('<style.*?</style>', '', bereich, flags=re.S)
        bereich = re.sub('<div class="text" id=".*?</div>', '', bereich, flags=re.S)
        if search('rl: .https://video.tvspielfilm.de/.*?mp4', output) is not None:
            trailerurl = search('rl: .https://video.tvspielfilm.de/(.*?).mp4', output)
            self.trailerurl = 'https://video.tvspielfilm.de/' + trailerurl.group(1) + '.mp4'
            self.trailer = True
        else:
            self.trailer = False
        bereich = sub('" alt=".*?" width="', '" width="', bereich)
        picurl = search('<img src="(.*?)" width="', bereich)
        if picurl is not None:
            self.download(picurl.group(1), self.getPicPost)
            self['picpost'].show()
        else:
            picurl = search('<meta property="og:image" content="(.*?)"', output)
            if picurl is not None:
                self.download(picurl.group(1), self.getPicPost)
                self['picpost'].show()
            else:
                picurl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/TV-Spielfilm-Logo.svg/500px-TV-Spielfilm-Logo.svg.png'
                self.download(picurl, self.getPicPost)
                self['picpost'].show()
        if self.search == False:
            title = search('<title>(.*?)</title>', output)
            self.title = transHTML(title.group(1))
            self.setTitle(self.title)
        if search('<ul class="rating-dots">', bereich) is not None:
            self.movie = True
        else:
            self.movie = False
        if search('<div class="film-gallery">', output) is not None:
            self.mehrbilder = True
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        else:
            self.mehrbilder = False
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        try:
            parts = infotext[0].split(', ')
            self['infotext'].setText(parts[0])
            self['infotext'].show()
        except IndexError:
            self['infotext'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext2'].setText(parts[1])
            self['infotext2'].show()
        except IndexError:
            self['infotext2'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext3'].setText(parts[2])
            self['infotext3'].show()
        except IndexError:
            self['infotext3'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext4'].setText(parts[0])
            self['infotext4'].show()
        except IndexError:
            self['infotext4'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext5'].setText(parts[1])
            self['infotext5'].show()
        except IndexError:
            self['infotext5'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext6'].setText(parts[2])
            self['infotext6'].show()
        except IndexError:
            self['infotext6'].setText('')

        try:
            parts = infotext[2].split(', ')
            self['infotext7'].setText(parts[0] + ', ' + parts[1])
            self['infotext7'].show()
        except IndexError:
            self['infotext7'].setText('')

        try:
            self['infotext8'].setText(infotext[3])
            self['infotext8'].show()
        except IndexError:
            self['infotext8'].setText('')

        tvinfo = re.findall('<span class="add-info (.*?)">', bereich)
        try:
            if self.xd == False:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + 'HD.png'
            else:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + '.png'
            self.showPicTVinfo1(tvinfo1)
            self['tvinfo1'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + 'HD.png'
            else:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + '.png'
            self.showPicTVinfo2(tvinfo2)
            self['tvinfo2'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + 'HD.png'
            else:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + '.png'
            self.showPicTVinfo3(tvinfo3)
            self['tvinfo3'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + 'HD.png'
            else:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + '.png'
            self.showPicTVinfo4(tvinfo4)
            self['tvinfo4'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + 'HD.png'
            else:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + '.png'
            self.showPicTVinfo5(tvinfo5)
            self['tvinfo5'].show()
        except IndexError:
            pass

        self['piclabel'].setText(self.start[0:5])
        try:
            parts = infotext[0].split(', ')
            text = shortenChannel(parts[2])
            self['piclabel2'].setText(text[0:10])
        except IndexError:
            self['piclabel2'].setText('')

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        bereich = sub('<blockquote class="broadcast-detail__quote">\n\\s+<p>', '<p>>> ', bereich)
        bereich = sub('</p>\n[ ]+</blockquote>', ' <<</p>', bereich)
        bereich = sub('<section class="serial-info">\n\\s+', '<p>', bereich)
        bereich = sub('</section>', '</p>', bereich)
        bereich = sub('</span>\\s+', '</span>, ', bereich)
        bereich = sub('<li class="titleName">', '</p><p> \xc2\xb7 ', bereich)
        bereich = sub('<li class="subtitleName">', '#sub#', bereich)
        bereich = sub('ShowView [0-9-]+', '', bereich)
        bereich = sub('<a href=".*?">', '', bereich)
        bereich = sub('<h1.*?>', '<p>', bereich)
        bereich = sub('</h1>', '</p>', bereich)
        bereich = sub('<h3.*?>', '<p>', bereich)
        bereich = sub('</h3>', '</p>', bereich)
        bereich = sub('<br/>', '</p><p>', bereich)
        bereich = sub('<p>\n', '<p>', bereich)
        bereich = sub('<dt>', '<p>', bereich)
        bereich = sub('<dt class="role">', '<p>', bereich)
        bereich = sub('</dt>\n\\s+<dd>\n\\s+', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd>', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd class="name">', ': ', bereich)
        bereich = sub('\n[ ]+,', ',', bereich)
        bereich = sub(', [ ]+', ', ', bereich)
        bereich = sub('</a>', '</p>', bereich)
        bereich = sub('\n\\s+</dd>', '</p>', bereich)
        bereich = sub('</a></dd>', '</p>', bereich)
        bereich = sub('</dd>', '</p>', bereich)
        bereich = sub('</dt>', '</p>', bereich)
        text = ''
        a = findall('<p.*?>(.*?)</p>', bereich)
        for x in a:
            if x != '':
                text = text + x + '\n\n'

        text = sub('<[^>]*>', '', text)
        text = sub('</p<<p<', '\n\n', text)
        text = sub('\n\\s+\n*', '\n\n', text)
        text = sub('#sub#', '\n  ', text)
        if self.fontlarge == True:
            if self.xd == False:
                fill = '____________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
            else:
                fill = '________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        elif self.xd == False:
            fill = '____________________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        else:
            fill = '_________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        self.POSTtext = text + fill
        self['textpage'].setText(self.POSTtext)
        self['textpage'].show()
        self['slider_textpage'].show()
        self.showEPG = False
        self.postviewready = True
        return

    def makePostTimer(self, output):
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('<h2 class="broadcast-info">')
            if endpos == -1:
                endpos = output.find('<div class="OUTBRAIN"')
                if endpos == -1:
                    endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        self.current = 'postview'
        self.postviewready = True
        self.red()
        return

    def makeSearchView(self, url):
        header = {'User-Agent': 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100627 Firefox/3.6.6',
         'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
         'Accept-Language': 'en-us,en;q=0.5'}
        searchrequest = Request(url, None, header)
        try:
            output = urlopen(searchrequest).read()
        except (HTTPError,
         URLError,
         HTTPException,
         socket.error,
         AttributeError):
            output = ' '

        title = 'Genre: ' + self.genre.replace(':', ' -') + ', Filter: ' + self.searchstring
        self.setTitle(title)
        startpos = find(output, '<table class="primetime-table">')
        endpos = find(output, '</table>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('<span>TV-Sendungen am', '<td>DATUMTV-Sendungen am', bereich)
        bereich = sub('class="search-starttimes">\n\\s+<span>', '<td>TIME', bereich)
        bereich = sub('<h3><a href="', '<td>LINK', bereich)
        if self.showgenre == False:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title=".*?">', '</td><td>TITEL', bereich)
            bereich = sub('</a></h3>', '</td>', bereich)
        else:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title="', '</td><td>TITEL', bereich)
            bereich = sub('">.*?</a></h3>', '</td>', bereich)
        bereich = sub('<span class="logotype chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('<p>', '<td>GENRE', bereich)
        bereich = sub('<li class="', '<td>INFO', bereich)
        bereich = sub('<span\n\\s+class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span class="editorial-', '<td>RATING', bereich)
        bereich = sub('"></span>', '', bereich)
        bereich = sub('</span>\n', '</td>', bereich)
        bereich = sub('</span>', '', bereich)
        bereich = sub('\n\\s+</div>\n', '</td>', bereich)
        bereich = sub('\n.*?</p>', '</td>', bereich)
        bereich = sub('"></li>', '</td>', bereich)
        bereich = sub('\n.*?<br/><em class=".*?</em>', '', bereich)
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 10
        for x in a:
            if y == 0:
                res = [x]
                if self.backcolor == True:
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                if search('DATUM', x) is not None:
                    if self.datum == True:
                        try:
                            del self.searchref[-1]
                            del self.searchlink[-1]
                            del self.searchentries[-1]
                        except IndexError:
                            pass

                    else:
                        self.datum = True
                    x = sub('DATUM', '', x)
                    self.datum_string = x
                    res_datum = [x]
                    if self.backcolor == True:
                        if self.picon == True:
                            if self.xd == False:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                            else:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                        elif self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                    if self.picon == True:
                        if self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    elif self.xd == False:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    else:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    self.searchref.append('na')
                    self.searchlink.append('na')
                    self.searchentries.append(res_datum)
                    self.filter = True
                    y = 9
                else:
                    y = 1
            if y == 1:
                x = sub('TIME', '', x)
                start = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(100, 17), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(100, 18), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(60, 7), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(45, 3), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
            if y == 2:
                if search('LOGO', x) is not None:
                    logo = search('LOGO(.*?)">', x)
                    if logo is not None:
                        x = logo.group(1)
                    service = x
                    sref = self.service_db.lookup(service)
                    if sref == 'nope':
                        self.filter = True
                    else:
                        self.filter = False
                        self.searchref.append(sref)
                        if self.picon == True:
                            picon = self.findPicon(sref)
                            if picon is not None:
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 0), size=(100, 60), png=LoadPixmap(picon)))
                            else:
                                res.append(MultiContentEntryText(pos=(0, 0), size=(100, 60), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER | RT_WRAP, text='Picon not found'))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(59, 36), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(44, 27), png=loadPNG(png)))
                        start = sub(' - ..:..', '', start)
                        daynow = sub('....-..-', '', str(self.date))
                        day = search(', ([0-9]+). ', self.datum_string)
                        if day is not None:
                            day = day.group(1)
                        else:
                            day = daynow
                        if int(day) >= int(daynow) - 1:
                            date = str(self.date) + 'FIN'
                        else:
                            four_weeks = datetime.timedelta(weeks=4)
                            date = str(self.date + four_weeks) + 'FIN'
                        date = sub('[0-9][0-9]FIN', day, date)
                        timer = date + ':::' + start + ':::' + str(sref)
                        if timer in self.timer:
                            self.rec = True
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
            if y == 3:
                if self.filter == False:
                    x = sub('LINK', '', x)
                    self.searchlink.append(x)
            if y == 4:
                if self.filter == False:
                    x = sub('TITEL', '', x)
                    titelfilter = x
            if y == 5:
                if self.filter == False:
                    if search('GENRE', x) is None:
                        if self.picon == True:
                            if self.xd == False:
                                res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                            else:
                                res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        elif self.xd == False:
                            res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        y = 6
            if y == 6:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        if self.rec == True:
                            self.rec = False
                        else:
                            x = sub('INFO', '', x)
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 7:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 8:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 9:
                if search('INFO', x) is not None:
                    y = 7
                elif self.filter == False:
                    self.datum = False
                    if search('RATING', x) is not None:
                        x = sub('RATING', '', x)
                        if x != 'rating small':
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 10), size=(40, 40), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 16), size=(29, 29), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 0), size=(40, 40), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 1), size=(29, 29), png=loadPNG(png)))
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    else:
                        res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    self.searchentries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.picon == True:
            self['searchmenu'].l.setItemHeight(60)
        elif self.xd == False:
            self['searchmenu'].l.setItemHeight(40)
        else:
            self['searchmenu'].l.setItemHeight(30)
        self['searchmenu'].l.setList(self.searchentries)
        self['searchmenu'].show()
        self.searchcount += 1
        if self.searchcount <= self.maxsearchcount and search('class="pagination__link pagination__link--next" >', bereich) is not None:
            nextpage = search('<a href="(.*?)"\\n\\s+class="pagination__link pagination__link--next" >', bereich)
            if nextpage is not None:
                self.makeSearchView(nextpage.group(1))
            else:
                self.ready = True
        else:
            try:
                if self.searchref[-1] == 'na':
                    del self.searchref[-1]
                    del self.searchlink[-1]
                    del self.searchentries[-1]
                    self['searchmenu'].l.setList(self.searchentries)
            except IndexError:
                pass

            self['searchmenu'].moveToIndex(self.oldsearchindex)
            self.current = 'searchmenu'
            self.ready = True
        return

    def ok(self):
        if self.hideflag == False:
            return
        if self.current == 'menu' or self.current == 'searchmenu':
            self.selectPage('ok')
        elif self.current == 'postview' and self.postviewready == True:
            if self.trailer == True:
                sref = eServiceReference(4097, 0, self.trailerurl)
                sref.setName(self.name)
                self.session.open(MoviePlayer, sref)
            elif self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)

    def selectPage(self, action):
        if self.current == 'menu' and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                self.postlink = self.tvlink[c]
            except IndexError:
                pass

        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

        if action == 'ok' and self.ready == True:
            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.current = 'postview'
                self.downloadPostPage(self.postlink, self.makePostviewPage)
        return

    def stopLoad(self, answer):
        if answer is True:
            self.load = False
            self.ready = True

    def getEPG(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.showEPG == False:
                self.showEPG = True
                if self.search == False:
                    try:
                        c = self['menu'].getSelectedIndex()
                        sref = self.sref[c]
                        channel = ServiceReference(eServiceReference(sref)).getServiceName()
                    except IndexError:
                        sref = None
                        channel = ''

                else:
                    try:
                        c = self['searchmenu'].getSelectedIndex()
                        sref = self.searchref[c]
                        channel = ServiceReference(eServiceReference(sref)).getServiceName()
                    except IndexError:
                        sref = None
                        channel = ''

                if sref is not None:
                    try:
                        start = self.start
                        s1 = sub(':..', '', start)
                        date = str(self.postdate) + 'FIN'
                        date = sub('..FIN', '', date)
                        date = date + self.day
                        parts = start.split(':')
                        seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                        start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                        s2 = sub(':..:..', '', start)
                        if int(s2) > int(s1):
                            start = str(self.date) + ' ' + start
                        else:
                            start = date + ' ' + start
                        start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                        start = int(mktime(start.timetuple()))
                        epgcache = eEPGCache.getInstance()
                        event = epgcache.startTimeQuery(eServiceReference(sref), start)
                        if event == -1:
                            try:
                                self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                            except (KeyError, NameError):
                                self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                        else:
                            event = epgcache.getNextTimeEntry()
                            self.EPGtext = event.getEventName()
                            short = event.getShortDescription()
                            ext = event.getExtendedDescription()
                            dur = '%d Minuten' % (event.getDuration() / 60)
                            if short and short != self.EPGtext:
                                self.EPGtext += '\n\n' + short
                            if ext:
                                self.EPGtext += '\n\n' + ext
                            if dur:
                                self.EPGtext += '\n\n' + dur
                    except:
                        try:
                            self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                        except (KeyError, NameError):
                            self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                else:
                    self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'
                if self.fontlarge == True:
                    if self.xd == False:
                        fill = '____________________________________________________________________________________________________________________________________\n%s' % channel
                    else:
                        fill = '________________________________________________________________________________________________________________________\n%s' % channel
                elif self.xd == False:
                    fill = '____________________________________________________________________________________________________________________________________________________\n%s' % channel
                else:
                    fill = '_________________________________________________________________________________________________________________________________________\n%s' % channel
                self.EPGtext += '\n\n' + fill
                self['textpage'].setText(self.EPGtext)
                self['textpage'].show()
            else:
                self.showEPG = False
                self['textpage'].setText(self.POSTtext)
                self['textpage'].show()
        else:
            self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def makeTimer(self):
        if config.plugins.tvspielfilm.autotimer.value == 'yes' and fileExists('/usr/lib/enigma2/python/Plugins/Extensions/AutoTimer/plugin.pyo'):
            self.autotimer = True
            self.session.openWithCallback(self.choiceTimer, ChoiceBox, title='Timer Auswahl', list=[('Timer', 'timer'), ('AutoTimer', 'autotimer')])
        else:
            self.autotimer = False
            self.red()

    def choiceTimer(self, choice):
        choice = choice and choice[1]
        if choice == 'autotimer':
            self.autotimer = True
            self.red()
        else:
            self.autotimer = False
            self.red()

    def red(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.search == False:
                try:
                    c = self['menu'].getSelectedIndex()
                    self.oldindex = c
                    sref = self.sref[c]
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            elif self.search == True:
                try:
                    c = self['searchmenu'].getSelectedIndex()
                    self.oldsearchindex = c
                    sref = self.searchref[c]
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            else:
                self.session.open(MessageBox, '\nTimer nicht m\xc3\xb6glich:\nKeine Service Reference vorhanden, der ausgew\xc3\xa4hlte Sender wurde nicht importiert.', MessageBox.TYPE_ERROR, close_on_any_key=True)
        elif self.current == 'menu' and self.ready == True:
            c = self['menu'].getSelectedIndex()
            self.oldindex = c
            try:
                self.postlink = self.tvlink[c]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.download(self.postlink, self.makePostTimer)
        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            self.oldsearchindex = c
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.download(self.postlink, self.makePostTimer)
        return

    def finishedTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer[0]:
            entry = answer[1]
            simulTimerList = self.session.nav.RecordTimer.record(entry)
            if simulTimerList is not None:
                for x in simulTimerList:
                    if x.setAutoincreaseEnd(entry):
                        self.session.nav.RecordTimer.timeChanged(x)

                simulTimerList = self.session.nav.RecordTimer.record(entry)
                if simulTimerList is not None:
                    self.session.openWithCallback(self.finishSanityCorrection, TimerSanityConflict, simulTimerList)
            self.makeTimerDB()
            self.ready = True
            self.postviewready = False
            self.current = self.oldcurrent
            if self.search == False:
                self.showProgrammPage()
            else:
                self.showsearch()
        else:
            self.ready = True
            self.postviewready = False
            self.current = self.oldcurrent
            if self.search == False:
                self.showProgrammPage()
            else:
                self.showsearch()
        return

    def finishSanityCorrection(self, answer):
        self.finishedTimer(answer)

    def finishedAutoTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.AutoTimerEditor import AutoTimerEditor
            answer, session = answer
            if config.plugins.tvspielfilm.fhd.value == 'yes':
                try:
                    gMainDC.getInstance().setResolution(1920, 1080)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 1080))
                except:
                    import traceback
                    traceback.print_exc()

            session.openWithCallback(self.finishedAutoTimerEdit, AutoTimerEditor, answer)

    def finishedAutoTimerEdit(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.plugin import autotimer
            if autotimer is None:
                from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                autotimer = AutoTimer()
            autotimer.add(answer)
            autotimer.writeXml()
        return

    def makeTimerDB(self):
        timerxml = open('/etc/enigma2/timers.xml').read()
        timer = re.findall('<timer begin="(.*?)" end=".*?" serviceref="(.*?)"', timerxml)
        timerfile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db'
        f = open(timerfile, 'w')
        data = ''
        idx = 0
        for x in timer:
            idx += 1

        for i in range(idx):
            try:
                timerstart = timer[i - 1][0]
                timerstart = int(timerstart) + int(config.recording.margin_before.value) * 60
                timerday = time.strftime('%Y-%m-%d', time.localtime(timerstart))
                timerhour = time.strftime('%H:%M', time.localtime(timerstart))
                timersref = timer[i - 1][1]
                data = data + timerday + ':::' + timerhour + ':::' + timersref + '\n'
            except IndexError:
                pass

        f.write(data)
        f.close()
        self.timer = data

    def green(self):
        if self.current == 'menu' and self.search == False:
            c = self['menu'].getSelectedIndex()
            try:
                sref = self.sref[c]
                if sref != '':
                    self.session.nav.playService(eServiceReference(sref))
            except IndexError:
                pass

        elif self.current == 'postview':
            self.wiki()

    def yellow(self):
        if self.current == 'postview':
            self.youTube()
        elif self.current == 'menu' and self.search == False and self.ready == True:
            try:
                c = self['menu'].getSelectedIndex()
                self.oldindex = c
                try:
                    titel = self.tvtitel[c]
                except IndexError:
                    pass

                if titel != 'na':
                    self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='Genre: ' + self.genre.replace(':', ' -') + ', Filter:', text=titel)
                else:
                    self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='Genre: ' + self.genre.replace(':', ' -') + ', Filter:', text='')
            except IndexError:
                self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='Genre: ' + self.genre.replace(':', ' -') + ', Filter:', text='')

    def searchReturn(self, search):
        if search and search != '':
            self.searchstring = search
            self['menu'].hide()
            self['label'].setText('')
            self['label2'].setText('')
            self['label3'].setText('')
            self['label4'].setText('')
            self['searchlogo'].show()
            self['searchtimer'].show()
            self.searchlink = []
            self.searchref = []
            self.searchentries = []
            self.search = True
            self.datum = False
            self.filter = True
            search = search.replace(' ', '+')
            searchlink = sub('&q=', '&q=' + search, self.link)
            self.maxsearchcount = config.plugins.tvspielfilm.maxgenre.value
            self.searchcount = 0
            self.makeSearchView(searchlink)

    def showsearch(self):
        self.postviewready = False
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['label'].setText('')
        self['label2'].setText('')
        self['label3'].setText('')
        self['label4'].setText('')
        self['searchmenu'].show()
        self['searchlogo'].show()
        self['searchtimer'].show()
        self['searchtext'].show()

    def pressText(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)

    def playTrailer(self):
        if self.current == 'postview' and self.postviewready == True and self.trailer == True:
            sref = eServiceReference(4097, 0, self.trailerurl)
            sref.setName(self.name)
            self.session.open(MoviePlayer, sref)

    def youTube(self):
        if self.current == 'postview' and self.postviewready == True:
            self.session.open(searchYouTube, self.name, self.movie)
        elif self.current == 'menu' and self.search == False and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                titel = self.tvtitel[c]
                if titel != 'na':
                    self.session.open(searchYouTube, titel, self.movie)
            except IndexError:
                pass

    def wiki(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/Wikipedia.pyo'):
                from Plugins.Extensions.Wikipedia.Wikipedia import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/plugin.pyo'):
                from Plugins.Extensions.Wikipedia.plugin import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            else:
                self.session.openWithCallback(self.wikiInstall, MessageBox, '\nDas Wikipedia Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)
                return

    def wikiInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'wiki', True)

    def translator(self):
        if self.current == 'postview':
            if self.showEPG == False:
                text = self.POSTtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            else:
                text = self.EPGtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/EPGTranslator.pyo'):
                from Plugins.Extensions.EPGTranslator.EPGTranslator import translatorMain
                self.session.open(translatorMain, text)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/plugin.pyo'):
                from Plugins.Extensions.EPGTranslator.plugin import translatorMain
                self.session.open(translatorMain, text)
            else:
                self.session.openWithCallback(self.translatorInstall, MessageBox, '\nDas EPG Translator Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)
                return

    def translatorInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'translator', True)

    def IMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
                from Plugins.Extensions.IMDb.plugin import IMDB
                self.session.open(IMDB, self.name)
            else:
                self.session.openWithCallback(self.IMDbInstall, MessageBox, '\nDas IMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
                from Plugins.Extensions.TMDb.plugin import TMDbMain
                self.session.open(TMDbMain, self.name)
            else:
                self.session.openWithCallback(self.TMDbInstall, MessageBox, '\nDas TMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TVDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
                from Plugins.Extensions.TheTVDB.plugin import TheTVDBMain
                self.name = sub('Die ', '', self.name)
                self.session.open(TheTVDBMain, self.name)
            else:
                self.session.openWithCallback(self.TVDbInstall, MessageBox, '\nDas TheTVDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def IMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedIMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-imdb')

    def finishedIMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas IMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas IMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das IMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-tmdbinfo')

    def finishedTMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TVDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTVDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-thetvdb')

    def finishedTVDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TheTVDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TheTVDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TheTVDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def restartGUI(self, answer):
        if answer is True:
            try:
                self.session.open(TryQuitMainloop, 3)
            except RuntimeError:
                self.close()

    def gotoEnd(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            end = len(self.tventries) - 1
            self['menu'].moveToIndex(end)
        elif self.current != 'postview' and self.ready == True and self.search == True:
            end = len(self.searchentries) - 1
            self['searchmenu'].moveToIndex(end)

    def findPicon(self, sref):
        sref = sref + 'FIN'
        sref = sref.replace(':', '_')
        sref = sref.replace('_FIN', '')
        sref = sref.replace('FIN', '')
        pngname = self.piconfolder + sref + '.png'
        if fileExists(pngname):
            return pngname

    def getPicPost(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPicPost(self.picfile)

    def showPicPost(self, picpost):
        if self.xd == False:
            currPic = loadPic(picpost, 490, 245, 3, 0, 0, 0)
        else:
            currPic = loadPic(picpost, 400, 200, 3, 0, 0, 0)
        if currPic != None:
            self['picpost'].instance.setPixmap(currPic)
            self['piclabel'].show()
            self['piclabel2'].show()
            if self.trailer == True:
                self['cinlogo'].show()
                self['playlogo'].show()
        return

    def showPicTVinfo1(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo1'].instance.setPixmap(currPic)
        return

    def showPicTVinfo2(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo2'].instance.setPixmap(currPic)
        return

    def showPicTVinfo3(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo3'].instance.setPixmap(currPic)
        return

    def showPicTVinfo4(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo4'].instance.setPixmap(currPic)
        return

    def showPicTVinfo5(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo5'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def downloadFull(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadFullError)

    def downloadFullError(self, output):
        self['label'].setText('OK = Sendung, Stop = YouTube Trailer')
        self['label'].stopBlinking()
        self['label'].show()
        self['menu'].moveToIndex(self.oldindex)
        self.ready = True

    def downloadPostPage(self, link, name):
        downloadPage(link, self.localhtml2).addCallback(name).addErrback(self.downloadError)

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadPageError)

    def downloadPageError(self, output):
        self['label'].setText('OK = Sendung, Stop = YouTube Trailer')
        self['label'].stopBlinking()
        self['label'].show()
        self.ready = True

    def refresh(self):
        self.postviewready = False
        self.ready = False
        self.datum = False
        self.filter = True
        self.current = 'menu'
        self['label'].setText('Bitte warten...')
        self['label'].startBlinking()
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.sref = []
        self.genrecount = 0
        self.makeTVTimer.callback.append(self.downloadFull(self.link, self.makeTVView))

    def showProgrammPage(self):
        self['label'].setText('OK = Sendung, Stop = YouTube Trailer')
        self['label2'].setText('= Timer')
        self['label3'].setText('= Filter')
        self['label4'].setText('= Zappen')
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        self.current = 'menu'
        self['menu'].show()

    def down(self):
        try:
            if self.current == 'menu':
                self['menu'].down()
            elif self.current == 'searchmenu':
                self['searchmenu'].down()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def up(self):
        try:
            if self.current == 'menu':
                self['menu'].up()
            elif self.current == 'searchmenu':
                self['searchmenu'].up()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def rightDown(self):
        try:
            if self.current == 'menu':
                self['menu'].pageDown()
            elif self.current == 'searchmenu':
                self['searchmenu'].pageDown()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def leftUp(self):
        try:
            if self.current == 'menu':
                self['menu'].pageUp()
            elif self.current == 'searchmenu':
                self['searchmenu'].pageUp()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def zap(self):
        servicelist = self.session.instantiateDialog(ChannelSelection)
        self.session.execDialog(servicelist)

    def zapUp(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapUp(InfoBar.instance)

    def zapDown(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapDown(InfoBar.instance)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def picReturn(self):
        pass

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if self.load == True:
            self.session.openWithCallback(self.stopLoad, MessageBox, '\nDie Suche ist noch nicht beendet. Soll die Suche abgebrochen und das Ergebnis angezeigt werden?', MessageBox.TYPE_YESNO)
        elif self.current == 'menu' and self.search == False:
            if fileExists(self.picfile):
                os.remove(self.picfile)
            if fileExists(self.localhtml):
                os.remove(self.localhtml)
            if fileExists(self.localhtml2):
                os.remove(self.localhtml2)
            self.close()
        elif self.current == 'searchmenu':
            self.search = False
            self.oldsearchindex = 1
            self['searchmenu'].hide()
            self['searchlogo'].hide()
            self['searchtimer'].hide()
            self['searchtext'].hide()
            self.setTitle('')
            self.setTitle(self.titel)
            self.showProgrammPage()
        elif self.current == 'postview' and self.search == False:
            self.postviewready = False
            self.setTitle('')
            self.setTitle(self.titel)
            self.showProgrammPage()
        elif self.current == 'postview' and self.search == True:
            self.postviewready = False
            self.showsearch()
            self.current = 'searchmenu'


class TVJetztView(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title=" ">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,60" size="{size}" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="searchtimer" position="306,0" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,60" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,60" size="727,60" font="{font};24" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,120" size="992,360" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="306,60" size="400,200" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="391,216" size="90,22" font="{font};20" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="391,238" size="90,22" font="{font};16" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,60" size="252,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="685,60" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="685,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="685,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="685,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="65,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="120,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="65,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="267,60" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="463,138" size="85,45" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/play.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,270" size="992,235" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="987,270" size="20,235" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_235.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="150,5" size="712,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="376,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="486,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="596,27" size="100,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="352,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="462,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="572,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title=" ">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,75" size="{size}" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="searchtimer" position="420,5" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,75" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,75" size="955,65" font="{font};26" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,140" size="1220,480" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="375,70" size="490,245" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="476,265" size="100,25" font="{font};22" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="476,290" size="100,25" font="{font};18" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,70" size="310,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="855,70" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="855,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="855,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="855,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="80,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="150,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="80,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="325,70" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="565,163" size="109,58" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/playHD.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,325" size="1220,315" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="1214,325" size="22,315" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_315.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="220,10" size="800,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="469,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="594,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="719,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="445,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="570,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="695,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'

    def __init__(self, session, link, standalone):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.picon.value == 'yes':
                size = '1220,558'
                self.picon = True
                self.piconfolder = config.plugins.tvspielfilm.piconfolder.value
            else:
                size = '1220,560'
                self.picon = False
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '74'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '72'
            else:
                self.fontlarge = False
                fontsize = '70'
            self.dict = {'position': position,
             'font': font,
             'size': size,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVJetztView.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.picon.value == 'yes':
                size = '1400,434'
                self.picon = True
                self.piconfolder = config.plugins.tvspielfilm.piconfolder.value
            else:
                size = '1400,450'
                self.picon = False
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '72'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '70'
            else:
                self.fontlarge = False
                fontsize = '78'
            self.dict = {'position': position,
             'font': font,
             'size': size,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVJetztView.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.localhtml2 = '/tmp/tvspielfilm2.html'
        self.current = 'menu'
        self.oldcurrent = 'menu'
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.sref = []
        self.searchlink = []
        self.searchref = []
        self.searchentries = []
        self.start = ''
        self.end = ''
        self.day = ''
        self.name = ''
        self.shortdesc = ''
        self.postlink = link
        self.link1 = link
        self.link2 = link
        self.trailerurl = ''
        self.titel = ''
        self.standalone = standalone
        self.POSTtext = ''
        self.EPGtext = ''
        self.hideflag = True
        self.jetzt = False
        self.gleich = False
        self.abends = False
        self.nachts = False
        self.search = False
        self.rec = False
        self.ready = False
        self.postviewready = False
        self.mehrbilder = False
        self.trailer = False
        self.movie = False
        self.datum = False
        self.filter = True
        self.index = 0
        self.oldindex = 0
        self.oldsearchindex = 1
        self['picpost'] = Pixmap()
        self['tvinfo1'] = Pixmap()
        self['tvinfo2'] = Pixmap()
        self['tvinfo3'] = Pixmap()
        self['tvinfo4'] = Pixmap()
        self['tvinfo5'] = Pixmap()
        self['cinlogo'] = Pixmap()
        self['cinlogo'].hide()
        self['playlogo'] = Pixmap()
        self['playlogo'].hide()
        self['searchlogo'] = Pixmap()
        self['searchlogo'].hide()
        self['searchtimer'] = Pixmap()
        self['searchtimer'].hide()
        self['searchtext'] = Label('')
        self['searchtext'].hide()
        self['textpage'] = ScrollLabel('')
        self['infotext'] = Label('')
        self['infotext'].hide()
        self['infotext2'] = Label('')
        self['infotext2'].hide()
        self['infotext3'] = Label('')
        self['infotext3'].hide()
        self['infotext4'] = Label('')
        self['infotext4'].hide()
        self['infotext5'] = Label('')
        self['infotext5'].hide()
        self['infotext6'] = Label('')
        self['infotext6'].hide()
        self['infotext7'] = Label('')
        self['infotext7'].hide()
        self['infotext8'] = Label('')
        self['infotext8'].hide()
        self['piclabel'] = Label('')
        self['piclabel'].hide()
        self['piclabel2'] = Label('')
        self['piclabel2'].hide()
        self['slider_textpage'] = Pixmap()
        self['slider_textpage'].hide()
        self['searchmenu'] = ItemList([])
        self['searchmenu'].hide()
        self['menu'] = ItemList([])
        self['label'] = BlinkingLabel('Bitte warten...')
        self['label'].startBlinking()
        self['label2'] = Label('= Timer')
        self['label3'] = Label('= Suche')
        self['label4'] = Label('= Zappen')
        self['actions'] = ActionMap(['OkCancelActions',
         'DirectionActions',
         'HelpActions',
         'EPGSelectActions',
         'NumberActions',
         'InfobarTeletextActions',
         'ChannelSelectBaseActions',
         'MoviePlayerActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'nextBouquet': self.zap,
         'prevBouquet': self.zap,
         '0': self.gotoEnd,
         '1': self.zapUp,
         '2': self.zapDown,
         '6': self.translator,
         '7': self.IMDb,
         '8': self.TMDb,
         '9': self.TVDb,
         'info': self.getEPG,
         'epg': self.getEPG,
         'leavePlayer': self.youTube,
         'startTeletext': self.pressText,
         'displayHelp': self.infoScreen}, -1)
        self['ColorActions'] = ActionMap(['ColorActions'], {'green': self.green,
         'yellow': self.yellow,
         'red': self.makeTimer,
         'blue': self.hideScreen}, -1)
        self.servicefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/service.references'
        self.service_db = serviceDB(self.servicefile)
        f = open(self.servicefile, 'r')
        lines = f.readlines()
        f.close()
        ordertext = [ '"%s": %d, ' % (line.partition(' ')[0], i) for i, line in enumerate(lines) ]
        self.order = '{' + str(''.join(ordertext)) + '}'
        if self.standalone == True:
            self.movie_stop = config.usage.on_movie_stop.value
            self.movie_eof = config.usage.on_movie_eof.value
            config.usage.on_movie_stop.value = 'quit'
            config.usage.on_movie_eof.value = 'quit'
            self.makeTimerDB()
        else:
            self.timer = open('/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db').read()
        self.date = datetime.date.today()
        one_day = datetime.timedelta(days=1)
        self.nextdate = self.date + one_day
        weekday = self.date.weekday()
        if weekday == 0:
            self.weekday = 'Montag'
        elif weekday == 1:
            self.weekday = 'Dienstag'
        elif weekday == 2:
            self.weekday = 'Mittwoch'
        elif weekday == 3:
            self.weekday = 'Donnerstag'
        elif weekday == 4:
            self.weekday = 'Freitag'
        elif weekday == 5:
            self.weekday = 'Samstag'
        elif weekday == 6:
            self.weekday = 'Sonntag'
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        if config.plugins.tvspielfilm.genreinfo.value == 'no':
            self.showgenre = False
        else:
            self.showgenre = True
        self.makeTVTimer = eTimer()
        if search('/sendungen/jetzt.html', link) is not None:
            self.jetzt = True
            self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
        elif search('time=shortly', link) is not None:
            self.gleich = True
            self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
        elif search('/sendungen/abends.html', link) is not None:
            self.abends = True
            self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
        elif search('/sendungen/fernsehprogramm-nachts.html', link) is not None:
            self.nachts = True
            self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
        self.makeTVTimer.start(500, True)
        return

    def makeTVView(self, output):
        date = str(self.date.strftime('%d.%m.%Y'))
        if self.jetzt == True:
            self.titel = 'Jetzt im TV - Heute, ' + str(self.weekday) + ', ' + date
        elif self.gleich == True:
            self.titel = 'Gleich im TV - Heute, ' + str(self.weekday) + ', ' + date
        elif self.abends:
            self.titel = '20:15 im TV - Heute, ' + str(self.weekday) + ', ' + date
        else:
            self.titel = '22:00 im TV - Heute, ' + str(self.weekday) + ', ' + date
        self.setTitle(self.titel)
        startpos = find(output, '<table class="info-table"')
        endpos = find(output, '<div class="block-in">')
        if endpos == -1:
            endpos = find(output, '<div class="two-blocks">')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('class="chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('<strong><a href="https://my', '<td>LINKhttps://www', bereich)
        bereich = sub('<strong><a href="https://www', '<td>LINKhttps://www', bereich)
        bereich = sub('standard">\n\\s+<a href="https://my', '<td>LINKhttps://www', bereich)
        bereich = sub('standard">\n\\s+<a href="https://www', '<td>LINKhttps://www', bereich)
        bereich = sub('" target="_self" onclick', '</td>', bereich)
        bereich = sub('<li><strong>[0-9]+</strong></li>', '', bereich)
        bereich = sub('<strong>', '<td>TIME', bereich)
        bereich = sub('</a></strong>', '</td>', bereich)
        bereich = sub('</strong>', '</td>', bereich)
        bereich = sub('"saveRef..;" title="', '<td>TITEL', bereich)
        bereich = sub('" title="', '</td>', bereich)
        bereich = sub('"></span></td>', '</td>', bereich)
        bereich = sub('</span>', '</td>', bereich)
        bereich = sub('<span\n\\s+class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span>Spielfilm\n', '<td>SPARTESpielfilm</td>', bereich)
        bereich = sub('<span>Serie\n', '<td>SPARTESerie</td>', bereich)
        bereich = sub('<span>Report\n', '<td>SPARTEReport</td>', bereich)
        bereich = sub('<span>Unterhaltung\n', '<td>SPARTEUnterhaltung</td>', bereich)
        bereich = sub('<span>Kinder\n', '<td>SPARTEKinder</td>', bereich)
        bereich = sub('<span>Sport\n', '<td>SPARTESport</td>', bereich)
        nowhour = datetime.datetime.now().hour
        if self.jetzt == True or self.gleich == True or self.abends == True and nowhour == 20 or self.abends == True and nowhour == 21 or self.nachts == True and nowhour == 22:
            self.progress = True
            nowminute = datetime.datetime.now().minute
            nowsec = int(nowhour) * 3600 + int(nowminute) * 60
        else:
            self.progress = False
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 6
        for x in a:
            if y == 0:
                x = sub('LOGO', '', x)
                service = x
                sref = self.service_db.lookup(service)
                if sref == 'nope':
                    self.filter = True
                else:
                    self.filter = False
                    res_sref = []
                    res_sref.append(service)
                    res_sref.append(sref)
                    self.sref.append(res_sref)
                    res = [x]
                    if self.backcolor == True:
                        if self.picon == True:
                            if self.xd == False:
                                res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 62), font=-1, backcolor_sel=self.back_color, text=''))
                            else:
                                res.append(MultiContentEntryText(pos=(0, 0), size=(992, 62), font=0, backcolor_sel=self.back_color, text=''))
                        elif self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                    if self.picon == True:
                        picon = self.findPicon(sref)
                        if picon is not None:
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 1), size=(100, 60), png=LoadPixmap(picon)))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 1), size=(100, 60), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER | RT_WRAP, text='Picon not found'))
                    elif self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(59, 36), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(44, 27), png=loadPNG(png)))
            if y == 1:
                if self.filter == False:
                    x = sub('TIME', '', x)
                    if self.progress == True:
                        start = sub(' - ..:..', '', x)
                        startparts = start.split(':')
                        startsec = int(startparts[0]) * 3600 + int(startparts[1]) * 60
                        end = sub('..:.. - ', '', x)
                        endparts = end.split(':')
                        endsec = int(endparts[0]) * 3600 + int(endparts[1]) * 60
                        if endsec >= startsec:
                            length = endsec - startsec
                        else:
                            length = 86400 - startsec + endsec
                        if nowsec < startsec and endsec - nowsec > 43200:
                            percent = 100
                        elif nowsec < startsec and endsec > startsec:
                            percent = 0
                        elif endsec < startsec:
                            if nowsec > startsec:
                                passed = nowsec - startsec
                                percent = passed * 100 / length
                            elif nowsec < endsec:
                                passed = 86400 - startsec + nowsec
                                percent = passed * 100 / length
                            elif nowsec - endsec < startsec - nowsec:
                                percent = 100
                            else:
                                percent = 0
                        elif nowsec > endsec and nowsec - endsec > 43200:
                            percent = 0
                        elif nowsec > endsec:
                            percent = 100
                        else:
                            passed = nowsec - startsec
                            percent = passed * 100 / length
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(100, 18), size=(175, 40), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                        else:
                            res.append(MultiContentEntryText(pos=(100, 19), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(60, 7), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(45, 3), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    start = sub(' - ..:..', '', x)
                    hour = sub(':..', '', start)
                    if int(nowhour) - int(hour) > 6:
                        one_day = datetime.timedelta(days=1)
                        date = self.date + one_day
                    else:
                        date = self.date
                    timer = str(date) + ':::' + start + ':::' + str(sref)
                    if timer in self.timer:
                        self.rec = True
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-small-recHD.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1014, 11), size=(39, 40), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-small-rec.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(815, 17), size=(28, 29), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-small-recHD.png'
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1014, 0), size=(39, 40), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-small-rec.png'
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(815, 1), size=(28, 29), png=loadPNG(png)))
            if y == 2:
                if self.filter == False:
                    x = sub('LINK', '', x)
                    res_link = []
                    res_link.append(service)
                    res_link.append(x)
                    self.tvlink.append(res_link)
            if y == 3:
                if self.filter == False:
                    if search('TITEL', x) is not None:
                        x = sub('TITEL', '', x)
                        titel = x.split('">')
                        if self.showgenre == False:
                            x = titel[1]
                        else:
                            x = titel[0]
                        res_titel = []
                        res_titel.append(service)
                        res_titel.append(titel[1])
                        self.tvtitel.append(res_titel)
                        if self.picon == True:
                            if self.xd == False:
                                if self.progress == False:
                                    res.append(MultiContentEntryText(pos=(280, 18), size=(1245, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))#Sendung 20:15 ohne progress
                                else:
                                    res.append(MultiContentEntryProgress(pos=(275, 24), size=(70, 14), percent=percent, borderWidth=1, foreColor=16777215))
                                    res.append(MultiContentEntryText(pos=(365, 18), size=(1250, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))#Sendung 20:15 mit progress
                    else:
                        y = 4
                elif search('TITEL', x) is None:
                    y = 4
            if y == 4:
                if search('SPARTE', x) is not None:
                    if self.filter == False:
                        x = sub('SPARTE', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                res.append(MultiContentEntryText(pos=(1640, 18), size=(152, 40), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))
                            else:
                                res.append(MultiContentEntryText(pos=(855, 19), size=(135, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))
                else:
                    y = 5
            if y == 5:
                if self.filter == False:
                    x = sub('RATING', '', x)
                    if self.rec == True:
                        self.rec = False
                    elif x != 'rating small':
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1655, 11), size=(40, 40), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(855, 17), size=(29, 29), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1254, 0), size=(40, 40), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(855, 1), size=(29, 29), png=loadPNG(png)))
                    self.tventries.append(res)
            y += 1
            if y == offset:
                y = 0

        order = eval(self.order)
        self.sref = sorted(self.sref, key=lambda x: order[x[0]])
        self.tvlink = sorted(self.tvlink, key=lambda x: order[x[0]])
        self.tvtitel = sorted(self.tvtitel, key=lambda x: order[x[0]])
        self.tventries = sorted(self.tventries, key=lambda x: order[x[0]])
        if self.picon == True:
            self['menu'].l.setItemHeight(62)
        elif self.xd == False:
            self['menu'].l.setItemHeight(40)
        else:
            self['menu'].l.setItemHeight(30)
        self['menu'].l.setList(self.tventries)
        if self.jetzt == True:
            nextpage = search('<a href="(.*?)"\\n\\s+class="pagination__link pagination__link--next" >', bereich)
            if nextpage is not None:
                self.downloadFull(nextpage.group(1), self.makeTVView)
            else:
                self['menu'].moveToIndex(self.index)
                self.ready = True
                self['label'].setText('Text = Sender,        Info = Jetzt im TV/Gleich im TV')
                self['label'].stopBlinking()
                self['label'].show()
        elif self.gleich == True:
            if search('<a href=".*?tvspielfilm.de/tv-programm/sendungen/.*?page=[2-9]', bereich) is not None:
                nextpage = search('<a href="(.*?)"\\n\\s+class="pagination__link pagination__link--next" >', bereich)
                if nextpage is not None:
                    self.downloadFull(nextpage.group(1), self.makeTVView)
            else:
                self['menu'].moveToIndex(self.index)
                self.ready = True
                self['label'].setText('Text = Sender,        Info = Jetzt im TV/Gleich im TV')
                self['label'].stopBlinking()
                self['label'].show()
        elif search('<a href=".*?tvspielfilm.de/tv-programm/sendungen/.*?page=[2-9]', bereich) is not None:
            nextpage = search('<a href="(.*?)"\\n\\s+class="pagination__link pagination__link--next" >', bereich)
            if nextpage is not None:
                self.downloadFull(nextpage.group(1), self.makeTVView)
        else:
            self['menu'].moveToIndex(self.index)
            self.ready = True
            self['label'].setText('Text = Sender,        Info = Jetzt im TV/Gleich im TV')
            self['label'].stopBlinking()
            self['label'].show()
        return

    def makePostviewPage(self, string):
        output = open(self.localhtml2, 'r').read()
        self['label2'].setText('= Timer')
        self['label3'].setText('= YouTube')
        self['label4'].setText('= Wikipedia')
        self['menu'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        output = sub('</dl>.\n\\s+</div>.\n\\s+</section>', '</cast>', output)
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('</cast>')
            if endpos == -1:
                endpos = output.find('<h2 class="broadcast-info">')
                if endpos == -1:
                    endpos = output.find('<div class="OUTBRAIN"')
                    if endpos == -1:
                        endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('\r', '', bereich)
        bereich = re.sub('<ul class="slidelist">.*?</ul>', '', bereich, flags=re.S)
        bereich = re.sub('<script.*?</script>', '', bereich, flags=re.S)
        bereich = re.sub('<style.*?</style>', '', bereich, flags=re.S)
        bereich = re.sub('<div class="text" id=".*?</div>', '', bereich, flags=re.S)
        if search('rl: .https://video.tvspielfilm.de/.*?mp4', output) is not None:
            trailerurl = search('rl: .https://video.tvspielfilm.de/(.*?).mp4', output)
            self.trailerurl = 'https://video.tvspielfilm.de/' + trailerurl.group(1) + '.mp4'
            self.trailer = True
        else:
            self.trailer = False
        bereich = sub('" alt=".*?" width="', '" width="', bereich)
        picurl = search('<img src="(.*?)" width="', bereich)
        if picurl is not None:
            self.download(picurl.group(1), self.getPicPost)
            self['picpost'].show()
        else:
            picurl = search('<meta property="og:image" content="(.*?)"', output)
            if picurl is not None:
                self.download(picurl.group(1), self.getPicPost)
                self['picpost'].show()
            else:
                picurl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/TV-Spielfilm-Logo.svg/500px-TV-Spielfilm-Logo.svg.png'
                self.download(picurl, self.getPicPost)
                self['picpost'].show()
        if self.search == False:
            title = search('<title>(.*?)</title>', output)
            self.title = transHTML(title.group(1))
            self.setTitle(self.title)
        if search('<ul class="rating-dots">', bereich) is not None:
            self.movie = True
        else:
            self.movie = False
        if search('<div class="film-gallery">', output) is not None:
            self.mehrbilder = True
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        else:
            self.mehrbilder = False
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        try:
            parts = infotext[0].split(', ')
            self['infotext'].setText(parts[0])
            self['infotext'].show()
        except IndexError:
            self['infotext'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext2'].setText(parts[1])
            self['infotext2'].show()
        except IndexError:
            self['infotext2'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext3'].setText(parts[2])
            self['infotext3'].show()
        except IndexError:
            self['infotext3'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext4'].setText(parts[0])
            self['infotext4'].show()
        except IndexError:
            self['infotext4'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext5'].setText(parts[1])
            self['infotext5'].show()
        except IndexError:
            self['infotext5'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext6'].setText(parts[2])
            self['infotext6'].show()
        except IndexError:
            self['infotext6'].setText('')

        try:
            parts = infotext[2].split(', ')
            self['infotext7'].setText(parts[0] + ', ' + parts[1])
            self['infotext7'].show()
        except IndexError:
            self['infotext7'].setText('')

        try:
            self['infotext8'].setText(infotext[3])
            self['infotext8'].show()
        except IndexError:
            self['infotext8'].setText('')

        tvinfo = re.findall('<span class="add-info (.*?)">', bereich)
        try:
            if self.xd == False:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + 'HD.png'
            else:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + '.png'
            self.showPicTVinfo1(tvinfo1)
            self['tvinfo1'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + 'HD.png'
            else:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + '.png'
            self.showPicTVinfo2(tvinfo2)
            self['tvinfo2'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + 'HD.png'
            else:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + '.png'
            self.showPicTVinfo3(tvinfo3)
            self['tvinfo3'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + 'HD.png'
            else:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + '.png'
            self.showPicTVinfo4(tvinfo4)
            self['tvinfo4'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + 'HD.png'
            else:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + '.png'
            self.showPicTVinfo5(tvinfo5)
            self['tvinfo5'].show()
        except IndexError:
            pass

        self['piclabel'].setText(self.start[0:5])
        try:
            parts = infotext[0].split(', ')
            text = shortenChannel(parts[2])
            self['piclabel2'].setText(text[0:10])
        except IndexError:
            self['piclabel2'].setText('')

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        bereich = sub('<blockquote class="broadcast-detail__quote">\n\\s+<p>', '<p>>> ', bereich)
        bereich = sub('</p>\n[ ]+</blockquote>', ' <<</p>', bereich)
        bereich = sub('<section class="serial-info">\n\\s+', '<p>', bereich)
        bereich = sub('</section>', '</p>', bereich)
        bereich = sub('</span>\\s+', '</span>, ', bereich)
        bereich = sub('<li class="titleName">', '</p><p> \xc2\xb7 ', bereich)
        bereich = sub('<li class="subtitleName">', '#sub#', bereich)
        bereich = sub('ShowView [0-9-]+', '', bereich)
        bereich = sub('<a href=".*?">', '', bereich)
        bereich = sub('<h1.*?>', '<p>', bereich)
        bereich = sub('</h1>', '</p>', bereich)
        bereich = sub('<h3.*?>', '<p>', bereich)
        bereich = sub('</h3>', '</p>', bereich)
        bereich = sub('<br/>', '</p><p>', bereich)
        bereich = sub('<p>\n', '<p>', bereich)
        bereich = sub('<dt>', '<p>', bereich)
        bereich = sub('<dt class="role">', '<p>', bereich)
        bereich = sub('</dt>\n\\s+<dd>\n\\s+', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd>', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd class="name">', ': ', bereich)
        bereich = sub('\n[ ]+,', ',', bereich)
        bereich = sub(', [ ]+', ', ', bereich)
        bereich = sub('</a>', '</p>', bereich)
        bereich = sub('\n\\s+</dd>', '</p>', bereich)
        bereich = sub('</a></dd>', '</p>', bereich)
        bereich = sub('</dd>', '</p>', bereich)
        bereich = sub('</dt>', '</p>', bereich)
        text = ''
        a = findall('<p.*?>(.*?)</p>', bereich)
        for x in a:
            if x != '':
                text = text + x + '\n\n'

        text = sub('<[^>]*>', '', text)
        text = sub('</p<<p<', '\n\n', text)
        text = sub('\n\\s+\n*', '\n\n', text)
        text = sub('#sub#', '\n  ', text)
        if self.fontlarge == True:
            if self.xd == False:
                fill = '____________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
            else:
                fill = '________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        elif self.xd == False:
            fill = '____________________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        else:
            fill = '_________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        self.POSTtext = text + fill
        self['textpage'].setText(self.POSTtext)
        self['textpage'].show()
        self['slider_textpage'].show()
        self.showEPG = False
        self.postviewready = True
        return

    def makePostTimer(self, output):
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('<h2 class="broadcast-info">')
            if endpos == -1:
                endpos = output.find('<div class="OUTBRAIN"')
                if endpos == -1:
                    endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        self.current = 'postview'
        self.postviewready = True
        self.red()
        return

    def makeSearchView(self, url):
        header = {'User-Agent': 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100627 Firefox/3.6.6',
         'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
         'Accept-Language': 'en-us,en;q=0.5'}
        searchrequest = Request(url, None, header)
        try:
            output = urlopen(searchrequest).read()
        except (HTTPError,
         URLError,
         HTTPException,
         socket.error,
         AttributeError):
            output = ' '

        title = search('<title>(.*?)</title>', output)
        if title is not None:
            self['searchtext'].setText(title.group(1))
            self['searchtext'].show()
            self.setTitle('')
            self.setTitle(title.group(1))
        startpos = find(output, '<table class="primetime-table">')
        endpos = find(output, '</table>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('<span>TV-Sendungen am', '<td>DATUMTV-Sendungen am', bereich)
        bereich = sub('class="search-starttimes">\n\\s+<span>', '<td>TIME', bereich)
        bereich = sub('<h3><a href="', '<td>LINK', bereich)
        if self.showgenre == False:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title=".*?">', '</td><td>TITEL', bereich)
            bereich = sub('</a></h3>', '</td>', bereich)
        else:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title="', '</td><td>TITEL', bereich)
            bereich = sub('">.*?</a></h3>', '</td>', bereich)
        bereich = sub('<span class="logotype chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('<p>', '<td>GENRE', bereich)
        bereich = sub('<li class="', '<td>INFO', bereich)
        bereich = sub('<span\n\\s+class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span class="editorial-', '<td>RATING', bereich)
        bereich = sub('"></span>', '', bereich)
        bereich = sub('</span>\n', '</td>', bereich)
        bereich = sub('</span>', '', bereich)
        bereich = sub('\n\\s+</div>\n', '</td>', bereich)
        bereich = sub('\n.*?</p>', '</td>', bereich)
        bereich = sub('"></li>', '</td>', bereich)
        bereich = sub('\n.*?<br/><em class=".*?</em>', '', bereich)
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 10
        for x in a:
            if y == 0:
                res = [x]
                if self.backcolor == True:
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                if search('DATUM', x) is not None:
                    if self.datum == True:
                        try:
                            del self.searchref[-1]
                            del self.searchlink[-1]
                            del self.searchentries[-1]
                        except IndexError:
                            pass

                    else:
                        self.datum = True
                    x = sub('DATUM', '', x)
                    self.datum_string = x
                    res_datum = [x]
                    if self.backcolor == True:
                        if self.picon == True:
                            if self.xd == False:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                            else:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                        elif self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                    if self.picon == True:
                        if self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    elif self.xd == False:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    else:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    self.searchref.append('na')
                    self.searchlink.append('na')
                    self.searchentries.append(res_datum)
                    self.filter = True
                    y = 9
                else:
                    y = 1
            if y == 1:
                x = sub('TIME', '', x)
                start = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(100, 17), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(100, 18), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(60, 7), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(45, 3), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
            if y == 2:
                if search('LOGO', x) is not None:
                    logo = search('LOGO(.*?)">', x)
                    if logo is not None:
                        x = logo.group(1)
                    service = x
                    sref = self.service_db.lookup(service)
                    if sref == 'nope':
                        self.filter = True
                    else:
                        self.filter = False
                        self.searchref.append(sref)
                        if self.picon == True:
                            picon = self.findPicon(sref)
                            if picon is not None:
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 0), size=(100, 60), png=LoadPixmap(picon)))
                            else:
                                res.append(MultiContentEntryText(pos=(0, 0), size=(100, 60), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER | RT_WRAP, text='Picon not found'))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(59, 36), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(44, 27), png=loadPNG(png)))
                        start = sub(' - ..:..', '', start)
                        daynow = sub('....-..-', '', str(self.date))
                        day = search(', ([0-9]+). ', self.datum_string)
                        if day is not None:
                            day = day.group(1)
                        else:
                            day = daynow
                        if int(day) >= int(daynow) - 1:
                            date = str(self.date) + 'FIN'
                        else:
                            four_weeks = datetime.timedelta(weeks=4)
                            date = str(self.date + four_weeks) + 'FIN'
                        date = sub('[0-9][0-9]FIN', day, date)
                        timer = date + ':::' + start + ':::' + str(sref)
                        if timer in self.timer:
                            self.rec = True
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
            if y == 3:
                if self.filter == False:
                    x = sub('LINK', '', x)
                    self.searchlink.append(x)
            if y == 4:
                if self.filter == False:
                    x = sub('TITEL', '', x)
                    titelfilter = x
            if y == 5:
                if self.filter == False:
                    if search('GENRE', x) is None:
                        if self.picon == True:
                            if self.xd == False:
                                res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                            else:
                                res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        elif self.xd == False:
                            res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        y = 6
            if y == 6:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        if self.rec == True:
                            self.rec = False
                        else:
                            x = sub('INFO', '', x)
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 7:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 8:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 9:
                if search('INFO', x) is not None:
                    y = 7
                elif self.filter == False:
                    self.datum = False
                    if search('RATING', x) is not None:
                        x = sub('RATING', '', x)
                        if x != 'rating small':
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 10), size=(40, 40), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 16), size=(29, 29), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 0), size=(40, 40), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 1), size=(29, 29), png=loadPNG(png)))
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    else:
                        res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    self.searchentries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.picon == True:
            self['searchmenu'].l.setItemHeight(60)
        elif self.xd == False:
            self['searchmenu'].l.setItemHeight(40)
        else:
            self['searchmenu'].l.setItemHeight(30)
        self['searchmenu'].l.setList(self.searchentries)
        self['searchmenu'].show()
        self.searchcount += 1
        if self.searchcount <= self.maxsearchcount and search('class="pagination__link pagination__link--next" >', bereich) is not None:
            nextpage = search('<a href="(.*?)"\\n\\s+class="pagination__link pagination__link--next" >', bereich)
            if nextpage is not None:
                self.makeSearchView(nextpage.group(1))
            else:
                self.ready = True
        else:
            try:
                if self.searchref[-1] == 'na':
                    del self.searchref[-1]
                    del self.searchlink[-1]
                    del self.searchentries[-1]
                    self['searchmenu'].l.setList(self.searchentries)
            except IndexError:
                pass

            self['searchmenu'].moveToIndex(self.oldsearchindex)
            self.current = 'searchmenu'
            self.ready = True
        return

    def ok(self):
        if self.hideflag == False:
            return
        if self.current == 'menu' or self.current == 'searchmenu':
            self.selectPage('ok')
        elif self.current == 'postview' and self.postviewready == True:
            if self.trailer == True:
                sref = eServiceReference(4097, 0, self.trailerurl)
                sref.setName(self.name)
                self.session.open(MoviePlayer, sref)
            elif self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)

    def selectPage(self, action):
        if self.current == 'menu' and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                self.postlink = self.tvlink[c][1]
            except IndexError:
                pass

        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

        if action == 'ok' and self.ready == True:
            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.current = 'postview'
                self.downloadPostPage(self.postlink, self.makePostviewPage)
        return

    def getEPG(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.showEPG == False:
                self.showEPG = True
                if self.search == False:
                    try:
                        c = self['menu'].getSelectedIndex()
                        sref = self.sref[c][1]
                        channel = ServiceReference(eServiceReference(sref)).getServiceName()
                    except IndexError:
                        sref = None
                        channel = ''

                else:
                    try:
                        c = self['searchmenu'].getSelectedIndex()
                        sref = self.searchref[c]
                        channel = ServiceReference(eServiceReference(sref)).getServiceName()
                    except IndexError:
                        sref = None
                        channel = ''

                if sref is not None:
                    try:
                        start = self.start
                        s1 = sub(':..', '', start)
                        date = str(self.postdate) + 'FIN'
                        date = sub('..FIN', '', date)
                        date = date + self.day
                        parts = start.split(':')
                        seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                        start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                        s2 = sub(':..:..', '', start)
                        if int(s2) > int(s1):
                            start = str(self.date) + ' ' + start
                        else:
                            start = date + ' ' + start
                        start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                        start = int(mktime(start.timetuple()))
                        epgcache = eEPGCache.getInstance()
                        event = epgcache.startTimeQuery(eServiceReference(sref), start)
                        if event == -1:
                            try:
                                self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                            except (KeyError, NameError):
                                self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                        else:
                            event = epgcache.getNextTimeEntry()
                            self.EPGtext = event.getEventName()
                            short = event.getShortDescription()
                            ext = event.getExtendedDescription()
                            dur = '%d Minuten' % (event.getDuration() / 60)
                            if short and short != self.EPGtext:
                                self.EPGtext += '\n\n' + short
                            if ext:
                                self.EPGtext += '\n\n' + ext
                            if dur:
                                self.EPGtext += '\n\n' + dur
                    except:
                        try:
                            self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                        except (KeyError, NameError):
                            self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                else:
                    self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'
                if self.fontlarge == True:
                    if self.xd == False:
                        fill = '____________________________________________________________________________________________________________________________________\n%s' % channel
                    else:
                        fill = '________________________________________________________________________________________________________________________\n%s' % channel
                elif self.xd == False:
                    fill = '____________________________________________________________________________________________________________________________________________________\n%s' % channel
                else:
                    fill = '_________________________________________________________________________________________________________________________________________\n%s' % channel
                self.EPGtext += '\n\n' + fill
                self['textpage'].setText(self.EPGtext)
                self['textpage'].show()
            else:
                self.showEPG = False
                self['textpage'].setText(self.POSTtext)
                self['textpage'].show()
        elif self.current == 'menu' and self.ready == True and self.search == False:
            self.ready = False
            self.tventries = []
            self.tvlink = []
            self.tvtitel = []
            self.sref = []
            if self.jetzt == True:
                self.jetzt = False
                self.gleich = True
                self['label'].setText('Bitte warten...')
                self['label'].startBlinking()
                link = 'http://www.tvspielfilm.de/tv-programm/sendungen/?page=1&order=time&time=shortly'
                self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
            else:
                self.jetzt = True
                self.gleich = False
                self.abends = False
                self.nachts = False
                self['label'].setText('Bitte warten...')
                self['label'].startBlinking()
                link = 'http://www.tvspielfilm.de/tv-programm/sendungen/jetzt.html'
                self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
        else:
            self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def makeTimer(self):
        if config.plugins.tvspielfilm.autotimer.value == 'yes' and fileExists('/usr/lib/enigma2/python/Plugins/Extensions/AutoTimer/plugin.pyo'):
            self.autotimer = True
            self.session.openWithCallback(self.choiceTimer, ChoiceBox, title='Timer Auswahl', list=[('Timer', 'timer'), ('AutoTimer', 'autotimer')])
        else:
            self.autotimer = False
            self.red()

    def choiceTimer(self, choice):
        choice = choice and choice[1]
        if choice == 'autotimer':
            self.autotimer = True
            self.red()
        else:
            self.autotimer = False
            self.red()

    def red(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.search == False:
                try:
                    c = self['menu'].getSelectedIndex()
                    self.oldindex = c
                    sref = self.sref[c][1]
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            elif self.search == True:
                try:
                    c = self['searchmenu'].getSelectedIndex()
                    self.oldsearchindex = c
                    sref = self.searchref[c]
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            else:
                self.session.open(MessageBox, '\nTimer nicht m\xc3\xb6glich:\nKeine Service Reference vorhanden, der ausgew\xc3\xa4hlte Sender wurde nicht importiert.', MessageBox.TYPE_ERROR, close_on_any_key=True)
        elif self.current == 'menu' and self.ready == True:
            c = self['menu'].getSelectedIndex()
            self.oldindex = c
            try:
                self.postlink = self.tvlink[c][1]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.index = self.oldindex
                self.download(self.postlink, self.makePostTimer)
        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            self.oldsearchindex = c
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.download(self.postlink, self.makePostTimer)
        return

    def finishedTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer[0]:
            entry = answer[1]
            simulTimerList = self.session.nav.RecordTimer.record(entry)
            if simulTimerList is not None:
                for x in simulTimerList:
                    if x.setAutoincreaseEnd(entry):
                        self.session.nav.RecordTimer.timeChanged(x)

                simulTimerList = self.session.nav.RecordTimer.record(entry)
                if simulTimerList is not None:
                    self.session.openWithCallback(self.finishSanityCorrection, TimerSanityConflict, simulTimerList)
            self.makeTimerDB()
            self.ready = True
            self.postviewready = False
            self.current = self.oldcurrent
            if self.search == False:
                self.showProgrammPage()
                self.refresh()
            else:
                self.showsearch()
        else:
            self.ready = True
            self.postviewready = False
            self.current = self.oldcurrent
            if self.search == False:
                self.showProgrammPage()
            else:
                self.showsearch()
        return

    def finishSanityCorrection(self, answer):
        self.finishedTimer(answer)

    def finishedAutoTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.AutoTimerEditor import AutoTimerEditor
            answer, session = answer
            if config.plugins.tvspielfilm.fhd.value == 'yes':
                try:
                    gMainDC.getInstance().setResolution(1920, 1080)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 1080))
                except:
                    import traceback
                    traceback.print_exc()

            session.openWithCallback(self.finishedAutoTimerEdit, AutoTimerEditor, answer)

    def finishedAutoTimerEdit(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.plugin import autotimer
            if autotimer is None:
                from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                autotimer = AutoTimer()
            autotimer.add(answer)
            autotimer.writeXml()
        return

    def makeTimerDB(self):
        timerxml = open('/etc/enigma2/timers.xml').read()
        timer = re.findall('<timer begin="(.*?)" end=".*?" serviceref="(.*?)"', timerxml)
        timerfile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db'
        f = open(timerfile, 'w')
        data = ''
        idx = 0
        for x in timer:
            idx += 1

        for i in range(idx):
            try:
                timerstart = timer[i - 1][0]
                timerstart = int(timerstart) + int(config.recording.margin_before.value) * 60
                timerday = time.strftime('%Y-%m-%d', time.localtime(timerstart))
                timerhour = time.strftime('%H:%M', time.localtime(timerstart))
                timersref = timer[i - 1][1]
                data = data + timerday + ':::' + timerhour + ':::' + timersref + '\n'
            except IndexError:
                pass

        f.write(data)
        f.close()
        self.timer = data

    def green(self):
        if self.current == 'menu' and self.search == False:
            c = self['menu'].getSelectedIndex()
            try:
                sref = self.sref[c][1]
                if sref != '':
                    self.session.nav.playService(eServiceReference(sref))
                    if config.plugins.tvspielfilm.zapexit.value == 'yes' and self.standalone == True:
                        self.close()
            except IndexError:
                pass

        elif self.current == 'postview':
            self.wiki()

    def yellow(self):
        if self.current == 'postview':
            self.youTube()
        elif self.current == 'menu' and self.search == False and self.ready == True:
            try:
                c = self['menu'].getSelectedIndex()
                self.oldindex = c
                try:
                    titel = self.tvtitel[c][1]
                except IndexError:
                    pass

                self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='TV Spielfilm Suche:', text=titel)
            except IndexError:
                self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='TV Spielfilm Suche:', text='')

    def searchReturn(self, search):
        if search and search != '':
            self.searchstring = search
            self['menu'].hide()
            self['label'].setText('')
            self['label2'].setText('')
            self['label3'].setText('')
            self['label4'].setText('')
            self['searchlogo'].show()
            self['searchtimer'].show()
            self.searchlink = []
            self.searchref = []
            self.searchentries = []
            self.search = True
            self.datum = False
            self.filter = True
            search = search.replace(' ', '+')
            searchlink = 'http://www.tvspielfilm.de/suche/tvs-suche,,ApplicationSearch.html?tab=TV-Sendungen&q=' + search + '&page=1'
            self.maxsearchcount = config.plugins.tvspielfilm.maxsearch.value
            self.searchcount = 0
            self.makeSearchView(searchlink)

    def showsearch(self):
        self.postviewready = False
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['label'].setText('')
        self['label2'].setText('')
        self['label3'].setText('')
        self['label4'].setText('')
        self['searchmenu'].show()
        self['searchlogo'].show()
        self['searchtimer'].show()
        self['searchtext'].show()

    def pressText(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)
        elif self.current == 'menu' and self.ready == True:
            try:
                c = self['menu'].getSelectedIndex()
                channel = self.sref[c][0]
                link = 'http://www.tvspielfilm.de/tv-programm/sendungen/&page=0,' + str(channel) + '.html'
                self.session.open(TVProgrammView, link, True, False)
            except IndexError:
                pass

    def playTrailer(self):
        if self.current == 'postview' and self.postviewready == True and self.trailer == True:
            sref = eServiceReference(4097, 0, self.trailerurl)
            sref.setName(self.name)
            self.session.open(MoviePlayer, sref)

    def youTube(self):
        if self.current == 'postview' and self.postviewready == True:
            self.session.open(searchYouTube, self.name, self.movie)
        elif self.current == 'menu' and self.search == False and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                titel = self.tvtitel[c][1]
                self.session.open(searchYouTube, titel, self.movie)
            except IndexError:
                pass

    def wiki(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/Wikipedia.pyo'):
                from Plugins.Extensions.Wikipedia.Wikipedia import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/plugin.pyo'):
                from Plugins.Extensions.Wikipedia.plugin import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            else:
                self.session.openWithCallback(self.wikiInstall, MessageBox, '\nDas Wikipedia Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)
                return

    def wikiInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'wiki', True)

    def translator(self):
        if self.current == 'postview':
            if self.showEPG == False:
                text = self.POSTtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            else:
                text = self.EPGtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/EPGTranslator.pyo'):
                from Plugins.Extensions.EPGTranslator.EPGTranslator import translatorMain
                self.session.open(translatorMain, text)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/plugin.pyo'):
                from Plugins.Extensions.EPGTranslator.plugin import translatorMain
                self.session.open(translatorMain, text)
            else:
                self.session.openWithCallback(self.translatorInstall, MessageBox, '\nDas EPG Translator Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)
                return

    def translatorInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'translator', True)

    def IMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
                from Plugins.Extensions.IMDb.plugin import IMDB
                self.session.open(IMDB, self.name)
            else:
                self.session.openWithCallback(self.IMDbInstall, MessageBox, '\nDas IMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
                from Plugins.Extensions.TMDb.plugin import TMDbMain
                self.session.open(TMDbMain, self.name)
            else:
                self.session.openWithCallback(self.TMDbInstall, MessageBox, '\nDas TMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TVDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
                from Plugins.Extensions.TheTVDB.plugin import TheTVDBMain
                self.name = sub('Die ', '', self.name)
                self.session.open(TheTVDBMain, self.name)
            else:
                self.session.openWithCallback(self.TVDbInstall, MessageBox, '\nDas TheTVDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def IMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedIMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-imdb')

    def finishedIMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas IMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas IMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das IMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-tmdbinfo')

    def finishedTMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TVDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTVDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-thetvdb')

    def finishedTVDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TheTVDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TheTVDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TheTVDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def restartGUI(self, answer):
        if answer is True:
            try:
                self.session.open(TryQuitMainloop, 3)
            except RuntimeError:
                self.close()

    def gotoEnd(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            end = len(self.tventries) - 1
            self['menu'].moveToIndex(end)
        elif self.current != 'postview' and self.ready == True and self.search == True:
            end = len(self.searchentries) - 1
            self['searchmenu'].moveToIndex(end)

    def findPicon(self, sref):
        sref = sref + 'FIN'
        sref = sref.replace(':', '_')
        sref = sref.replace('_FIN', '')
        sref = sref.replace('FIN', '')
        pngname = self.piconfolder + sref + '.png'
        if fileExists(pngname):
            return pngname

    def getPicPost(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPicPost(self.picfile)

    def showPicPost(self, picpost):
        if self.xd == False:
            currPic = loadPic(picpost, 490, 245, 3, 0, 0, 0)
        else:
            currPic = loadPic(picpost, 400, 200, 3, 0, 0, 0)
        if currPic != None:
            self['picpost'].instance.setPixmap(currPic)
            self['piclabel'].show()
            self['piclabel2'].show()
            if self.trailer == True:
                self['cinlogo'].show()
                self['playlogo'].show()
        return

    def showPicTVinfo1(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo1'].instance.setPixmap(currPic)
        return

    def showPicTVinfo2(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo2'].instance.setPixmap(currPic)
        return

    def showPicTVinfo3(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo3'].instance.setPixmap(currPic)
        return

    def showPicTVinfo4(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo4'].instance.setPixmap(currPic)
        return

    def showPicTVinfo5(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo5'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def downloadFull(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadFullError)

    def downloadFullError(self, output):
        self['label'].setText('Text = Sender,        Info = Jetzt im TV/Gleich im TV')
        self['label'].stopBlinking()
        self['label'].show()
        self.ready = True

    def downloadPostPage(self, link, name):
        downloadPage(link, self.localhtml2).addCallback(name).addErrback(self.downloadError)

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadPageError)

    def downloadPageError(self, output):
        self['label'].setText('Text = Sender,        Info = Jetzt im TV/Gleich im TV')
        self['label'].stopBlinking()
        self['label'].show()
        self.ready = True

    def refresh(self):
        self.postviewready = False
        self.ready = False
        self.current = 'menu'
        self['label'].setText('Bitte warten...')
        self['label'].startBlinking()
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.sref = []
        if self.jetzt == True:
            link = 'http://www.tvspielfilm.de/tv-programm/sendungen/jetzt.html'
            self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
        elif self.gleich == True:
            link = 'http://www.tvspielfilm.de/tv-programm/sendungen/?page=1&order=time&time=shortly'
            self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
        elif self.abends == True:
            link = 'http://www.tvspielfilm.de/tv-programm/sendungen/abends.html'
            self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))
        else:
            link = 'http://www.tvspielfilm.de/tv-programm/sendungen/fernsehprogramm-nachts.html'
            self.makeTVTimer.callback.append(self.downloadFull(link, self.makeTVView))

    def showProgrammPage(self):
        self['label'].setText('Text = Sender,        Info = Jetzt im TV/Gleich im TV')
        self['label2'].setText('= Timer')
        self['label3'].setText('= Suche')
        self['label4'].setText('= Zappen')
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        self.current = 'menu'
        self['menu'].show()

    def down(self):
        try:
            if self.current == 'menu':
                self['menu'].down()
            elif self.current == 'searchmenu':
                self['searchmenu'].down()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def up(self):
        try:
            if self.current == 'menu':
                self['menu'].up()
            elif self.current == 'searchmenu':
                self['searchmenu'].up()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def rightDown(self):
        try:
            if self.current == 'menu':
                self['menu'].pageDown()
            elif self.current == 'searchmenu':
                self['searchmenu'].pageDown()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def leftUp(self):
        try:
            if self.current == 'menu':
                self['menu'].pageUp()
            elif self.current == 'searchmenu':
                self['searchmenu'].pageUp()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def zap(self):
        servicelist = self.session.instantiateDialog(ChannelSelection)
        self.session.execDialog(servicelist)

    def zapUp(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapUp(InfoBar.instance)

    def zapDown(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapDown(InfoBar.instance)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def picReturn(self):
        pass

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if self.current == 'menu' and self.search == False:
            if fileExists(self.picfile):
                os.remove(self.picfile)
            if fileExists(self.localhtml):
                os.remove(self.localhtml)
            if fileExists(self.localhtml2):
                os.remove(self.localhtml2)
            if self.standalone == True:
                config.usage.on_movie_stop.value = self.movie_stop
                config.usage.on_movie_eof.value = self.movie_eof
            self.close()
        elif self.current == 'searchmenu':
            self.search = False
            self.oldsearchindex = 1
            self['searchmenu'].hide()
            self['searchlogo'].hide()
            self['searchtimer'].hide()
            self['searchtext'].hide()
            self.setTitle('')
            self.setTitle(self.titel)
            self.showProgrammPage()
        elif self.current == 'postview' and self.search == False:
            self.postviewready = False
            self.setTitle('')
            self.setTitle(self.titel)
            self.showProgrammPage()
        elif self.current == 'postview' and self.search == True:
            self.postviewready = False
            self.showsearch()
            self.current = 'searchmenu'


class TVProgrammView(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="TV Programm - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,60" size="{size}" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="searchtimer" position="306,0" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,60" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,60" size="727,60" font="{font};24" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,120" size="992,360" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="306,60" size="400,200" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="391,216" size="90,22" font="{font};20" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="391,238" size="90,22" font="{font};16" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,60" size="252,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="685,60" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="685,90" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="685,120" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="685,150" size="317,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="65,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="120,185" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="65,210" size="45,15" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="267,60" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="463,138" size="85,45" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/play.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,270" size="992,235" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="987,270" size="20,235" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_235.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="150,5" size="712,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="376,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="486,27" size="80,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="596,27" size="100,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="352,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="462,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="572,27" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title="TV Programm - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,75" size="{size}" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="searchtimer" position="420,5" size="400,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search_timer.png" alphatest="blend" zPosition="3" />\n\t\t\t\t<widget name="searchlogo" position="5,75" size="200,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/search.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="searchtext" position="245,75" size="955,65" font="{font};26" valign="center" zPosition="1" />\n\t\t\t\t<widget name="searchmenu" position="10,140" size="1220,480" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="picpost" position="375,70" size="490,245" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="piclabel" position="476,265" size="100,25" font="{font};22" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="piclabel2" position="476,290" size="100,25" font="{font};18" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="infotext" position="10,70" size="310,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="855,70" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="855,105" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="855,140" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="855,175" size="375,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="tvinfo1" position="10,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo2" position="80,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo3" position="150,215" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo4" position="10,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="tvinfo5" position="80,245" size="60,20" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="325,70" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="565,163" size="109,58" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/playHD.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,325" size="1220,315" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="1214,325" size="22,315" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_315.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="220,10" size="800,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="469,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label3" position="594,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label4" position="719,32" size="100,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<ePixmap position="445,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="570,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="695,33" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'

    def __init__(self, session, link, eventview, tagestipp):
        self.eventview = eventview
        self.tagestipp = tagestipp
        if config.plugins.tvspielfilm.picon.value == 'yes':
            self.picon = True
            self.piconfolder = config.plugins.tvspielfilm.piconfolder.value
        else:
            self.picon = False
        self.servicefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/service.references'
        self.service_db = serviceDB(self.servicefile)
        if self.tagestipp == False:
            channel = re.findall(',(.*?).html', link)
            service = channel[0].lower()
            self.sref = self.service_db.lookup(service)
            if self.sref == 'nope':
                self.zap = False
                self.picon = False
            else:
                self.zap = True
                if self.picon == True:
                    self.piconname = self.findPicon(self.sref)
                    if self.piconname is None:
                        self.picon = False
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if self.picon == True:
                size = '1220,558'
            else:
                size = '1220,560'
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '30'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '22'
            else:
                self.fontlarge = False
                fontsize = '20'
            self.dict = {'position': position,
             'font': font,
             'size': size,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVProgrammView.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if self.picon == True:
                size = '992,434'
            else:
                size = '992,450'
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '20'
            else:
                self.fontlarge = False
                fontsize = '18'
            self.dict = {'position': position,
             'font': font,
             'size': size,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVProgrammView.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.localhtml2 = '/tmp/tvspielfilm2.html'
        self.current = 'menu'
        self.oldcurrent = 'menu'
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.searchlink = []
        self.searchref = []
        self.searchentries = []
        self.start = ''
        self.end = ''
        self.day = ''
        self.name = ''
        self.shortdesc = ''
        self.postlink = link
        self.link = link
        self.trailerurl = ''
        self.titel = ''
        self.POSTtext = ''
        self.EPGtext = ''
        self.hideflag = True
        self.primetime = False
        self.search = False
        self.rec = False
        self.ready = False
        self.postviewready = False
        self.mehrbilder = False
        self.trailer = False
        self.movie = False
        self.datum = False
        self.filter = True
        self.oldindex = 0
        self.oldsearchindex = 1
        self['picpost'] = Pixmap()
        self['tvinfo1'] = Pixmap()
        self['tvinfo2'] = Pixmap()
        self['tvinfo3'] = Pixmap()
        self['tvinfo4'] = Pixmap()
        self['tvinfo5'] = Pixmap()
        self['cinlogo'] = Pixmap()
        self['cinlogo'].hide()
        self['playlogo'] = Pixmap()
        self['playlogo'].hide()
        self['searchlogo'] = Pixmap()
        self['searchlogo'].hide()
        self['searchtimer'] = Pixmap()
        self['searchtimer'].hide()
        self['searchtext'] = Label('')
        self['searchtext'].hide()
        self['textpage'] = ScrollLabel('')
        self['infotext'] = Label('')
        self['infotext'].hide()
        self['infotext2'] = Label('')
        self['infotext2'].hide()
        self['infotext3'] = Label('')
        self['infotext3'].hide()
        self['infotext4'] = Label('')
        self['infotext4'].hide()
        self['infotext5'] = Label('')
        self['infotext5'].hide()
        self['infotext6'] = Label('')
        self['infotext6'].hide()
        self['infotext7'] = Label('')
        self['infotext7'].hide()
        self['infotext8'] = Label('')
        self['infotext8'].hide()
        self['piclabel'] = Label('')
        self['piclabel'].hide()
        self['piclabel2'] = Label('')
        self['piclabel2'].hide()
        self['slider_textpage'] = Pixmap()
        self['slider_textpage'].hide()
        self['searchmenu'] = ItemList([])
        self['searchmenu'].hide()
        self['menu'] = ItemList([])
        self['label'] = BlinkingLabel('Bitte warten...')
        self['label'].startBlinking()
        self['label2'] = Label('= Timer')
        self['label3'] = Label('= Suche')
        if self.eventview == False:
            self['label4'] = Label('= Zappen')
        else:
            self['label4'] = Label('= Refresh')
        self['actions'] = ActionMap(['OkCancelActions',
         'ChannelSelectBaseActions',
         'DirectionActions',
         'HelpActions',
         'EPGSelectActions',
         'InfobarTeletextActions',
         'NumberActions',
         'MoviePlayerActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'nextBouquet': self.nextDay,
         'prevBouquet': self.prevDay,
         'nextMarker': self.nextWeek,
         'prevMarker': self.prevWeek,
         '0': self.gotoEnd,
         '1': self.zapUp,
         '2': self.zapDown,
         '7': self.IMDb,
         '8': self.TMDb,
         '9': self.TVDb,
         'info': self.getEPG,
         'epg': self.getEPG,
         'leavePlayer': self.youTube,
         'startTeletext': self.pressText,
         'displayHelp': self.infoScreen}, -1)
        self['ColorActions'] = ActionMap(['ColorActions'], {'green': self.green,
         'yellow': self.yellow,
         'red': self.makeTimer,
         'blue': self.hideScreen}, -1)
        self.timer = open('/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db').read()
        self.date = datetime.date.today()
        one_day = datetime.timedelta(days=1)
        self.nextdate = self.date + one_day
        weekday = self.date.weekday()
        if weekday == 0:
            self.weekday = 'Montag'
        elif weekday == 1:
            self.weekday = 'Dienstag'
        elif weekday == 2:
            self.weekday = 'Mittwoch'
        elif weekday == 3:
            self.weekday = 'Donnerstag'
        elif weekday == 4:
            self.weekday = 'Freitag'
        elif weekday == 5:
            self.weekday = 'Samstag'
        elif weekday == 6:
            self.weekday = 'Sonntag'
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        if config.plugins.tvspielfilm.genreinfo.value == 'no':
            self.showgenre = False
        else:
            self.showgenre = True
        if self.eventview == True:
            self.movie_stop = config.usage.on_movie_stop.value
            self.movie_eof = config.usage.on_movie_eof.value
            config.usage.on_movie_stop.value = 'quit'
            config.usage.on_movie_eof.value = 'quit'
            from Components.ServiceEventTracker import ServiceEventTracker
            from enigma import iPlayableService
            self.__event_tracker = ServiceEventTracker(screen=self, eventmap={iPlayableService.evUpdatedEventInfo: self.zapRefresh})
            self.channel_db = channelDB(self.servicefile)
        elif self.tagestipp == False:
            nextday = sub('/sendungen/.*?html', '/sendungen/?page=1&order=time&date=', self.link)
            nextday = nextday + str(self.date)
            nextday = nextday + '&tips=0&time=day&channel=' + channel[0]
            self.link = nextday
        self.makeTVTimer = eTimer()
        if self.tagestipp == False:
            self.makeTVTimer.callback.append(self.downloadFullPage(self.link, self.makeTVView))
        else:
            self.current = 'postview'
            self['label'].stopBlinking()
            self['label'].show()
            self.makeTVTimer.callback.append(self.downloadPostPage(self.link, self.makePostviewPage))
        self.makeTVTimer.start(500, True)
        return

    def makeTVView(self, string):
        output = open(self.localhtml, 'r').read()
        titel = search('<title>(.*?)von', output)
        date = str(self.date.strftime('%d.%m.%Y'))
        self.titel = str(titel.group(1)) + ' - ' + str(self.weekday) + ', ' + date
        self.setTitle(self.titel)
        startpos = find(output, '<table class="info-table"')
        endpos = find(output, '<div class="block-in">')
        if endpos == -1:
            endpos = find(output, '<div class="two-blocks">')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('class="chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('<strong><a href="', '<td>LINK', bereich)
        bereich = sub('" target="_self" onclick', '</td>', bereich)
        bereich = sub('<li><strong>[0-9]+</strong></li>', '', bereich)
        bereich = sub('<strong>', '<td>TIME', bereich)
        bereich = sub('</a></strong>', '</td>', bereich)
        bereich = sub('</strong>', '</td>', bereich)
        bereich = sub('"saveRef..;" title="', '<td>TITEL', bereich)
        bereich = sub('" title="', '</td>', bereich)
        bereich = sub('"></span></td>', '</td>', bereich)
        bereich = sub('</span>', '</td>', bereich)
        bereich = sub('<span\n\\s+class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span>Spielfilm\n', '<td>SPARTESpielfilm</td>', bereich)
        bereich = sub('<span>Serie\n', '<td>SPARTESerie</td>', bereich)
        bereich = sub('<span>Report\n', '<td>SPARTEReport</td>', bereich)
        bereich = sub('<span>Unterhaltung\n', '<td>SPARTEUnterhaltung</td>', bereich)
        bereich = sub('<span>Kinder\n', '<td>SPARTEKinder</td>', bereich)
        bereich = sub('<span>Sport\n', '<td>SPARTESport</td>', bereich)
        today = datetime.date.today()
        one_day = datetime.timedelta(days=1)
        yesterday = today - one_day
        nowhour = datetime.datetime.now().hour
        if self.date == today and nowhour > 4 or self.date == yesterday and nowhour < 5:
            self.progress = True
            nowminute = datetime.datetime.now().minute
            nowsec = int(nowhour) * 3600 + int(nowminute) * 60
        else:
            self.progress = False
            self.percent = False
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 6
        for x in a:
            if y == 0:
                x = sub('LOGO', '', x)
                res = [x]
                if self.backcolor == True:
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 62), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(992, 62), font=0, backcolor_sel=self.back_color, text=''))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                if self.picon == True:
                    if fileExists(self.piconname):
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 1), size=(100, 60), png=LoadPixmap(self.piconname)))
                elif self.xd == False:
                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                    if fileExists(png):
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(59, 36), png=loadPNG(png)))
                else:
                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                    if fileExists(png):
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(44, 27), png=loadPNG(png)))
            if y == 1:
                x = sub('TIME', '', x)
                if self.progress == True:
                    start = sub(' - ..:..', '', x)
                    startparts = start.split(':')
                    startsec = int(startparts[0]) * 3600 + int(startparts[1]) * 60
                    end = sub('..:.. - ', '', x)
                    endparts = end.split(':')
                    endsec = int(endparts[0]) * 3600 + int(endparts[1]) * 60
                    if endsec >= startsec:
                        length = endsec - startsec
                    else:
                        length = 86400 - startsec + endsec
                    if nowsec < startsec and endsec > startsec:
                        percent = 0
                        self.percent = False
                    elif endsec < startsec:
                        if nowsec > startsec:
                            passed = nowsec - startsec
                            percent = passed * 100 / length
                            self.percent = True
                        elif nowsec < endsec:
                            passed = 86400 - startsec + nowsec
                            percent = passed * 100 / length
                            self.percent = True
                        elif nowsec - endsec < startsec - nowsec:
                            percent = 100
                            self.percent = False
                        else:
                            percent = 0
                            self.percent = False
                    elif nowsec > endsec:
                        percent = 100
                        self.percent = False
                    else:
                        passed = nowsec - startsec
                        percent = passed * 100 / length
                        self.percent = True
                if search('20:15 -', x) is not None or self.percent == True:
                    self.primetime = True
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(100, 18), size=(175, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                        else:
                            res.append(MultiContentEntryText(pos=(100, 19), size=(154, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(60, 7), size=(175, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(45, 3), size=(154, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                else:
                    self.primetime = False
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(100, 18), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                        else:
                            res.append(MultiContentEntryText(pos=(100, 19), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(60, 7), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(45, 3), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                start = sub(' - ..:..', '', x)
                hour = sub(':..', '', start)
                if int(hour) < 5 and len(self.tventries) > 6 or int(hour) < 5 and self.eventview == True:
                    one_day = datetime.timedelta(days=1)
                    date = self.date + one_day
                else:
                    date = self.date
                timer = str(date) + ':::' + start + ':::' + str(self.sref)
                if timer in self.timer:
                    self.rec = True
                    if self.picon == True:
                        if self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-small-recHD.png'
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1014, 11), size=(39, 40), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-small-rec.png'
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(815, 17), size=(28, 29), png=loadPNG(png)))
                    elif self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-small-recHD.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(1014, 0), size=(39, 40), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-small-rec.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(815, 1), size=(28, 29), png=loadPNG(png)))
            if y == 2:
                x = sub('LINK', '', x)
                self.tvlink.append(x)
            if y == 3:
                if search('TITEL', x) is not None:
                    x = sub('TITEL', '', x)
                    titel = x.split('">')
                    if self.showgenre == False:
                        x = titel[1]
                    else:
                        x = titel[0]
                    self.tvtitel.append(titel[1])
                    if self.picon == True:
                        if self.xd == False:
                            if self.progress == True and self.percent == True:
                                res.append(MultiContentEntryProgress(pos=(275, 24), size=(70, 14), percent=percent, borderWidth=1, foreColor=16777215))
                                res.append(MultiContentEntryText(pos=(365, 18), size=(690, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                            else:
                                res.append(MultiContentEntryText(pos=(275, 18), size=(1300, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))#=Sendung
                        elif self.progress == True and self.percent == True:
                            res.append(MultiContentEntryProgress(pos=(255, 26), size=(50, 10), percent=percent, borderWidth=1, foreColor=16777215))
                            res.append(MultiContentEntryText(pos=(325, 19), size=(520, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                        else:
                            res.append(MultiContentEntryText(pos=(255, 19), size=(590, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    elif self.xd == False:
                        if self.progress == True and self.percent == True:
                            res.append(MultiContentEntryProgress(pos=(235, 13), size=(70, 14), percent=percent, borderWidth=1, foreColor=16777215))
                            res.append(MultiContentEntryText(pos=(325, 7), size=(730, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                        else:
                            res.append(MultiContentEntryText(pos=(235, 7), size=(820, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    elif self.progress == True and self.percent == True:
                        res.append(MultiContentEntryProgress(pos=(200, 10), size=(50, 10), percent=percent, borderWidth=1, foreColor=16777215))
                        res.append(MultiContentEntryText(pos=(270, 3), size=(575, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(200, 3), size=(645, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                else:
                    y = 4
            if y == 4:
                if search('SPARTE', x) is not None:
                    x = sub('SPARTE', '', x)
                    if self.picon == True:
                        if self.primetime == False:
                            if self.xd == False:
                                res.append(MultiContentEntryText(pos=(1640, 18), size=(152, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))#Sparte
                            else:
                                res.append(MultiContentEntryText(pos=(855, 19), size=(135, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))
                        elif self.xd == False:
                            res.append(MultiContentEntryText(pos=(1640, 18), size=(152, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))
                        else:
                            res.append(MultiContentEntryText(pos=(855, 19), size=(135, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))
                    elif self.primetime == False:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(1065, 7), size=(152, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))
                        else:
                            res.append(MultiContentEntryText(pos=(855, 3), size=(135, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(1065, 7), size=(152, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(855, 3), size=(135, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_RIGHT, text=x))
                else:
                    y = 5
            if y == 5:
                if search('RATING', x) is not None:
                    x = sub('RATING', '', x)
                    if self.rec == True:
                        self.rec = False
                    elif x != 'rating small':
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1640, 11), size=(40, 40), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(855, 17), size=(29, 29), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1054, 0), size=(40, 40), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(855, 1), size=(29, 29), png=loadPNG(png)))
                    self.tventries.append(res)
                else:
                    self.tventries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.picon == True:
            self['menu'].l.setItemHeight(62)
        elif self.xd == False:
            self['menu'].l.setItemHeight(40)
        else:
            self['menu'].l.setItemHeight(30)
        self['menu'].l.setList(self.tventries)
        self['menu'].moveToIndex(self.oldindex)
        if search('class="pagination__link pagination__link--next" >', bereich) is not None:
            link = search('<a href="(.*?)"\\n\\s+class="pagination__link pagination__link--next" >', bereich)
            if link is not None:
                self.makeTVTimer.callback.append(self.downloadFullPage(link.group(1), self.makeTVView))
            else:
                self.ready = True
        else:
            self.ready = True
            if self.eventview == False:
                self['label'].setText('Bouquet = +- Tag, <> = +- Woche')
                self['label'].stopBlinking()
                self['label'].show()
            else:
                self['label'].setText('Bouquet = +- Tag, <> = +- Woche, 1/2 = Zap Up/Down')
                self['label'].stopBlinking()
                self['label'].show()
        if self.eventview == True and config.plugins.tvspielfilm.eventview.value == 'info':
            self.postlink = self.tvlink[0]
            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.current = 'postview'
                self.downloadPostPage(self.postlink, self.makePostviewPage)
            else:
                self.ready = True
        return

    def makePostviewPage(self, string):
        output = open(self.localhtml2, 'r').read()
        self['label2'].setText('= Timer')
        self['label3'].setText('= YouTube')
        self['label4'].setText('= Wikipedia')
        self['menu'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        output = sub('</dl>.\n\\s+</div>.\n\\s+</section>', '</cast>', output)
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('</cast>')
            if endpos == -1:
                endpos = output.find('<h2 class="broadcast-info">')
                if endpos == -1:
                    endpos = output.find('<div class="OUTBRAIN"')
                    if endpos == -1:
                        endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('\r', '', bereich)
        bereich = re.sub('<ul class="slidelist">.*?</ul>', '', bereich, flags=re.S)
        bereich = re.sub('<script.*?</script>', '', bereich, flags=re.S)
        bereich = re.sub('<style.*?</style>', '', bereich, flags=re.S)
        bereich = re.sub('<div class="text" id=".*?</div>', '', bereich, flags=re.S)
        if search('rl: .https://video.tvspielfilm.de/.*?mp4', output) is not None:
            trailerurl = search('rl: .https://video.tvspielfilm.de/(.*?).mp4', output)
            self.trailerurl = 'https://video.tvspielfilm.de/' + trailerurl.group(1) + '.mp4'
            self.trailer = True
        else:
            self.trailer = False
        bereich = sub('" alt=".*?" width="', '" width="', bereich)
        picurl = search('<img src="(.*?)" width="', bereich)
        if picurl is not None:
            self.download(picurl.group(1), self.getPicPost)
            self['picpost'].show()
        else:
            picurl = search('<meta property="og:image" content="(.*?)"', output)
            if picurl is not None:
                self.download(picurl.group(1), self.getPicPost)
                self['picpost'].show()
            else:
                picurl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/TV-Spielfilm-Logo.svg/500px-TV-Spielfilm-Logo.svg.png'
                self.download(picurl, self.getPicPost)
                self['picpost'].show()
        if self.search == False:
            title = search('<title>(.*?)</title>', output)
            self.title = transHTML(title.group(1))
            self.setTitle(self.title)
        if search('<ul class="rating-dots">', bereich) is not None:
            self.movie = True
        else:
            self.movie = False
        if search('<div class="film-gallery">', output) is not None:
            self.mehrbilder = True
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Fotostrecke, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        else:
            self.mehrbilder = False
            if self.trailer == True:
                self['label'].setText('OK = Zum Video, Text = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
            else:
                self['label'].setText('OK = Vollbild, 7/8/9 = IMDb/TMDb/TVDb, Info = EPG')
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        try:
            parts = infotext[0].split(', ')
            self['infotext'].setText(parts[0])
            self['infotext'].show()
        except IndexError:
            self['infotext'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext2'].setText(parts[1])
            self['infotext2'].show()
        except IndexError:
            self['infotext2'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext3'].setText(parts[2])
            self['infotext3'].show()
        except IndexError:
            self['infotext3'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext4'].setText(parts[0])
            self['infotext4'].show()
        except IndexError:
            self['infotext4'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext5'].setText(parts[1])
            self['infotext5'].show()
        except IndexError:
            self['infotext5'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext6'].setText(parts[2])
            self['infotext6'].show()
        except IndexError:
            self['infotext6'].setText('')

        try:
            parts = infotext[2].split(', ')
            self['infotext7'].setText(parts[0] + ', ' + parts[1])
            self['infotext7'].show()
        except IndexError:
            self['infotext7'].setText('')

        try:
            self['infotext8'].setText(infotext[3])
            self['infotext8'].show()
        except IndexError:
            self['infotext8'].setText('')

        tvinfo = re.findall('<span class="add-info (.*?)">', bereich)
        try:
            if self.xd == False:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + 'HD.png'
            else:
                tvinfo1 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[0] + '.png'
            self.showPicTVinfo1(tvinfo1)
            self['tvinfo1'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + 'HD.png'
            else:
                tvinfo2 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[1] + '.png'
            self.showPicTVinfo2(tvinfo2)
            self['tvinfo2'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + 'HD.png'
            else:
                tvinfo3 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[2] + '.png'
            self.showPicTVinfo3(tvinfo3)
            self['tvinfo3'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + 'HD.png'
            else:
                tvinfo4 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[3] + '.png'
            self.showPicTVinfo4(tvinfo4)
            self['tvinfo4'].show()
        except IndexError:
            pass

        try:
            if self.xd == False:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + 'HD.png'
            else:
                tvinfo5 = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/' + tvinfo[4] + '.png'
            self.showPicTVinfo5(tvinfo5)
            self['tvinfo5'].show()
        except IndexError:
            pass

        self['piclabel'].setText(self.start[0:5])
        try:
            parts = infotext[0].split(', ')
            text = shortenChannel(parts[2])
            self['piclabel2'].setText(text[0:10])
        except IndexError:
            self['piclabel2'].setText('')

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        if self.tagestipp == True:
            channel = re.findall("var adsc_sender = '(.*?)'", output)
            try:
                self.sref = self.service_db.lookup(channel[0])
                if self.sref != 'nope':
                    self.zap = True
            except IndexError:
                pass

        bereich = sub('<blockquote class="broadcast-detail__quote">\n\\s+<p>', '<p>>> ', bereich)
        bereich = sub('</p>\n[ ]+</blockquote>', ' <<</p>', bereich)
        bereich = sub('<section class="serial-info">\n\\s+', '<p>', bereich)
        bereich = sub('</section>', '</p>', bereich)
        bereich = sub('</span>\\s+', '</span>, ', bereich)
        bereich = sub('<li class="titleName">', '</p><p> \xc2\xb7 ', bereich)
        bereich = sub('<li class="subtitleName">', '#sub#', bereich)
        bereich = sub('ShowView [0-9-]+', '', bereich)
        bereich = sub('<a href=".*?">', '', bereich)
        bereich = sub('<h1.*?>', '<p>', bereich)
        bereich = sub('</h1>', '</p>', bereich)
        bereich = sub('<h3.*?>', '<p>', bereich)
        bereich = sub('</h3>', '</p>', bereich)
        bereich = sub('<br/>', '</p><p>', bereich)
        bereich = sub('<p>\n', '<p>', bereich)
        bereich = sub('<dt>', '<p>', bereich)
        bereich = sub('<dt class="role">', '<p>', bereich)
        bereich = sub('</dt>\n\\s+<dd>\n\\s+', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd>', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd class="name">', ': ', bereich)
        bereich = sub('\n[ ]+,', ',', bereich)
        bereich = sub(', [ ]+', ', ', bereich)
        bereich = sub('</a>', '</p>', bereich)
        bereich = sub('\n\\s+</dd>', '</p>', bereich)
        bereich = sub('</a></dd>', '</p>', bereich)
        bereich = sub('</dd>', '</p>', bereich)
        bereich = sub('</dt>', '</p>', bereich)
        text = ''
        a = findall('<p.*?>(.*?)</p>', bereich)
        for x in a:
            if x != '':
                text = text + x + '\n\n'

        text = sub('<[^>]*>', '', text)
        text = sub('</p<<p<', '\n\n', text)
        text = sub('\n\\s+\n*', '\n\n', text)
        text = sub('#sub#', '\n  ', text)
        if self.fontlarge == True:
            if self.xd == False:
                fill = '____________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
            else:
                fill = '________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        elif self.xd == False:
            fill = '____________________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        else:
            fill = '_________________________________________________________________________________________________________________________________________\nTV Spielfilm Online\n\n*Info/EPG = EPG einblenden'
        self.POSTtext = text + fill
        self['textpage'].setText(self.POSTtext)
        self['textpage'].show()
        self['slider_textpage'].show()
        self.showEPG = False
        self.postviewready = True
        return

    def makePostTimer(self, output):
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('<h2 class="broadcast-info">')
            if endpos == -1:
                endpos = output.find('<div class="OUTBRAIN"')
                if endpos == -1:
                    endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        infotext = re.findall('<span class="text-row">(.*?)<', bereich)
        try:
            parts = infotext[0].split(', ')
            x = parts[0]
            if x == 'Heute':
                d = sub('....-', '', str(self.date))
                d2 = sub('-..', '', d)
                d3 = sub('..-', '', d)
                x = 'he ' + d3 + '.' + d2 + '.'
            day = sub('.. ', '', x)
            self.day = sub('[.]..[.]', '', day)
            month = sub('.. ..[.]', '', x)
            month = sub('[.]', '', month)
            date = str(self.date) + 'FIN'
            year = sub('......FIN', '', date)
            self.postdate = year + '-' + month + '-' + self.day
            today = datetime.date(int(year), int(month), int(self.day))
            one_day = datetime.timedelta(days=1)
            self.nextdate = today + one_day
        except:
            pass

        try:
            parts = infotext[0].split(', ')
            x = parts[1]
            start = sub(' - ..:..', '', x)
            start = start + ':00'
            end = sub('..:.. - ', '', x)
            end = end + ':00'
            self.start = start
            self.end = end
        except IndexError:
            pass

        shortdesc = search('<section class="serial-info">\\n\\s+(.*?)</section>', bereich)
        if shortdesc is not None:
            self.shortdesc = sub('<span class="info">', '', shortdesc.group(1))
            self.shortdesc = sub('</span>\\s+', ', ', self.shortdesc)
            self.shortdesc = sub('  ', '', self.shortdesc)
        else:
            self.shortdesc = ''
        name = re.findall('<h1 class="headline headline--article">(.*?)</h1>', bereich)
        try:
            self.name = name[0]
        except IndexError:
            name = re.findall('<span itemprop="name"><strong>(.*?)</strong></span>', bereich)
            try:
                self.name = name[0]
            except IndexError:
                self.name = ''

        self.current = 'postview'
        self.postviewready = True
        self.red()
        return

    def makeSearchView(self, url):
        header = {'User-Agent': 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100627 Firefox/3.6.6',
         'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
         'Accept-Language': 'en-us,en;q=0.5'}
        searchrequest = Request(url, None, header)
        try:
            output = urlopen(searchrequest).read()
        except (HTTPError,
         URLError,
         HTTPException,
         socket.error,
         AttributeError):
            output = ' '

        title = search('<title>(.*?)</title>', output)
        if title is not None:
            self['searchtext'].setText(title.group(1))
            self['searchtext'].show()
            self.setTitle('')
            self.setTitle(title.group(1))
        startpos = find(output, '<table class="primetime-table">')
        endpos = find(output, '</table>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('<span>TV-Sendungen am', '<td>DATUMTV-Sendungen am', bereich)
        bereich = sub('class="search-starttimes">\n\\s+<span>', '<td>TIME', bereich)
        bereich = sub('<h3><a href="', '<td>LINK', bereich)
        if self.showgenre == False:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title=".*?">', '</td><td>TITEL', bereich)
            bereich = sub('</a></h3>', '</td>', bereich)
        else:
            bereich = sub('" target="_self" onclick="saveRef[(][)];" title="', '</td><td>TITEL', bereich)
            bereich = sub('">.*?</a></h3>', '</td>', bereich)
        bereich = sub('<span class="logotype chl_bg_. c-', '<td>LOGO', bereich)
        bereich = sub('<p>', '<td>GENRE', bereich)
        bereich = sub('<li class="', '<td>INFO', bereich)
        bereich = sub('<span\n\\s+class="editorial-', '<td>RATING', bereich)
        bereich = sub('<span class="editorial-', '<td>RATING', bereich)
        bereich = sub('"></span>', '', bereich)
        bereich = sub('</span>\n', '</td>', bereich)
        bereich = sub('</span>', '', bereich)
        bereich = sub('\n\\s+</div>\n', '</td>', bereich)
        bereich = sub('\n.*?</p>', '</td>', bereich)
        bereich = sub('"></li>', '</td>', bereich)
        bereich = sub('\n.*?<br/><em class=".*?</em>', '', bereich)
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 10
        for x in a:
            if y == 0:
                res = [x]
                if self.backcolor == True:
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                if search('DATUM', x) is not None:
                    if self.datum == True:
                        try:
                            del self.searchref[-1]
                            del self.searchlink[-1]
                            del self.searchentries[-1]
                        except IndexError:
                            pass

                    else:
                        self.datum = True
                    x = sub('DATUM', '', x)
                    self.datum_string = x
                    res_datum = [x]
                    if self.backcolor == True:
                        if self.picon == True:
                            if self.xd == False:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, backcolor_sel=self.back_color, text=''))
                            else:
                                res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, backcolor_sel=self.back_color, text=''))
                        elif self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, backcolor_sel=self.back_color, text=''))
                    if self.picon == True:
                        if self.xd == False:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 60), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                        else:
                            res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 60), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    elif self.xd == False:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(1220, 40), font=-1, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    else:
                        res_datum.append(MultiContentEntryText(pos=(0, 0), size=(992, 30), font=0, color=16777215, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER, text=x))
                    self.searchref.append('na')
                    self.searchlink.append('na')
                    self.searchentries.append(res_datum)
                    self.filter = True
                    y = 9
                else:
                    y = 1
            if y == 1:
                x = sub('TIME', '', x)
                start = x
                if self.picon == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(100, 17), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(100, 18), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                elif self.xd == False:
                    res.append(MultiContentEntryText(pos=(60, 7), size=(175, 40), font=-1, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(45, 3), size=(154, 30), font=0, color=10857646, color_sel=16777215, flags=RT_HALIGN_CENTER, text=x))
            if y == 2:
                if search('LOGO', x) is not None:
                    logo = search('LOGO(.*?)">', x)
                    if logo is not None:
                        x = logo.group(1)
                    service = x
                    sref = self.service_db.lookup(service)
                    if sref == 'nope':
                        self.filter = True
                    else:
                        self.filter = False
                        self.searchref.append(sref)
                        if self.picon == True:
                            picon = self.findPicon(sref)
                            if picon is not None:
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 0), size=(100, 60), png=LoadPixmap(picon)))
                            else:
                                res.append(MultiContentEntryText(pos=(0, 0), size=(100, 60), font=1, color=10857646, color_sel=16777215, flags=RT_HALIGN_LEFT | RT_VALIGN_CENTER | RT_WRAP, text='Picon not found'))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(59, 36), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/logos/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(0, 2), size=(44, 27), png=loadPNG(png)))
                        start = sub(' - ..:..', '', start)
                        daynow = sub('....-..-', '', str(self.date))
                        day = search(', ([0-9]+). ', self.datum_string)
                        if day is not None:
                            day = day.group(1)
                        else:
                            day = daynow
                        if int(day) >= int(daynow) - 1:
                            date = str(self.date) + 'FIN'
                        else:
                            four_weeks = datetime.timedelta(weeks=4)
                            date = str(self.date + four_weeks) + 'FIN'
                        date = sub('[0-9][0-9]FIN', day, date)
                        timer = date + ':::' + start + ':::' + str(sref)
                        if timer in self.timer:
                            self.rec = True
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-recHD.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-rec.png'
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
            if y == 3:
                if self.filter == False:
                    x = sub('LINK', '', x)
                    self.searchlink.append(x)
            if y == 4:
                if self.filter == False:
                    x = sub('TITEL', '', x)
                    titelfilter = x
            if y == 5:
                if self.filter == False:
                    if search('GENRE', x) is None:
                        if self.picon == True:
                            if self.xd == False:
                                res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                            else:
                                res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        elif self.xd == False:
                            res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        y = 6
            if y == 6:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        if self.rec == True:
                            self.rec = False
                        else:
                            x = sub('INFO', '', x)
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 20), size=(60, 20), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 23), size=(45, 15), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1100, 10), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(898, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 7:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(1030, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 8:
                if search('INFO', x) is not None:
                    if self.filter == False:
                        x = sub('INFO', '', x)
                        if self.picon == True:
                            if self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 20), size=(60, 20), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 23), size=(45, 15), png=loadPNG(png)))
                        elif self.xd == False:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(960, 10), size=(60, 20), png=loadPNG(png)))
                        else:
                            png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                            if fileExists(png):
                                res.append(MultiContentEntryPixmapAlphaTest(pos=(788, 8), size=(45, 15), png=loadPNG(png)))
                else:
                    y = 9
            if y == 9:
                if search('INFO', x) is not None:
                    y = 7
                elif self.filter == False:
                    self.datum = False
                    if search('RATING', x) is not None:
                        x = sub('RATING', '', x)
                        if x != 'rating small':
                            if self.picon == True:
                                if self.xd == False:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 10), size=(40, 40), png=loadPNG(png)))
                                else:
                                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                    if fileExists(png):
                                        res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 16), size=(29, 29), png=loadPNG(png)))
                            elif self.xd == False:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%sHD.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(1175, 0), size=(40, 40), png=loadPNG(png)))
                            else:
                                png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/%s.png' % x
                                if fileExists(png):
                                    res.append(MultiContentEntryPixmapAlphaTest(pos=(958, 1), size=(29, 29), png=loadPNG(png)))
                    if self.picon == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(275, 17), size=(675, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                        else:
                            res.append(MultiContentEntryText(pos=(255, 18), size=(523, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    elif self.xd == False:
                        res.append(MultiContentEntryText(pos=(235, 7), size=(715, 40), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    else:
                        res.append(MultiContentEntryText(pos=(200, 3), size=(578, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=titelfilter))
                    self.searchentries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.picon == True:
            self['searchmenu'].l.setItemHeight(60)
        elif self.xd == False:
            self['searchmenu'].l.setItemHeight(40)
        else:
            self['searchmenu'].l.setItemHeight(30)
        self['searchmenu'].l.setList(self.searchentries)
        self['searchmenu'].show()
        self.searchcount += 1
        if self.searchcount <= self.maxsearchcount and search('class="pagination__link pagination__link--next" >', bereich) is not None:
            nextpage = search('<a href="(.*?)"\\n\\s+class="pagination__link pagination__link--next" >', bereich)
            if nextpage is not None:
                self.makeSearchView(nextpage.group(1))
            else:
                self.ready = True
        else:
            try:
                if self.searchref[-1] == 'na':
                    del self.searchref[-1]
                    del self.searchlink[-1]
                    del self.searchentries[-1]
                    self['searchmenu'].l.setList(self.searchentries)
            except IndexError:
                pass

            self['searchmenu'].moveToIndex(self.oldsearchindex)
            self.current = 'searchmenu'
            self.ready = True
        return

    def ok(self):
        if self.hideflag == False:
            return
        if self.current == 'menu' or self.current == 'searchmenu':
            self.selectPage('ok')
        elif self.current == 'postview' and self.postviewready == True:
            if self.trailer == True:
                sref = eServiceReference(4097, 0, self.trailerurl)
                sref.setName(self.name)
                self.session.open(MoviePlayer, sref)
            elif self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)

    def selectPage(self, action):
        if self.current == 'menu' and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                self.postlink = self.tvlink[c]
            except IndexError:
                pass

        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

        if action == 'ok' and self.ready == True:
            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.current = 'postview'
                self.downloadPostPage(self.postlink, self.makePostviewPage)
        return

    def getEPG(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.showEPG == False:
                self.showEPG = True
                if self.zap == True and self.search == False:
                    sref = self.sref
                    channel = ServiceReference(eServiceReference(sref)).getServiceName()
                elif self.search == True:
                    try:
                        c = self['searchmenu'].getSelectedIndex()
                        sref = self.searchref[c]
                        channel = ServiceReference(eServiceReference(sref)).getServiceName()
                    except IndexError:
                        sref = None
                        channel = ''

                else:
                    sref = None
                    channel = ''
                if sref is not None:
                    try:
                        start = self.start
                        s1 = sub(':..', '', start)
                        date = str(self.postdate) + 'FIN'
                        date = sub('..FIN', '', date)
                        date = date + self.day
                        parts = start.split(':')
                        seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                        start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                        s2 = sub(':..:..', '', start)
                        if int(s2) > int(s1):
                            start = str(self.date) + ' ' + start
                        else:
                            start = date + ' ' + start
                        start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                        start = int(mktime(start.timetuple()))
                        epgcache = eEPGCache.getInstance()
                        event = epgcache.startTimeQuery(eServiceReference(sref), start)
                        if event == -1:
                            try:
                                self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                            except (KeyError, NameError):
                                self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                        else:
                            event = epgcache.getNextTimeEntry()
                            self.EPGtext = event.getEventName()
                            short = event.getShortDescription()
                            ext = event.getExtendedDescription()
                            dur = '%d Minuten' % (event.getDuration() / 60)
                            if short and short != self.EPGtext:
                                self.EPGtext += '\n\n' + short
                            if ext:
                                self.EPGtext += '\n\n' + ext
                            if dur:
                                self.EPGtext += '\n\n' + dur
                    except:
                        try:
                            self.EPGtext = 'Noch keine EPG Informationen verf\xfcgbar\n\nEPG Vorschauzeit: %s Tage\nEPG Vorhaltezeit: %s Stunden' % (str(config.misc.epgcache_timespan.value), str(config.misc.epgcache_outdated_timespan.value))
                        except (KeyError, NameError):
                            self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'

                else:
                    self.EPGtext = 'Keine EPG Informationen verf\xfcgbar'
                if self.fontlarge == True:
                    if self.xd == False:
                        fill = '____________________________________________________________________________________________________________________________________\n%s' % channel
                    else:
                        fill = '________________________________________________________________________________________________________________________\n%s' % channel
                elif self.xd == False:
                    fill = '____________________________________________________________________________________________________________________________________________________\n%s' % channel
                else:
                    fill = '_________________________________________________________________________________________________________________________________________\n%s' % channel
                self.EPGtext += '\n\n' + fill
                self['textpage'].setText(self.EPGtext)
                self['textpage'].show()
            else:
                self.showEPG = False
                self['textpage'].setText(self.POSTtext)
                self['textpage'].show()
        else:
            self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def makeTimer(self):
        if config.plugins.tvspielfilm.autotimer.value == 'yes' and fileExists('/usr/lib/enigma2/python/Plugins/Extensions/AutoTimer/plugin.pyo'):
            self.autotimer = True
            self.session.openWithCallback(self.choiceTimer, ChoiceBox, title='Timer Auswahl', list=[('Timer', 'timer'), ('AutoTimer', 'autotimer')])
        else:
            self.autotimer = False
            self.red()

    def choiceTimer(self, choice):
        choice = choice and choice[1]
        if choice == 'autotimer':
            self.autotimer = True
            self.red()
        else:
            self.autotimer = False
            self.red()

    def red(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.zap == True and self.search == False:
                try:
                    c = self['menu'].getSelectedIndex()
                    self.oldindex = c
                    sref = self.sref
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            elif self.search == True:
                try:
                    c = self['searchmenu'].getSelectedIndex()
                    self.oldsearchindex = c
                    sref = self.searchref[c]
                    serviceref = ServiceReference(sref)
                except IndexError:
                    serviceref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())

                try:
                    start = self.start
                    s1 = sub(':..', '', start)
                    date = str(self.postdate) + 'FIN'
                    date = sub('..FIN', '', date)
                    date = date + self.day
                    parts = start.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds -= int(config.recording.margin_before.value) * 60
                    start = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    s2 = sub(':..:..', '', start)
                    if int(s2) > int(s1):
                        start = str(self.date) + ' ' + start
                    else:
                        start = date + ' ' + start
                    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
                    end = self.end
                    parts = end.split(':')
                    seconds = int(parts[0]) * 3600 + int(parts[1]) * 60
                    seconds += int(config.recording.margin_after.value) * 60
                    end = time.strftime('%H:%M:%S', time.gmtime(seconds))
                    e2 = sub(':..:..', '', end)
                    if int(s2) > int(e2):
                        end = str(self.nextdate) + ' ' + end
                    else:
                        end = date + ' ' + end
                    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
                except IndexError:
                    pass

                name = self.name
                shortdesc = self.shortdesc
                if search('Staffel [0-9]+, Folge [0-9]+', shortdesc) is not None:
                    episode = search('(Staffel [0-9]+, Folge [0-9]+)', shortdesc)
                    episode = sub('Staffel ', 'S', episode.group(1))
                    episode = sub(', Folge ', 'E', episode)
                    name = name + ' ' + episode
                data = (int(mktime(start.timetuple())),
                 int(mktime(end.timetuple())),
                 name,
                 shortdesc,
                 None)
                newEntry = RecordTimerEntry(serviceref, checkOldTimers=True, *data)
                if self.autotimer == False:
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedTimer, TimerEntry, newEntry)
                else:
                    from Plugins.Extensions.AutoTimer.AutoTimerImporter import AutoTimerImporter
                    from Plugins.Extensions.AutoTimer.plugin import autotimer
                    if autotimer is None:
                        from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                        autotimer = AutoTimer()
                    autotimer.readXml()
                    newTimer = autotimer.defaultTimer.clone()
                    newTimer.id = autotimer.getUniqueId()
                    newTimer.name = self.name
                    newTimer.match = ''
                    newTimer.enabled = True
                    if config.plugins.tvspielfilm.fhd.value == 'yes':
                        try:
                            gMainDC.getInstance().setResolution(1920, 1080)
                            desktop = getDesktop(0)
                            desktop.resize(eSize(1920, 1080))
                        except:
                            import traceback
                            traceback.print_exc()

                    self.session.openWithCallback(self.finishedAutoTimer, AutoTimerImporter, newTimer, self.name, int(mktime(start.timetuple())), int(mktime(end.timetuple())), None, serviceref, None, None, None, None)
            else:
                self.session.open(MessageBox, '\nTimer nicht m\xc3\xb6glich:\nKeine Service Reference vorhanden, der ausgew\xc3\xa4hlte Sender wurde nicht importiert.', MessageBox.TYPE_ERROR, close_on_any_key=True)
        elif self.current == 'menu' and self.ready == True and self.zap == True:
            c = self['menu'].getSelectedIndex()
            self.oldindex = c
            try:
                self.postlink = self.tvlink[c]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.download(self.postlink, self.makePostTimer)
        elif self.current == 'searchmenu':
            c = self['searchmenu'].getSelectedIndex()
            self.oldsearchindex = c
            try:
                self.postlink = self.searchlink[c]
            except IndexError:
                pass

            if search('www.tvspielfilm.de', self.postlink) is not None:
                self.oldcurrent = self.current
                self.download(self.postlink, self.makePostTimer)
        else:
            self.session.open(MessageBox, '\nTimer nicht m\xc3\xb6glich:\nKeine Service Reference vorhanden, der ausgew\xc3\xa4hlte Sender wurde nicht importiert.', MessageBox.TYPE_ERROR, close_on_any_key=True)
        return

    def finishedTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer[0]:
            entry = answer[1]
            simulTimerList = self.session.nav.RecordTimer.record(entry)
            if simulTimerList is not None:
                for x in simulTimerList:
                    if x.setAutoincreaseEnd(entry):
                        self.session.nav.RecordTimer.timeChanged(x)

                simulTimerList = self.session.nav.RecordTimer.record(entry)
                if simulTimerList is not None:
                    self.session.openWithCallback(self.finishSanityCorrection, TimerSanityConflict, simulTimerList)
            self.makeTimerDB()
            if self.tagestipp == False:
                self.ready = True
                self.postviewready = False
                self.current = self.oldcurrent
                if self.search == False:
                    self.showProgrammPage()
                    self.refresh()
                else:
                    self.showsearch()
        elif self.tagestipp == False:
            self.ready = True
            self.postviewready = False
            self.current = self.oldcurrent
            if self.search == False:
                self.showProgrammPage()
            else:
                self.showsearch()
        return

    def finishSanityCorrection(self, answer):
        self.finishedTimer(answer)

    def finishedAutoTimer(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.AutoTimerEditor import AutoTimerEditor
            answer, session = answer
            if config.plugins.tvspielfilm.fhd.value == 'yes':
                try:
                    gMainDC.getInstance().setResolution(1920, 1080)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 1080))
                except:
                    import traceback
                    traceback.print_exc()

            session.openWithCallback(self.finishedAutoTimerEdit, AutoTimerEditor, answer)

    def finishedAutoTimerEdit(self, answer):
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1240, 720)
                desktop = getDesktop(0)
                desktop.resize(eSize(1240, 720))
            except:
                import traceback
                traceback.print_exc()

        if answer:
            from Plugins.Extensions.AutoTimer.plugin import autotimer
            if autotimer is None:
                from Plugins.Extensions.AutoTimer.AutoTimer import AutoTimer
                autotimer = AutoTimer()
            autotimer.add(answer)
            autotimer.writeXml()
        return

    def makeTimerDB(self):
        timerxml = open('/etc/enigma2/timers.xml').read()
        timer = re.findall('<timer begin="(.*?)" end=".*?" serviceref="(.*?)"', timerxml)
        timerfile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db'
        f = open(timerfile, 'w')
        data = ''
        idx = 0
        for x in timer:
            idx += 1

        for i in range(idx):
            try:
                timerstart = timer[i - 1][0]
                timerstart = int(timerstart) + int(config.recording.margin_before.value) * 60
                timerday = time.strftime('%Y-%m-%d', time.localtime(timerstart))
                timerhour = time.strftime('%H:%M', time.localtime(timerstart))
                timersref = timer[i - 1][1]
                data = data + timerday + ':::' + timerhour + ':::' + timersref + '\n'
            except IndexError:
                pass

        f.write(data)
        f.close()
        self.timer = data

    def green(self):
        if self.current == 'menu' and self.zap == True and self.eventview == False and self.search == False:
            c = self['menu'].getSelectedIndex()
            try:
                sref = self.sref
                if sref != '':
                    self.session.nav.playService(eServiceReference(sref))
            except IndexError:
                pass

        elif self.current == 'menu' and self.eventview == True and self.search == False:
            sref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())
            sref = str(sref) + 'FIN'
            sref = sub(':0:0:0:.*?FIN', ':0:0:0:', sref)
            self.sref = sref
            channel = self.channel_db.lookup(sref)
            if channel == 'nope':
                self.session.open(MessageBox, 'Service not found:\nNo entry for current service reference\n%s' % str(sref), MessageBox.TYPE_INFO, close_on_any_key=True)
            else:
                if self.picon == True:
                    self.piconname = self.findPicon(sref)
                    if self.piconname is None:
                        self.piconname = 'none.png'
                self.link = 'http://www.tvspielfilm.de/tv-programm/sendungen/&page=0,' + str(channel) + '.html'
                self.refresh()
        elif self.current == 'postview':
            self.wiki()
        return

    def yellow(self):
        if self.current == 'postview':
            self.youTube()
        elif self.current == 'menu' and self.search == False and self.ready == True:
            try:
                c = self['menu'].getSelectedIndex()
                self.oldindex = c
                titel = self.tvtitel[c]
                self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='TV Spielfilm Suche:', text=titel)
            except IndexError:
                self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='TV Spielfilm Suche:', text='')

    def searchReturn(self, search):
        if search and search != '':
            self.searchstring = search
            self['menu'].hide()
            self['label'].setText('')
            self['label2'].setText('')
            self['label3'].setText('')
            self['label4'].setText('')
            self['searchlogo'].show()
            self['searchtimer'].show()
            self.searchlink = []
            self.searchref = []
            self.searchentries = []
            self.search = True
            self.datum = False
            self.filter = True
            search = search.replace(' ', '+')
            searchlink = 'http://www.tvspielfilm.de/suche/tvs-suche,,ApplicationSearch.html?tab=TV-Sendungen&q=' + search + '&page=1'
            self.maxsearchcount = config.plugins.tvspielfilm.maxsearch.value
            self.searchcount = 0
            self.makeSearchView(searchlink)

    def showsearch(self):
        self.postviewready = False
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['label'].setText('')
        self['label2'].setText('')
        self['label3'].setText('')
        self['label4'].setText('')
        self['searchmenu'].show()
        self['searchlogo'].show()
        self['searchtimer'].show()
        self['searchtext'].show()

    def pressText(self):
        if self.current == 'postview' and self.postviewready == True:
            if self.mehrbilder == True:
                self.session.openWithCallback(self.picReturn, TVPicShow, self.postlink)
            else:
                self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)

    def playTrailer(self):
        if self.current == 'postview' and self.postviewready == True and self.trailer == True:
            sref = eServiceReference(4097, 0, self.trailerurl)
            sref.setName(self.name)
            self.session.open(MoviePlayer, sref)

    def youTube(self):
        if self.current == 'postview' and self.postviewready == True:
            self.session.open(searchYouTube, self.name, self.movie)
        elif self.current == 'menu' and self.search == False and self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                titel = self.tvtitel[c]
                self.session.open(searchYouTube, titel, self.movie)
            except IndexError:
                pass

    def wiki(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/Wikipedia.pyo'):
                from Plugins.Extensions.Wikipedia.Wikipedia import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/Wikipedia/plugin.pyo'):
                from Plugins.Extensions.Wikipedia.plugin import wikiSearch
                name = transWIKI(self.name)
                self.session.open(wikiSearch, name)
            else:
                self.session.openWithCallback(self.wikiInstall, MessageBox, '\nDas Wikipedia Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)
                return

    def wikiInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'wiki', True)

    def translator(self):
        if self.current == 'postview':
            if self.showEPG == False:
                text = self.POSTtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            else:
                text = self.EPGtext + 'FIN'
                text = re.sub('>>.*?FIN', '', text, flags=re.S)
                text = re.sub('Cast und Crew.*?FIN', '', text, flags=re.S)
                text = re.sub('_____________.*?FIN', '', text, flags=re.S)
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/EPGTranslator.pyo'):
                from Plugins.Extensions.EPGTranslator.EPGTranslator import translatorMain
                self.session.open(translatorMain, text)
            elif fileExists('/usr/lib/enigma2/python/Plugins/Extensions/EPGTranslator/plugin.pyo'):
                from Plugins.Extensions.EPGTranslator.plugin import translatorMain
                self.session.open(translatorMain, text)
            else:
                self.session.openWithCallback(self.translatorInstall, MessageBox, '\nDas EPG Translator Plugin ist nicht installiert.\nSoll das Plugin installiert werden?', MessageBox.TYPE_YESNO)
                return

    def translatorInstall(self, answer):
        if answer is True:
            self.session.open(infoScreenTVSpielfilm, 'translator', True)

    def IMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
                from Plugins.Extensions.IMDb.plugin import IMDB
                self.session.open(IMDB, self.name)
            else:
                self.session.openWithCallback(self.IMDbInstall, MessageBox, '\nDas IMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TMDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
                from Plugins.Extensions.TMDb.plugin import TMDbMain
                self.session.open(TMDbMain, self.name)
            else:
                self.session.openWithCallback(self.TMDbInstall, MessageBox, '\nDas TMDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def TVDb(self):
        if self.current == 'postview':
            if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
                from Plugins.Extensions.TheTVDB.plugin import TheTVDBMain
                self.name = sub('Die ', '', self.name)
                self.session.open(TheTVDBMain, self.name)
            else:
                self.session.openWithCallback(self.TVDbInstall, MessageBox, '\nDas TheTVDb Plugin ist nicht installiert.\n\nDas Plugin kann automatisch installiert werden, wenn es auf dem Feed ihres Images vorhanden ist.\n\nSoll das Plugin jetzt auf dem Feed gesucht und wenn vorhanden automatisch installiert werden?', MessageBox.TYPE_YESNO)
                return

    def IMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedIMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-imdb')

    def finishedIMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/IMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas IMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas IMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das IMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TMDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTMDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-tmdbinfo')

    def finishedTMDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TMDb/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TMDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TMDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TMDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def TVDbInstall(self, answer):
        if answer is True:
            self.container = eConsoleAppContainer()
            self.container.appClosed.append(self.finishedTVDbInstall)
            self.container.execute('opkg update && opkg install enigma2-plugin-extensions-thetvdb')

    def finishedTVDbInstall(self, retval):
        del self.container.appClosed[:]
        del self.container
        if fileExists('/usr/lib/enigma2/python/Plugins/Extensions/TheTVDB/plugin.pyo'):
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas TheTVDb Plugin wurde installiert.\nBitte starten Sie Enigma neu.', MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\nDas TheTVDb Plugin ist nicht auf dem Feed ihres Images vorhanden.\n\nBitte installieren Sie das TheTVDb Plugin manuell.', MessageBox.TYPE_ERROR)

    def restartGUI(self, answer):
        if answer is True:
            try:
                self.session.open(TryQuitMainloop, 3)
            except RuntimeError:
                self.close()

    def nextDay(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('time&date', self.link) is not None:
                date1 = re.findall('time&date=(.*?)-..-..&tips', self.link)
                date2 = re.findall('time&date=....-(.*?)-..&tips', self.link)
                date3 = re.findall('time&date=....-..-(.*?)&tips', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

            else:
                self.link = sub('.html', '', self.link)
                self.link = sub('&page=0,', '?page=0&order=time&date=channel=', self.link)
                today = datetime.date.today()
            one_day = datetime.timedelta(days=1)
            tomorrow = today + one_day
            weekday = tomorrow.weekday()
            if weekday == 0:
                self.weekday = 'Montag'
            elif weekday == 1:
                self.weekday = 'Dienstag'
            elif weekday == 2:
                self.weekday = 'Mittwoch'
            elif weekday == 3:
                self.weekday = 'Donnerstag'
            elif weekday == 4:
                self.weekday = 'Freitag'
            elif weekday == 5:
                self.weekday = 'Samstag'
            elif weekday == 6:
                self.weekday = 'Sonntag'
            self.link = self.link + 'FIN'
            channel = re.findall('channel=(.*?)FIN', self.link)
            nextday = sub('[?]page=.&order=time&date=(.*?FIN)', '?page=1&order=time&date=', self.link)
            nextday = nextday + str(tomorrow)
            nextday = nextday + '&tips=0&time=day&channel=' + channel[0]
            self.date = tomorrow
            one_day = datetime.timedelta(days=1)
            self.nextdate = self.date + one_day
            self.link = nextday
            self.oldindex = 0
            self.refresh()
        elif self.current == 'postview' or self.search == True:
            servicelist = self.session.instantiateDialog(ChannelSelection)
            self.session.execDialog(servicelist)
        return

    def prevDay(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('time&date', self.link) is not None:
                date1 = re.findall('time&date=(.*?)-..-..&tips', self.link)
                date2 = re.findall('time&date=....-(.*?)-..&tips', self.link)
                date3 = re.findall('time&date=....-..-(.*?)&tips', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

            else:
                self.link = sub('.html', '', self.link)
                self.link = sub('&page=0,', '?page=0&order=time&date=channel=', self.link)
                today = datetime.date.today()
            one_day = datetime.timedelta(days=1)
            yesterday = today - one_day
            weekday = yesterday.weekday()
            if weekday == 0:
                self.weekday = 'Montag'
            elif weekday == 1:
                self.weekday = 'Dienstag'
            elif weekday == 2:
                self.weekday = 'Mittwoch'
            elif weekday == 3:
                self.weekday = 'Donnerstag'
            elif weekday == 4:
                self.weekday = 'Freitag'
            elif weekday == 5:
                self.weekday = 'Samstag'
            elif weekday == 6:
                self.weekday = 'Sonntag'
            self.link = self.link + 'FIN'
            channel = re.findall('channel=(.*?)FIN', self.link)
            prevday = sub('[?]page=.&order=time&date=(.*?FIN)', '?page=1&order=time&date=', self.link)
            prevday = prevday + str(yesterday)
            prevday = prevday + '&tips=0&time=day&channel=' + channel[0]
            self.date = yesterday
            one_day = datetime.timedelta(days=1)
            self.nextdate = self.date + one_day
            self.link = prevday
            self.oldindex = 0
            self.refresh()
        elif self.current == 'postview' or self.search == True:
            servicelist = self.session.instantiateDialog(ChannelSelection)
            self.session.execDialog(servicelist)
        return

    def nextWeek(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('time&date', self.link) is not None:
                date1 = re.findall('time&date=(.*?)-..-..&tips', self.link)
                date2 = re.findall('time&date=....-(.*?)-..&tips', self.link)
                date3 = re.findall('time&date=....-..-(.*?)&tips', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

            else:
                self.link = sub('.html', '', self.link)
                self.link = sub('&page=0,', '?page=0&order=time&date=channel=', self.link)
                today = datetime.date.today()
            one_week = datetime.timedelta(days=7)
            tomorrow = today + one_week
            weekday = tomorrow.weekday()
            if weekday == 0:
                self.weekday = 'Montag'
            elif weekday == 1:
                self.weekday = 'Dienstag'
            elif weekday == 2:
                self.weekday = 'Mittwoch'
            elif weekday == 3:
                self.weekday = 'Donnerstag'
            elif weekday == 4:
                self.weekday = 'Freitag'
            elif weekday == 5:
                self.weekday = 'Samstag'
            elif weekday == 6:
                self.weekday = 'Sonntag'
            self.link = self.link + 'FIN'
            channel = re.findall('channel=(.*?)FIN', self.link)
            nextweek = sub('[?]page=.&order=time&date=(.*?FIN)', '?page=1&order=time&date=', self.link)
            nextweek = nextweek + str(tomorrow)
            nextweek = nextweek + '&tips=0&time=day&channel=' + channel[0]
            self.date = tomorrow
            one_week = datetime.timedelta(days=7)
            self.nextdate = self.date + one_week
            self.link = nextweek
            self.oldindex = 0
            self.refresh()
        elif self.current == 'postview':
            self.translator()
        return

    def prevWeek(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            self.ready = False
            if search('time&date', self.link) is not None:
                date1 = re.findall('time&date=(.*?)-..-..&tips', self.link)
                date2 = re.findall('time&date=....-(.*?)-..&tips', self.link)
                date3 = re.findall('time&date=....-..-(.*?)&tips', self.link)
                try:
                    today = datetime.date(int(date1[0]), int(date2[0]), int(date3[0]))
                except IndexError:
                    today = datetime.date.today()

            else:
                self.link = sub('.html', '', self.link)
                self.link = sub('&page=0,', '?page=0&order=time&date=channel=', self.link)
                today = datetime.date.today()
            one_week = datetime.timedelta(days=7)
            yesterday = today - one_week
            weekday = yesterday.weekday()
            if weekday == 0:
                self.weekday = 'Montag'
            elif weekday == 1:
                self.weekday = 'Dienstag'
            elif weekday == 2:
                self.weekday = 'Mittwoch'
            elif weekday == 3:
                self.weekday = 'Donnerstag'
            elif weekday == 4:
                self.weekday = 'Freitag'
            elif weekday == 5:
                self.weekday = 'Samstag'
            elif weekday == 6:
                self.weekday = 'Sonntag'
            self.link = self.link + 'FIN'
            channel = re.findall('channel=(.*?)FIN', self.link)
            prevweek = sub('[?]page=.&order=time&date=(.*?FIN)', '?page=1&order=time&date=', self.link)
            prevweek = prevweek + str(yesterday)
            prevweek = prevweek + '&tips=0&time=day&channel=' + channel[0]
            self.date = yesterday
            one_week = datetime.timedelta(days=7)
            self.nextdate = self.date + one_week
            self.link = prevweek
            self.oldindex = 0
            self.refresh()
        return

    def gotoEnd(self):
        if self.current != 'postview' and self.ready == True and self.search == False:
            end = len(self.tventries) - 1
            self['menu'].moveToIndex(end)
        elif self.current != 'postview' and self.ready == True and self.search == True:
            end = len(self.searchentries) - 1
            self['searchmenu'].moveToIndex(end)

    def findPicon(self, sref):
        sref = sref + 'FIN'
        sref = sref.replace(':', '_')
        sref = sref.replace('_FIN', '')
        sref = sref.replace('FIN', '')
        pngname = self.piconfolder + sref + '.png'
        if fileExists(pngname):
            return pngname

    def getPicPost(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPicPost(self.picfile)

    def showPicPost(self, picpost):
        if self.xd == False:
            currPic = loadPic(picpost, 490, 245, 3, 0, 0, 0)
        else:
            currPic = loadPic(picpost, 400, 200, 3, 0, 0, 0)
        if currPic != None:
            self['picpost'].instance.setPixmap(currPic)
            self['piclabel'].show()
            self['piclabel2'].show()
            if self.trailer == True:
                self['cinlogo'].show()
                self['playlogo'].show()
        return

    def showPicTVinfo1(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo1'].instance.setPixmap(currPic)
        return

    def showPicTVinfo2(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo2'].instance.setPixmap(currPic)
        return

    def showPicTVinfo3(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo3'].instance.setPixmap(currPic)
        return

    def showPicTVinfo4(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo4'].instance.setPixmap(currPic)
        return

    def showPicTVinfo5(self, picinfo):
        if self.xd == False:
            currPic = loadPic(picinfo, 60, 20, 3, 0, 0, 0)
        else:
            currPic = loadPic(picinfo, 45, 15, 3, 0, 0, 0)
        if currPic != None:
            self['tvinfo5'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def downloadPostPage(self, link, name):
        downloadPage(link, self.localhtml2).addCallback(name).addErrback(self.downloadError)

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadPageError)

    def downloadPageError(self, output):
        if self.eventview == False:
            self['label'].setText('Bouquet = +- Tag, <> = +- Woche')
            self['label'].stopBlinking()
            self['label'].show()
        else:
            self['label'].setText('Bouquet = +- Tag, <> = +- Woche, 1/2 = Zap Up/Down')
            self['label'].stopBlinking()
            self['label'].show()
        self.ready = True

    def refresh(self):
        self.postviewready = False
        self.ready = False
        self.current = 'menu'
        self['label'].setText('Bitte warten...')
        self['label'].startBlinking()
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.makeTVTimer.callback.append(self.downloadFullPage(self.link, self.makeTVView))

    def showProgrammPage(self):
        if self.eventview == False:
            self['label'].setText('Bouquet = +- Tag, <> = +- Woche')
            self['label2'].setText('= Timer')
            self['label3'].setText('= Suche')
            self['label4'].setText('= Zappen')
        else:
            self['label'].setText('Bouquet = +- Tag, <> = +- Woche, 1/2 = Zap Up/Down')
            self['label2'].setText('= Timer')
            self['label3'].setText('= Suche')
            self['label4'].setText('= Refresh')
        self['infotext'].hide()
        self['infotext2'].hide()
        self['infotext3'].hide()
        self['infotext4'].hide()
        self['infotext5'].hide()
        self['infotext6'].hide()
        self['infotext7'].hide()
        self['infotext8'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['piclabel'].hide()
        self['piclabel2'].hide()
        self['tvinfo1'].hide()
        self['tvinfo2'].hide()
        self['tvinfo3'].hide()
        self['tvinfo4'].hide()
        self['tvinfo5'].hide()
        self['searchmenu'].hide()
        self['searchlogo'].hide()
        self['searchtimer'].hide()
        self['searchtext'].hide()
        self.current = 'menu'
        self['menu'].show()

    def down(self):
        try:
            if self.current == 'menu':
                self['menu'].down()
            elif self.current == 'searchmenu':
                self['searchmenu'].down()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def up(self):
        try:
            if self.current == 'menu':
                self['menu'].up()
            elif self.current == 'searchmenu':
                self['searchmenu'].up()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def rightDown(self):
        try:
            if self.current == 'menu':
                self['menu'].pageDown()
            elif self.current == 'searchmenu':
                self['searchmenu'].pageDown()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def leftUp(self):
        try:
            if self.current == 'menu':
                self['menu'].pageUp()
            elif self.current == 'searchmenu':
                self['searchmenu'].pageUp()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def zapUp(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapUp(InfoBar.instance)

    def zapDown(self):
        if InfoBar and InfoBar.instance:
            InfoBar.zapDown(InfoBar.instance)

    def zapRefresh(self):
        if self.current == 'menu' and self.eventview == True and self.search == False:
            sref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())
            sref = str(sref) + 'FIN'
            sref = sub(':0:0:0:.*?FIN', ':0:0:0:', sref)
            self.sref = sref
            channel = self.channel_db.lookup(sref)
            if channel == 'nope':
                self.session.open(MessageBox, 'Service not found:\nNo entry for current service reference\n%s' % str(sref), MessageBox.TYPE_INFO, close_on_any_key=True)
            else:
                if self.picon == True:
                    self.piconname = self.findPicon(sref)
                    if self.piconname is None:
                        self.piconname = 'none.png'
                self.link = 'http://www.tvspielfilm.de/tv-programm/sendungen/&page=0,' + str(channel) + '.html'
                self.refresh()
        return

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def picReturn(self):
        pass

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if self.current == 'menu':
            if fileExists(self.picfile):
                os.remove(self.picfile)
            if fileExists(self.localhtml):
                os.remove(self.localhtml)
            if fileExists(self.localhtml2):
                os.remove(self.localhtml2)
            if self.eventview == True:
                config.usage.on_movie_stop.value = self.movie_stop
                config.usage.on_movie_eof.value = self.movie_eof
            self.close()
        elif self.current == 'searchmenu':
            self.search = False
            self.oldsearchindex = 1
            self['searchmenu'].hide()
            self['searchlogo'].hide()
            self['searchtimer'].hide()
            self['searchtext'].hide()
            self.showProgrammPage()
            self.setTitle('')
            self.setTitle(self.titel)
        elif self.current == 'postview' and self.search == False:
            if self.tagestipp == True:
                self.close()
            else:
                self.postviewready = False
                self.setTitle('')
                self.setTitle(self.titel)
                self.showProgrammPage()
        elif self.current == 'postview' and self.search == True:
            self.postviewready = False
            self.showsearch()
            self.current = 'searchmenu'


class TVTrailer(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="Trailer - Video - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="140,60" size="750,450" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="pic1" position="890,60" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic2" position="890,135" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic3" position="890,210" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic4" position="890,285" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic5" position="890,360" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic6" position="890,435" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play1" position="20,68" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play2" position="20,143" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play3" position="20,218" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play4" position="20,293" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play5" position="20,368" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play6" position="20,443" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="250,16" size="512,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title="Trailer - Video - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="172,75" size="923,540" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="pic1" position="1095,75" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic2" position="1095,165" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic3" position="1095,255" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic4" position="1095,345" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic5" position="1095,435" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic6" position="1095,525" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play1" position="36,91" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play2" position="36,181" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play3" position="36,271" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play4" position="36,361" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play5" position="36,451" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play6" position="36,541" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="250,20" size="740,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'

    def __init__(self, session, link, sparte):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            self.dict = {'position': position,
             'font': font}
            self.skin = applySkinVars(TVTrailer.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            self.dict = {'position': position,
             'font': font}
            self.skin = applySkinVars(TVTrailer.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.pic1 = '/tmp/tvspielfilm1.jpg'
        self.pic2 = '/tmp/tvspielfilm2.jpg'
        self.pic3 = '/tmp/tvspielfilm3.jpg'
        self.pic4 = '/tmp/tvspielfilm4.jpg'
        self.pic5 = '/tmp/tvspielfilm5.jpg'
        self.pic6 = '/tmp/tvspielfilm6.jpg'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.sparte = sparte
        self.tventries = []
        self.tvlink = []
        self.tvtitel = []
        self.picurllist = []
        self.hideflag = True
        self.charts = False
        self.ready = False
        self.len = 0
        self.oldindex = 0
        self['pic1'] = Pixmap()
        self['pic2'] = Pixmap()
        self['pic3'] = Pixmap()
        self['pic4'] = Pixmap()
        self['pic5'] = Pixmap()
        self['pic6'] = Pixmap()
        self['play1'] = Pixmap()
        self['play2'] = Pixmap()
        self['play3'] = Pixmap()
        self['play4'] = Pixmap()
        self['play5'] = Pixmap()
        self['play6'] = Pixmap()
        self['menu'] = ItemList([])
        self['label'] = Label('OK = Zum Video')
        self['actions'] = ActionMap(['OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'NumberActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'blue': self.hideScreen,
         '0': self.gotoEnd,
         'displayHelp': self.infoScreen}, -1)
        self.date = datetime.date.today()
        one_day = datetime.timedelta(days=1)
        self.nextdate = self.date + one_day
        weekday = self.date.weekday()
        if weekday == 0:
            self.weekday = 'Montag'
        elif weekday == 1:
            self.weekday = 'Dienstag'
        elif weekday == 2:
            self.weekday = 'Mittwoch'
        elif weekday == 3:
            self.weekday = 'Donnerstag'
        elif weekday == 4:
            self.weekday = 'Freitag'
        elif weekday == 5:
            self.weekday = 'Samstag'
        elif weekday == 6:
            self.weekday = 'Sonntag'
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        self.makeTVTimer = eTimer()
        self.makeTVTimer.callback.append(self.downloadFullPage(link, self.makeTVTrailer))
        self.makeTVTimer.start(500, True)

    def makeTVTrailer(self, string):
        output = open(self.localhtml, 'r').read()
        self['pic1'].hide()
        self['pic2'].hide()
        self['pic3'].hide()
        self['pic4'].hide()
        self['pic5'].hide()
        self['pic6'].hide()
        self['play1'].hide()
        self['play2'].hide()
        self['play3'].hide()
        self['play4'].hide()
        self['play5'].hide()
        self['play6'].hide()
        if self.sparte == 'Kino Neustarts':
            startpos = find(output, '<p class="headline headline--section">Kino Neustarts</p>')
            endpos = find(output, '<div class="OUTBRAIN"')
        elif self.sparte == 'Kino Vorschau':
            startpos = find(output, '<h2 class="headline headline--section">Neustarts')
            endpos = find(output, '<div id="gtm-livetv-footer"></div>')
        elif self.sparte == 'Neueste Trailer':
            startpos = find(output, '<p class="headline headline--section">Neueste Trailer</p>')
            endpos = find(output, '<p class="headline headline--section">Kino Neustarts</p>')
        elif self.sparte == 'Kino Charts':
            self.charts = True
            startpos = find(output, '<ul class="chart-content charts-list-content">')
            endpos = find(output, '<div id="gtm-livetv-footer"></div>')
        elif self.sparte == 'DVD Charts':
            self.charts = True
            startpos = find(output, '<ul class="chart-content charts-list-content">')
            endpos = find(output, '<div id="gtm-livetv-footer"></div>')
        bereich = output[startpos:endpos]
        bereich = re.sub('<ul class="btns">.*?</ul>', '', bereich, flags=re.S)
        bereich = transHTML(bereich)
        date = str(self.date.strftime('%d.%m.%Y'))
        self.titel = str(self.sparte) + ' - ' + str(self.weekday) + ', ' + date
        self.setTitle(self.titel)
        if self.sparte == 'Neueste Trailer':
            bereich = sub('<span class="badge">', '<span class="subline ">', bereich)
            bereich = sub('<div class="badge-holder">\n\\s+</div>', '<span class="subline ">Trailer</span>', bereich)
            bereich = sub('<a href="', '<td>LINK', bereich)
            bereich = sub('" target="', '</td>', bereich)
            bereich = sub('<img src="', '<td>PIC', bereich)
            bereich = sub('jpg">', 'jpg</td>', bereich)
            bereich = sub('png">', 'png</td>', bereich)
            bereich = sub('<span class="headline">', '<td>TITEL', bereich)
            bereich = sub('<span class="subline .*?">', '<td>TEXT', bereich)
            bereich = sub('</span>', '</td>', bereich)
            a = findall('<td>(.*?)</td>', bereich)
            y = 0
            offset = 4
            for x in a:
                if y == 0:
                    res = [x]
                    if self.backcolor == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(923, 90), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(750, 75), font=0, backcolor_sel=self.back_color, text=''))
                    x = sub('LINK', '', x)
                    self.tvlink.append(x)
                if y == 1:
                    x = sub('PIC', '', x)
                    self.picurllist.append(x)
                if y == 2:
                    x = sub('TEXT', '', x)
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(5, 48), size=(913, 30), font=-1, color=10857646, color_sel=10857646, flags=RT_HALIGN_LEFT, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(5, 39), size=(740, 30), font=0, color=10857646, color_sel=10857646, flags=RT_HALIGN_LEFT, text=x))
                if y == 3:
                    x = sub('TITEL', '', x)
                    titel = search('"(.*?)"', x)
                    if titel is not None:
                        self.tvtitel.append(titel.group(1))
                    else:
                        self.tvtitel.append(x)
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(5, 17), size=(913, 30), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(5, 12), size=(740, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    if self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 20), size=(60, 29), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(670, 20), size=(60, 29), png=loadPNG(png)))
                    self.tventries.append(res)
                y += 1
                if y == offset:
                    y = 0

            if self.xd == False:
                self['menu'].l.setItemHeight(90)
            else:
                self['menu'].l.setItemHeight(75)
            self['menu'].l.setList(self.tventries)
            self['menu'].moveToIndex(self.oldindex)
        elif self.charts == False:
            if self.sparte == 'Kino Vorschau':
                bereich = sub('<a href="https://www.cinema.de.*?</a>', '', bereich)
            bereich = sub('<a href="', '<td>LINK', bereich)
            bereich = sub('" target="', '</td>', bereich)
            bereich = sub('<img src="', '<td>PIC', bereich)
            bereich = sub('jpg">', 'jpg</td>', bereich)
            bereich = sub('png">', 'png</td>', bereich)
            bereich = sub('<span class="headline">', '<td>TITEL', bereich)
            bereich = sub('<span class="subline .*?">', '<td>TEXT', bereich)
            bereich = sub('</span>', '</td>', bereich)
            a = findall('<td>(.*?)</td>', bereich)
            y = 0
            offset = 4
            for x in a:
                if y == 0:
                    res = [x]
                    if self.backcolor == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(923, 90), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(750, 75), font=0, backcolor_sel=self.back_color, text=''))
                    x = sub('LINK', '', x)
                    self.tvlink.append(x)
                if y == 1:
                    x = sub('PIC', '', x)
                    self.picurllist.append(x)
                if y == 2:
                    x = sub('TITEL', '', x)
                    titel = search('"(.*?)"', x)
                    if titel is not None:
                        self.tvtitel.append(titel.group(1))
                    else:
                        self.tvtitel.append(x)
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(5, 17), size=(913, 30), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(5, 12), size=(740, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    if self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 20), size=(60, 29), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(670, 20), size=(60, 29), png=loadPNG(png)))
                if y == 3:
                    x = sub('TEXT', '', x)
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(5, 48), size=(913, 30), font=-1, color=10857646, color_sel=10857646, flags=RT_HALIGN_LEFT, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(5, 39), size=(740, 30), font=0, color=10857646, color_sel=10857646, flags=RT_HALIGN_LEFT, text=x))
                    self.tventries.append(res)
                y += 1
                if y == offset:
                    y = 0

            if self.xd == False:
                self['menu'].l.setItemHeight(90)
            else:
                self['menu'].l.setItemHeight(75)
            self['menu'].l.setList(self.tventries)
            self['menu'].moveToIndex(self.oldindex)
        elif self.charts == True:
            bereich = sub('<li class="active">\n\\s+<a href="', '<td>LINK', bereich)
            bereich = sub('<li class="inactive ">\n\\s+<a href="', '<td>LINK', bereich)
            bereich = sub('" target="', '</td>', bereich)
            bereich = sub('<p class="title">', '<td>TITEL', bereich)
            bereich = sub('</p>', '</td>', bereich)
            bereich = sub('<img src="', '<td>PIC', bereich)
            bereich = sub('jpg">', 'jpg</td>', bereich)
            bereich = sub('png">', 'png</td>', bereich)
            bereich = sub('<span class="country">', '<td>TEXT', bereich)
            bereich = sub('</span>', '</td>', bereich)
            a = findall('<td>(.*?)</td>', bereich)
            y = 0
            offset = 4
            for x in a:
                if y == 0:
                    res = [x]
                    if self.backcolor == True:
                        if self.xd == False:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(923, 90), font=-1, backcolor_sel=self.back_color, text=''))
                        else:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(750, 75), font=0, backcolor_sel=self.back_color, text=''))
                    x = sub('LINK', '', x)
                    self.tvlink.append(x)
                if y == 1:
                    x = sub('TITEL', '', x)
                    titel = search('"(.*?)"', x)
                    if titel is not None:
                        self.tvtitel.append(titel.group(1))
                    else:
                        self.tvtitel.append(x)
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(5, 2), size=(913, 30), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(5, 2), size=(740, 24), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                    if self.xd == False:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 20), size=(60, 29), png=loadPNG(png)))
                    else:
                        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png'
                        if fileExists(png):
                            res.append(MultiContentEntryPixmapAlphaTest(pos=(670, 20), size=(60, 29), png=loadPNG(png)))
                if y == 2:
                    x = sub('TEXT', '', x)
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(5, 34), size=(833, 56), font=0, color=10857646, color_sel=10857646, flags=RT_HALIGN_LEFT | RT_WRAP, text=x))
                    else:
                        res.append(MultiContentEntryText(pos=(5, 28), size=(660, 46), font=1, color=10857646, color_sel=10857646, flags=RT_HALIGN_LEFT | RT_WRAP, text=x))
                if y == 3:
                    x = sub('PIC', '', x)
                    self.picurllist.append(x)
                    self.tventries.append(res)
                y += 1
                if y == offset:
                    y = 0

            if self.xd == False:
                self['menu'].l.setItemHeight(90)
            else:
                self['menu'].l.setItemHeight(75)
            self['menu'].l.setList(self.tventries)
            self['menu'].moveToIndex(self.oldindex)
        if self.oldindex > 5:
            self.leftUp()
            self.rightDown()
        self.len = len(self.tventries)
        self.ready = True
        playlogo = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/play.png'
        if fileExists(playlogo):
            self.showPlay1(playlogo)
            self['play1'].show()
            self.showPlay2(playlogo)
            self['play2'].show()
            self.showPlay3(playlogo)
            self['play3'].show()
            self.showPlay4(playlogo)
            self['play4'].show()
            self.showPlay5(playlogo)
            self['play5'].show()
            self.showPlay6(playlogo)
            self['play6'].show()
        try:
            picurl1 = self.picurllist[0]
            self.download(picurl1, self.getPic1)
            self['pic1'].show()
        except IndexError:
            self['pic1'].hide()

        try:
            picurl2 = self.picurllist[1]
            self.download(picurl2, self.getPic2)
            self['pic2'].show()
        except IndexError:
            self['pic2'].hide()

        try:
            picurl3 = self.picurllist[2]
            self.download(picurl3, self.getPic3)
            self['pic3'].show()
        except IndexError:
            self['pic3'].hide()

        try:
            picurl4 = self.picurllist[3]
            self.download(picurl4, self.getPic4)
            self['pic4'].show()
        except IndexError:
            self['pic4'].hide()

        try:
            picurl5 = self.picurllist[4]
            self.download(picurl5, self.getPic5)
            self['pic5'].show()
        except IndexError:
            self['pic5'].hide()

        try:
            picurl6 = self.picurllist[5]
            self.download(picurl6, self.getPic6)
            self['pic6'].show()
        except IndexError:
            self['pic6'].hide()

        return

    def ok(self):
        if self.hideflag == False:
            return
        if self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                self.link = self.tvlink[c]
                self.titel = self.tvtitel[c]
                self.download(self.link, self.playTrailer)
            except IndexError:
                pass

    def playTrailer(self, output):
        if search('rl: .https://video.tvspielfilm.de/.*?mp4', output) is not None:
            trailer = search('rl: .https://video.tvspielfilm.de/(.*?).mp4', output)
            self.trailer = 'https://video.tvspielfilm.de/' + trailer.group(1) + '.mp4'
            try:
                sref = eServiceReference(4097, 0, self.trailer)
                sref.setName(self.titel)
                self.session.open(MoviePlayer, sref)
            except IndexError:
                pass

        elif search('rl: .https://video.tvspielfilm.de/.*?flv', output) is not None:
            self.session.open(MessageBox, 'Der Trailer kann nicht abgespielt werden:\nnicht unterst\xfctzter Video-Codec: On2 VP6/Flash', MessageBox.TYPE_INFO, close_on_any_key=True)
        else:
            self.session.open(MessageBox, '\nKein Trailer vorhanden', MessageBox.TYPE_INFO, close_on_any_key=True)
        return

    def gotoEnd(self):
        if self.ready == True:
            end = self.len - 1
            self['menu'].moveToIndex(end)
            if end > 5:
                self.leftUp()
                self.rightDown()

    def getPic1(self, output):
        f = open(self.pic1, 'wb')
        f.write(output)
        f.close()
        self.showPic1(self.pic1)

    def showPic1(self, pic1):
        if self.xd == False:
            currPic = loadPic(pic1, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic1, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic1'].instance.setPixmap(currPic)
        return

    def getPic2(self, output):
        f = open(self.pic2, 'wb')
        f.write(output)
        f.close()
        self.showPic2(self.pic2)

    def showPic2(self, pic2):
        if self.xd == False:
            currPic = loadPic(pic2, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic2, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic2'].instance.setPixmap(currPic)
        return

    def getPic3(self, output):
        f = open(self.pic3, 'wb')
        f.write(output)
        f.close()
        self.showPic3(self.pic3)

    def showPic3(self, pic3):
        if self.xd == False:
            currPic = loadPic(pic3, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic3, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic3'].instance.setPixmap(currPic)
        return

    def getPic4(self, output):
        f = open(self.pic4, 'wb')
        f.write(output)
        f.close()
        self.showPic4(self.pic4)

    def showPic4(self, pic4):
        if self.xd == False:
            currPic = loadPic(pic4, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic4, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic4'].instance.setPixmap(currPic)
        return

    def getPic5(self, output):
        f = open(self.pic5, 'wb')
        f.write(output)
        f.close()
        self.showPic5(self.pic5)

    def showPic5(self, pic5):
        if self.xd == False:
            currPic = loadPic(pic5, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic5, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic5'].instance.setPixmap(currPic)
        return

    def getPic6(self, output):
        f = open(self.pic6, 'wb')
        f.write(output)
        f.close()
        self.showPic6(self.pic6)

    def showPic6(self, pic6):
        if self.xd == False:
            currPic = loadPic(pic6, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic6, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic6'].instance.setPixmap(currPic)
        return

    def showPlay1(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play1'].instance.setPixmap(currPic)
        return

    def showPlay2(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play2'].instance.setPixmap(currPic)
        return

    def showPlay3(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play3'].instance.setPixmap(currPic)
        return

    def showPlay4(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play4'].instance.setPixmap(currPic)
        return

    def showPlay5(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play5'].instance.setPixmap(currPic)
        return

    def showPlay6(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play6'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def down(self):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            return

        self['menu'].down()
        if c + 1 == len(self.tventries):
            try:
                picurl1 = self.picurllist[0]
                self.download(picurl1, self.getPic1)
                self['pic1'].show()
                self['play1'].show()
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[1]
                self.download(picurl2, self.getPic2)
                self['pic2'].show()
                self['play2'].show()
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[2]
                self.download(picurl3, self.getPic3)
                self['pic3'].show()
                self['play3'].show()
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[3]
                self.download(picurl4, self.getPic4)
                self['pic4'].show()
                self['play4'].show()
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[4]
                self.download(picurl5, self.getPic5)
                self['pic5'].show()
                self['play5'].show()
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[5]
                self.download(picurl6, self.getPic6)
                self['pic6'].show()
                self['play6'].show()
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif c % 6 == 5:
            try:
                picurl1 = self.picurllist[c + 1]
                self.download(picurl1, self.getPic1)
                self['pic1'].show()
                self['play1'].show()
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 2]
                self.download(picurl2, self.getPic2)
                self['pic2'].show()
                self['play2'].show()
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 3]
                self.download(picurl3, self.getPic3)
                self['pic3'].show()
                self['play3'].show()
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 4]
                self.download(picurl4, self.getPic4)
                self['pic4'].show()
                self['play4'].show()
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 5]
                self.download(picurl5, self.getPic5)
                self['pic5'].show()
                self['play5'].show()
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 6]
                self.download(picurl6, self.getPic6)
                self['pic6'].show()
                self['play6'].show()
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

    def up(self):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            return

        self['menu'].up()
        if c == 0:
            l = len(self.tventries)
            d = l % 6
            if d == 0:
                d = 6
            try:
                picurl1 = self.picurllist[l - d]
                self.download(picurl1, self.getPic1)
                self['pic1'].show()
                self['play1'].show()
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[l - d + 1]
                self.download(picurl2, self.getPic2)
                self['pic2'].show()
                self['play2'].show()
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[l - d + 2]
                self.download(picurl3, self.getPic3)
                self['pic3'].show()
                self['play3'].show()
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[l - d + 3]
                self.download(picurl4, self.getPic4)
                self['pic4'].show()
                self['play4'].show()
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[l - d + 4]
                self.download(picurl5, self.getPic5)
                self['pic5'].show()
                self['play5'].show()
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[l - d + 5]
                self.download(picurl6, self.getPic6)
                self['pic6'].show()
                self['play6'].show()
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif c % 6 == 0:
            try:
                picurl1 = self.picurllist[c - 6]
                self.download(picurl1, self.getPic1)
                self['pic1'].show()
                self['play1'].show()
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c - 5]
                self.download(picurl2, self.getPic2)
                self['pic2'].show()
                self['play2'].show()
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c - 4]
                self.download(picurl3, self.getPic3)
                self['pic3'].show()
                self['play3'].show()
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c - 3]
                self.download(picurl4, self.getPic4)
                self['pic4'].show()
                self['play4'].show()
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c - 2]
                self.download(picurl5, self.getPic5)
                self['pic5'].show()
                self['play5'].show()
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c - 1]
                self.download(picurl6, self.getPic6)
                self['pic6'].show()
                self['play6'].show()
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

    def rightDown(self):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            return

        self['menu'].pageDown()
        l = len(self.tventries)
        d = c % 6
        e = l % 6
        if e == 0:
            e = 6
        if c + e >= l:
            pass
        elif d == 0:
            try:
                picurl1 = self.picurllist[c + 6]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 7]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 8]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 9]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 10]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 11]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 1:
            try:
                picurl1 = self.picurllist[c + 5]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 6]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 7]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 8]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 9]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 10]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 2:
            try:
                picurl1 = self.picurllist[c + 4]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 5]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 6]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 7]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 8]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 9]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 3:
            try:
                picurl1 = self.picurllist[c + 3]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 4]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 5]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 6]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 7]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 8]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 4:
            try:
                picurl1 = self.picurllist[c + 2]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 3]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 4]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 5]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 6]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 7]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 5:
            try:
                picurl1 = self.picurllist[c + 1]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 2]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 3]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 4]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 5]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 6]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

    def leftUp(self):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            return

        self['menu'].pageUp()
        d = c % 6
        if c < 6:
            pass
        elif d == 0:
            try:
                picurl1 = self.picurllist[c - 6]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 5]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 4]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 3]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 2]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 1]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 1:
            try:
                picurl1 = self.picurllist[c - 7]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 6]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 5]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 4]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 3]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 2]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 2:
            try:
                picurl1 = self.picurllist[c - 8]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 7]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 6]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 5]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 4]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 3]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 3:
            try:
                picurl1 = self.picurllist[c - 9]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 8]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 7]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 6]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 5]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 4]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 4:
            try:
                picurl1 = self.picurllist[c - 10]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 9]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 8]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 7]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 6]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 5]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 5:
            try:
                picurl1 = self.picurllist[c - 11]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 10]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 9]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 8]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 7]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 6]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        self['pic1'].show()
        self['pic2'].show()
        self['pic3'].show()
        self['pic4'].show()
        self['pic5'].show()
        self['pic6'].show()
        self['play1'].show()
        self['play2'].show()
        self['play3'].show()
        self['play4'].show()
        self['play5'].show()
        self['play6'].show()

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        self.close()


class TVBilder(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="Bildergalerien - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="140,60" size="750,450" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="pic1" position="890,60" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic2" position="890,135" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic3" position="890,210" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic4" position="890,285" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic5" position="890,360" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic6" position="890,435" size="112,75" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play1" position="20,68" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play2" position="20,143" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play3" position="20,218" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play4" position="20,293" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play5" position="20,368" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play6" position="20,443" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="250,16" size="512,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title="Bildergalerien - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="172,75" size="923,540" scrollbarMode="showNever" zPosition="1" /> \n\t\t\t\t<widget name="pic1" position="1095,75" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic2" position="1095,165" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic3" position="1095,255" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic4" position="1095,345" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic5" position="1095,435" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pic6" position="1095,525" size="135,90" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play1" position="36,91" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play2" position="36,181" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play3" position="36,271" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play4" position="36,361" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play5" position="36,451" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="play6" position="36,541" size="109,58" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="250,20" size="740,22" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t</screen>'

    def __init__(self, session, link):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            self.dict = {'position': position,
             'font': font}
            self.skin = applySkinVars(TVBilder.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            self.dict = {'position': position,
             'font': font}
            self.skin = applySkinVars(TVBilder.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.pic1 = '/tmp/tvspielfilm1.jpg'
        self.pic2 = '/tmp/tvspielfilm2.jpg'
        self.pic3 = '/tmp/tvspielfilm3.jpg'
        self.pic4 = '/tmp/tvspielfilm4.jpg'
        self.pic5 = '/tmp/tvspielfilm5.jpg'
        self.pic6 = '/tmp/tvspielfilm6.jpg'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.tventries = []
        self.piclink = []
        self.picurllist = []
        self.hideflag = True
        self.ready = False
        self.len = 0
        self.oldindex = 0
        self['pic1'] = Pixmap()
        self['pic2'] = Pixmap()
        self['pic3'] = Pixmap()
        self['pic4'] = Pixmap()
        self['pic5'] = Pixmap()
        self['pic6'] = Pixmap()
        self['play1'] = Pixmap()
        self['play2'] = Pixmap()
        self['play3'] = Pixmap()
        self['play4'] = Pixmap()
        self['play5'] = Pixmap()
        self['play6'] = Pixmap()
        self['menu'] = ItemList([])
        self['label'] = Label('OK = Zur Bildergalerie')
        self['actions'] = ActionMap(['OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'NumberActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'blue': self.hideScreen,
         '0': self.gotoEnd,
         'displayHelp': self.infoScreen}, -1)
        self.date = datetime.date.today()
        one_day = datetime.timedelta(days=1)
        self.nextdate = self.date + one_day
        weekday = self.date.weekday()
        if weekday == 0:
            self.weekday = 'Montag'
        elif weekday == 1:
            self.weekday = 'Dienstag'
        elif weekday == 2:
            self.weekday = 'Mittwoch'
        elif weekday == 3:
            self.weekday = 'Donnerstag'
        elif weekday == 4:
            self.weekday = 'Freitag'
        elif weekday == 5:
            self.weekday = 'Samstag'
        elif weekday == 6:
            self.weekday = 'Sonntag'
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        self.makeTVTimer = eTimer()
        self.makeTVTimer.callback.append(self.downloadFullPage(link, self.makeTVGalerie))
        self.makeTVTimer.start(500, True)

    def makeTVGalerie(self, string):
        output = open(self.localhtml, 'r').read()
        self['pic1'].hide()
        self['pic2'].hide()
        self['pic3'].hide()
        self['pic4'].hide()
        self['pic5'].hide()
        self['pic6'].hide()
        self['play1'].hide()
        self['play2'].hide()
        self['play3'].hide()
        self['play4'].hide()
        self['play5'].hide()
        self['play6'].hide()
        startpos = find(output, '<p class="headline headline--section">')
        endpos = find(output, '<div id="gtm-livetv-footer"></div>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        date = str(self.date.strftime('%d.%m.%Y'))
        self.titel = str(self.weekday) + ', ' + date
        self.setTitle(self.titel)
        bereich = sub('<a href="', '<td>LINK', bereich)
        bereich = sub('" target="', '</td>', bereich)
        bereich = sub('<img src="', '<td>PIC', bereich)
        bereich = sub('jpg">', 'jpg</td>', bereich)
        bereich = sub('png">', 'png</td>', bereich)
        bereich = sub('<span class="headline">', '<td>TITEL', bereich)
        bereich = sub('</span>', '</td>', bereich)
        a = findall('<td>(.*?)</td>', bereich)
        y = 0
        offset = 3
        for x in a:
            if y == 0:
                res = [x]
                if self.backcolor == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(923, 90), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(750, 75), font=0, backcolor_sel=self.back_color, text=''))
                x = sub('LINK', '', x)
                self.piclink.append(x)
            if y == 1:
                x = sub('PIC', '', x)
                self.picurllist.append(x)
            if y == 2:
                x = sub('TITEL', '', x)
                if self.xd == False:
                    res.append(MultiContentEntryText(pos=(5, 17), size=(913, 30), font=-1, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                else:
                    res.append(MultiContentEntryText(pos=(5, 12), size=(740, 30), font=0, color_sel=16777215, flags=RT_HALIGN_LEFT, text=x))
                if self.xd == False:
                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-picHD.png'
                    if fileExists(png):
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(843, 20), size=(60, 20), png=loadPNG(png)))
                else:
                    png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/icon-pic.png'
                    if fileExists(png):
                        res.append(MultiContentEntryPixmapAlphaTest(pos=(685, 20), size=(45, 15), png=loadPNG(png)))
                self.tventries.append(res)
            y += 1
            if y == offset:
                y = 0

        if self.xd == False:
            self['menu'].l.setItemHeight(90)
        else:
            self['menu'].l.setItemHeight(75)
        self['menu'].l.setList(self.tventries)
        self['menu'].moveToIndex(self.oldindex)
        if self.oldindex > 5:
            self.leftUp()
            self.rightDown()
        self.len = len(self.tventries)
        self.ready = True
        playlogo = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/play.png'
        if fileExists(playlogo):
            self.showPlay1(playlogo)
            self['play1'].show()
            self.showPlay2(playlogo)
            self['play2'].show()
            self.showPlay3(playlogo)
            self['play3'].show()
            self.showPlay4(playlogo)
            self['play4'].show()
            self.showPlay5(playlogo)
            self['play5'].show()
            self.showPlay6(playlogo)
            self['play6'].show()
        try:
            picurl1 = self.picurllist[0]
            self.download(picurl1, self.getPic1)
            self['pic1'].show()
        except IndexError:
            self['pic1'].hide()

        try:
            picurl2 = self.picurllist[1]
            self.download(picurl2, self.getPic2)
            self['pic2'].show()
        except IndexError:
            self['pic2'].hide()

        try:
            picurl3 = self.picurllist[2]
            self.download(picurl3, self.getPic3)
            self['pic3'].show()
        except IndexError:
            self['pic3'].hide()

        try:
            picurl4 = self.picurllist[3]
            self.download(picurl4, self.getPic4)
            self['pic4'].show()
        except IndexError:
            self['pic4'].hide()

        try:
            picurl5 = self.picurllist[4]
            self.download(picurl5, self.getPic5)
            self['pic5'].show()
        except IndexError:
            self['pic5'].hide()

        try:
            picurl6 = self.picurllist[5]
            self.download(picurl6, self.getPic6)
            self['pic6'].show()
        except IndexError:
            self['pic6'].hide()

    def ok(self):
        if self.hideflag == False:
            return
        if self.ready == True:
            c = self['menu'].getSelectedIndex()
            try:
                self.link = self.piclink[c]
                self.session.openWithCallback(self.picReturn, TVNewsPicShow, self.link)
            except IndexError:
                pass

    def picReturn(self):
        pass

    def gotoEnd(self):
        if self.ready == True:
            end = self.len - 1
            self['menu'].moveToIndex(end)
            if end > 5:
                self.leftUp()
                self.rightDown()

    def getPic1(self, output):
        f = open(self.pic1, 'wb')
        f.write(output)
        f.close()
        self.showPic1(self.pic1)

    def showPic1(self, pic1):
        if self.xd == False:
            currPic = loadPic(pic1, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic1, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic1'].instance.setPixmap(currPic)
        return

    def getPic2(self, output):
        f = open(self.pic2, 'wb')
        f.write(output)
        f.close()
        self.showPic2(self.pic2)

    def showPic2(self, pic2):
        if self.xd == False:
            currPic = loadPic(pic2, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic2, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic2'].instance.setPixmap(currPic)
        return

    def getPic3(self, output):
        f = open(self.pic3, 'wb')
        f.write(output)
        f.close()
        self.showPic3(self.pic3)

    def showPic3(self, pic3):
        if self.xd == False:
            currPic = loadPic(pic3, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic3, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic3'].instance.setPixmap(currPic)
        return

    def getPic4(self, output):
        f = open(self.pic4, 'wb')
        f.write(output)
        f.close()
        self.showPic4(self.pic4)

    def showPic4(self, pic4):
        if self.xd == False:
            currPic = loadPic(pic4, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic4, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic4'].instance.setPixmap(currPic)
        return

    def getPic5(self, output):
        f = open(self.pic5, 'wb')
        f.write(output)
        f.close()
        self.showPic5(self.pic5)

    def showPic5(self, pic5):
        if self.xd == False:
            currPic = loadPic(pic5, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic5, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic5'].instance.setPixmap(currPic)
        return

    def getPic6(self, output):
        f = open(self.pic6, 'wb')
        f.write(output)
        f.close()
        self.showPic6(self.pic6)

    def showPic6(self, pic6):
        if self.xd == False:
            currPic = loadPic(pic6, 135, 90, 3, 0, 0, 0)
        else:
            currPic = loadPic(pic6, 112, 75, 3, 0, 0, 0)
        if currPic != None:
            self['pic6'].instance.setPixmap(currPic)
        return

    def showPlay1(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play1'].instance.setPixmap(currPic)
        return

    def showPlay2(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play2'].instance.setPixmap(currPic)
        return

    def showPlay3(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play3'].instance.setPixmap(currPic)
        return

    def showPlay4(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play4'].instance.setPixmap(currPic)
        return

    def showPlay5(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play5'].instance.setPixmap(currPic)
        return

    def showPlay6(self, playlogo):
        currPic = loadPic(playlogo, 109, 58, 3, 0, 0, 0)
        if currPic != None:
            self['play6'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def down(self):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            return

        self['menu'].down()
        if c + 1 == len(self.tventries):
            try:
                picurl1 = self.picurllist[0]
                self.download(picurl1, self.getPic1)
                self['pic1'].show()
                self['play1'].show()
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[1]
                self.download(picurl2, self.getPic2)
                self['pic2'].show()
                self['play2'].show()
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[2]
                self.download(picurl3, self.getPic3)
                self['pic3'].show()
                self['play3'].show()
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[3]
                self.download(picurl4, self.getPic4)
                self['pic4'].show()
                self['play4'].show()
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[4]
                self.download(picurl5, self.getPic5)
                self['pic5'].show()
                self['play5'].show()
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[5]
                self.download(picurl6, self.getPic6)
                self['pic6'].show()
                self['play6'].show()
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif c % 6 == 5:
            try:
                picurl1 = self.picurllist[c + 1]
                self.download(picurl1, self.getPic1)
                self['pic1'].show()
                self['play1'].show()
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 2]
                self.download(picurl2, self.getPic2)
                self['pic2'].show()
                self['play2'].show()
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 3]
                self.download(picurl3, self.getPic3)
                self['pic3'].show()
                self['play3'].show()
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 4]
                self.download(picurl4, self.getPic4)
                self['pic4'].show()
                self['play4'].show()
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 5]
                self.download(picurl5, self.getPic5)
                self['pic5'].show()
                self['play5'].show()
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 6]
                self.download(picurl6, self.getPic6)
                self['pic6'].show()
                self['play6'].show()
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

    def up(self):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            return

        self['menu'].up()
        if c == 0:
            l = len(self.tventries)
            d = l % 6
            if d == 0:
                d = 6
            try:
                picurl1 = self.picurllist[l - d]
                self.download(picurl1, self.getPic1)
                self['pic1'].show()
                self['play1'].show()
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[l - d + 1]
                self.download(picurl2, self.getPic2)
                self['pic2'].show()
                self['play2'].show()
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[l - d + 2]
                self.download(picurl3, self.getPic3)
                self['pic3'].show()
                self['play3'].show()
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[l - d + 3]
                self.download(picurl4, self.getPic4)
                self['pic4'].show()
                self['play4'].show()
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[l - d + 4]
                self.download(picurl5, self.getPic5)
                self['pic5'].show()
                self['play5'].show()
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[l - d + 5]
                self.download(picurl6, self.getPic6)
                self['pic6'].show()
                self['play6'].show()
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif c % 6 == 0:
            try:
                picurl1 = self.picurllist[c - 6]
                self.download(picurl1, self.getPic1)
                self['pic1'].show()
                self['play1'].show()
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c - 5]
                self.download(picurl2, self.getPic2)
                self['pic2'].show()
                self['play2'].show()
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c - 4]
                self.download(picurl3, self.getPic3)
                self['pic3'].show()
                self['play3'].show()
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c - 3]
                self.download(picurl4, self.getPic4)
                self['pic4'].show()
                self['play4'].show()
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c - 2]
                self.download(picurl5, self.getPic5)
                self['pic5'].show()
                self['play5'].show()
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c - 1]
                self.download(picurl6, self.getPic6)
                self['pic6'].show()
                self['play6'].show()
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

    def rightDown(self):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            return

        self['menu'].pageDown()
        l = len(self.tventries)
        d = c % 6
        e = l % 6
        if e == 0:
            e = 6
        if c + e >= l:
            pass
        elif d == 0:
            try:
                picurl1 = self.picurllist[c + 6]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 7]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 8]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 9]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 10]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 11]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 1:
            try:
                picurl1 = self.picurllist[c + 5]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 6]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 7]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 8]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 9]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 10]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 2:
            try:
                picurl1 = self.picurllist[c + 4]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 5]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 6]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 7]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 8]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 9]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 3:
            try:
                picurl1 = self.picurllist[c + 3]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 4]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 5]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 6]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 7]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 8]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 4:
            try:
                picurl1 = self.picurllist[c + 2]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 3]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 4]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 5]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 6]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 7]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

        elif d == 5:
            try:
                picurl1 = self.picurllist[c + 1]
                self.download(picurl1, self.getPic1)
            except IndexError:
                self['pic1'].hide()
                self['play1'].hide()

            try:
                picurl2 = self.picurllist[c + 2]
                self.download(picurl2, self.getPic2)
            except IndexError:
                self['pic2'].hide()
                self['play2'].hide()

            try:
                picurl3 = self.picurllist[c + 3]
                self.download(picurl3, self.getPic3)
            except IndexError:
                self['pic3'].hide()
                self['play3'].hide()

            try:
                picurl4 = self.picurllist[c + 4]
                self.download(picurl4, self.getPic4)
            except IndexError:
                self['pic4'].hide()
                self['play4'].hide()

            try:
                picurl5 = self.picurllist[c + 5]
                self.download(picurl5, self.getPic5)
            except IndexError:
                self['pic5'].hide()
                self['play5'].hide()

            try:
                picurl6 = self.picurllist[c + 6]
                self.download(picurl6, self.getPic6)
            except IndexError:
                self['pic6'].hide()
                self['play6'].hide()

    def leftUp(self):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            return

        self['menu'].pageUp()
        d = c % 6
        if c < 6:
            pass
        elif d == 0:
            try:
                picurl1 = self.picurllist[c - 6]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 5]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 4]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 3]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 2]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 1]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 1:
            try:
                picurl1 = self.picurllist[c - 7]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 6]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 5]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 4]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 3]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 2]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 2:
            try:
                picurl1 = self.picurllist[c - 8]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 7]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 6]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 5]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 4]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 3]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 3:
            try:
                picurl1 = self.picurllist[c - 9]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 8]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 7]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 6]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 5]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 4]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 4:
            try:
                picurl1 = self.picurllist[c - 10]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 9]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 8]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 7]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 6]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 5]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        elif d == 5:
            try:
                picurl1 = self.picurllist[c - 11]
                self.download(picurl1, self.getPic1)
                picurl2 = self.picurllist[c - 10]
                self.download(picurl2, self.getPic2)
                picurl3 = self.picurllist[c - 9]
                self.download(picurl3, self.getPic3)
                picurl4 = self.picurllist[c - 8]
                self.download(picurl4, self.getPic4)
                picurl5 = self.picurllist[c - 7]
                self.download(picurl5, self.getPic5)
                picurl6 = self.picurllist[c - 6]
                self.download(picurl6, self.getPic6)
            except IndexError:
                pass

        self['pic1'].show()
        self['pic2'].show()
        self['pic3'].show()
        self['pic4'].show()
        self['pic5'].show()
        self['pic6'].show()
        self['play1'].show()
        self['play2'].show()
        self['play3'].show()
        self['play4'].show()
        self['play5'].show()
        self['play6'].show()

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        self.close()


class TVNews(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="TV-News - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,60" size="350,450" scrollbarMode="showAlways" zPosition="1" />\n\t\t\t\t<widget name="slider_menu" position="344,60" size="22,450" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_450.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="picture" position="480,60" size="412,275" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="picturetext" position="380,335" size="612,60" font="{font};{fontsize2}" valign="center" halign="center" zPosition="1" />\n\t\t\t\t<widget name="picpost" position="306,60" size="400,200" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="267,60" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="463,138" size="85,45" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/play.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,270" size="992,235" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="987,270" size="20,235" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_235.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="250,16" size="512,20" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="statuslabel" position="250,490" size="512,20" font="{font};{fontsize2}" foregroundColor="#858A95" halign="center" zPosition="2" />\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title="TV-News - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="10,70" size="475,540" scrollbarMode="showAlways" zPosition="1" />\n\t\t\t\t<widget name="slider_menu" position="469,70" size="22,540" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_540.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="picture" position="600,70" size="525,350" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="picturetext" position="490,420" size="745,60" font="{font};{fontsize2}" valign="center" halign="center" zPosition="1" />\n\t\t\t\t<widget name="picpost" position="375,70" size="490,245" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="cinlogo" position="325,70" size="60,29" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/cin.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="565,163" size="109,58" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/playHD.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,325" size="1220,315" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="1214,325" size="22,315" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_315.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="364,20" size="512,20" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="statuslabel" position="250,610" size="740,20" font="{font};{fontsize2}" foregroundColor="#858A95" halign="center" zPosition="2" />\n\t\t\t</screen>'

    def __init__(self, session, link):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '24'
                fontsize2 = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '22'
                fontsize2 = '20'
            else:
                self.fontlarge = False
                fontsize = '20'
                fontsize2 = '18'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize,
             'fontsize2': fontsize2}
            self.skin = applySkinVars(TVNews.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '22'
                fontsize2 = '20'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '20'
                fontsize2 = '18'
            else:
                self.fontlarge = False
                fontsize = '18'
                fontsize2 = '16'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize,
             'fontsize2': fontsize2}
            self.skin = applySkinVars(TVNews.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.localhtml2 = '/tmp/tvspielfilm2.html'
        self.current = 'menu'
        self.menulist = []
        self.menulink = []
        self.picurllist = []
        self.pictextlist = []
        self.postlink = link
        self.link = link
        self.trailerurl = ''
        self.titel = ''
        self.hideflag = True
        self.mehrbilder = False
        self.trailer = False
        self.ready = False
        self.postviewready = False
        self['picture'] = Pixmap()
        self['picpost'] = Pixmap()
        self['cinlogo'] = Pixmap()
        self['cinlogo'].hide()
        self['playlogo'] = Pixmap()
        self['playlogo'].hide()
        self['statuslabel'] = Label('')
        self['statuslabel'].hide()
        self['picturetext'] = Label('')
        self['textpage'] = ScrollLabel('')
        self['slider_menu'] = Pixmap()
        self['slider_menu'].hide()
        self['slider_textpage'] = Pixmap()
        self['slider_textpage'].hide()
        self['menu'] = ItemList([])
        self['label'] = Label('')
        self['actions'] = ActionMap(['OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'ChannelSelectBaseActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'nextBouquet': self.zap,
         'prevBouquet': self.zap,
         'blue': self.hideScreen,
         'displayHelp': self.infoScreen}, -1)
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        self.getInfoTimer = eTimer()
        self.getInfoTimer.callback.append(self.downloadFullPage(link, self.makeTVNews))
        self.getInfoTimer.start(500, True)

    def makeTVNews(self, string):
        output = open(self.localhtml, 'r').read()
        titel = search('<title>(.*?)</title>', output)
        self.titel = titel.group(1).replace('&amp;', '&')
        self.setTitle(self.titel)
        startpos = output.find('<div class="content-area">')
        endpos = output.find('<div class="widget-box tvsearch">')
        bereich = output[startpos:endpos]
        bereich = re.sub('<ul class=".*?</ul>', '', bereich, flags=re.S)
        bereich = re.sub('<script.*?</script>', '', bereich, flags=re.S)
        bereich = re.sub('<section id="content">.*?</section>', '', bereich, flags=re.S)
        bereich = sub('<a href="https://tvspielfilm-abo.de.*?\n', '', bereich)
        bereich = sub('<a href="http://www.tvspielfilm.de/news".*?\n', '', bereich)
        bereich = transHTML(bereich)
        link = re.findall('<a href="(.*?)" target="_self"', bereich)
        picurl = re.findall('<img src="(.*?)"', bereich)
        picurltvsp = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/TV-Spielfilm-Logo.svg/500px-TV-Spielfilm-Logo.svg.png'
        name = re.findall('<span class="headline">(.*?)</span>', bereich)
        idx = 0
        for x in name:
            idx += 1

        for i in range(idx):
            try:
                self.picurllist.append(picurl[i])
            except IndexError:
                self.picurllist.append(picurltvsp)

            try:
                self.pictextlist.append(name[i])
            except IndexError:
                self.pictextlist.append(' ')

            try:
                res = ['']
                if self.backcolor == True:
                    if self.xd == False:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(475, 30), font=-1, backcolor_sel=self.back_color, text=''))
                    else:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(350, 30), font=0, backcolor_sel=self.back_color, text=''))
                if self.xd == False:
                    res.append(MultiContentEntryText(pos=(0, 1), size=(475, 28), font=-1, flags=RT_HALIGN_LEFT, text=name[i]))
                else:
                    res.append(MultiContentEntryText(pos=(0, 2), size=(350, 26), font=0, flags=RT_HALIGN_LEFT, text=name[i]))
                self.menulist.append(res)
                self.menulink.append(link[i])
            except IndexError:
                pass

        self['menu'].l.setItemHeight(30)
        self['menu'].l.setList(self.menulist)
        self['slider_menu'].show()
        try:
            self.download(picurl[0], self.getPic)
        except IndexError:
            self.download(picurltvsp, self.getPic)

        try:
            self['picturetext'].setText(name[0])
        except IndexError:
            self['picturetext'].setText('')

        self.ready = True

    def makePostviewPage(self, string):
        output = open(self.localhtml2, 'r').read()
        self['picture'].hide()
        self['picturetext'].hide()
        self['statuslabel'].hide()
        self['menu'].hide()
        self['slider_menu'].hide()
        if search('<title>', output) is not None:
            titel = search('<title>(.*?)</title>', output)
            titel = titel.group(1).replace('&amp;', '&')
            self.title = sub(' - TV Spielfilm', '', titel)
            self.setTitle(self.title)
        output = sub('</dl>.\n\\s+</div>.\n\\s+</section>', '</cast>', output)
        startpos = output.find('<div class="content-area">')
        endpos = output.find('>Weitere Bildergalerien<')
        if endpos == -1:
            endpos = output.find('</cast>')
            if endpos == -1:
                endpos = output.find('<h2 class="broadcast-info">')
                if endpos == -1:
                    endpos = output.find('<div class="OUTBRAIN"')
                    if endpos == -1:
                        endpos = output.find('</footer>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        bereich = sub('\r', '', bereich)
        bereich = re.sub('<ul class="slidelist">.*?</ul>', '', bereich, flags=re.S)
        bereich = re.sub('<script.*?</script>', '', bereich, flags=re.S)
        bereich = re.sub('<style.*?</style>', '', bereich, flags=re.S)
        bereich = re.sub('<div class="text" id=".*?</div>', '', bereich, flags=re.S)
        if search('rl: .https://video.tvspielfilm.de/.*?mp4', output) is not None:
            trailerurl = search('rl: .https://video.tvspielfilm.de/(.*?).mp4', output)
            self.trailerurl = 'https://video.tvspielfilm.de/' + trailerurl.group(1) + '.mp4'
            self.trailer = True
        else:
            self.trailer = False
        bereich = sub('" alt=".*?" width="', '" width="', bereich)
        picurl = search('<img src="(.*?)" width="', bereich)
        if picurl is not None:
            self.download(picurl.group(1), self.getPicPost)
            self['picpost'].show()
        else:
            picurl = search('<meta property="og:image" content="(.*?)"', output)
            if picurl is not None:
                self.download(picurl.group(1), self.getPicPost)
                self['picpost'].show()
            else:
                picurl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/TV-Spielfilm-Logo.svg/500px-TV-Spielfilm-Logo.svg.png'
                self.download(picurl, self.getPicPost)
                self['picpost'].show()
        if search('<div class="film-gallery">', output) is not None:
            self.mehrbilder = True
            if self.trailer == True:
                self['label'].setText('OK = Zum Video')
            else:
                self['label'].setText('OK = Fotostrecke')
        else:
            self.mehrbilder = False
            if self.trailer == True:
                self['label'].setText('OK = Zum Video')
            else:
                self['label'].setText('OK = Vollbild')
        bereich = sub('<blockquote class="broadcast-detail__quote">\n\\s+<p>', '<p>>> ', bereich)
        bereich = sub('</p>\n[ ]+</blockquote>', ' <<</p>', bereich)
        bereich = sub('<section class="serial-info">\n\\s+', '<p>', bereich)
        bereich = sub('</section>', '</p>', bereich)
        bereich = sub('</span>\\s+', '</span>, ', bereich)
        bereich = sub('<li class="titleName">', '</p><p> \xc2\xb7 ', bereich)
        bereich = sub('<li class="subtitleName">', '#sub#', bereich)
        bereich = sub('ShowView [0-9-]+', '', bereich)
        bereich = sub('<a href=".*?">', '', bereich)
        bereich = sub('<h1.*?>', '<p>', bereich)
        bereich = sub('</h1>', '</p>', bereich)
        bereich = sub('<h3.*?>', '<p>', bereich)
        bereich = sub('</h3>', '</p>', bereich)
        bereich = sub('<br/>', '</p><p>', bereich)
        bereich = sub('<p>\n', '<p>', bereich)
        bereich = sub('<dt>', '<p>', bereich)
        bereich = sub('<dt class="role">', '<p>', bereich)
        bereich = sub('</dt>\n\\s+<dd>\n\\s+', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd>', ' ', bereich)
        bereich = sub('</dt>\n\\s+<dd class="name">', ': ', bereich)
        bereich = sub('\n[ ]+,', ',', bereich)
        bereich = sub(', [ ]+', ', ', bereich)
        bereich = sub('</a>', '</p>', bereich)
        bereich = sub('\n\\s+</dd>', '</p>', bereich)
        bereich = sub('</a></dd>', '</p>', bereich)
        bereich = sub('</dd>', '</p>', bereich)
        bereich = sub('</dt>', '</p>', bereich)
        text = ''
        a = findall('<p.*?>(.*?)</p>', bereich)
        for x in a:
            if x != '':
                text = text + x + '\n\n'

        text = sub('<[^>]*>', '', text)
        text = sub('</p<<p<', '\n\n', text)
        text = sub('\n\\s+\n*', '\n\n', text)
        text = sub('#sub#', '\n  ', text)
        if self.fontlarge == True:
            if self.xd == False:
                fill = '____________________________________________________________________________________________________________________________________\nTV Spielfilm Online'
            else:
                fill = '________________________________________________________________________________________________________________________\nTV Spielfilm Online'
        elif self.xd == False:
            fill = '____________________________________________________________________________________________________________________________________________________\nTV Spielfilm Online'
        else:
            fill = '_________________________________________________________________________________________________________________________________________\nTV Spielfilm Online'
        self.POSTtext = text + fill
        self['textpage'].setText(self.POSTtext)
        self['textpage'].show()
        self['slider_textpage'].show()
        self.showEPG = False
        self.postviewready = True
        return

    def ok(self):
        if self.hideflag == False:
            return
        else:
            if self.current == 'menu' and self.ready == True:
                self.selectPage('ok')
            elif self.current == 'postview' and self.postviewready == True:
                if self.trailer == True:
                    sref = eServiceReference(4097, 0, self.trailerurl)
                    sref.setName(self.title)
                    self.session.open(MoviePlayer, sref)
                elif self.mehrbilder == True:
                    if search('/playboy/', self.postlink) is None:
                        self.session.openWithCallback(self.picReturn, TVNewsPicShow, self.postlink)
                    else:
                        self.session.openWithCallback(self.picReturn, PlayboyPicShow, self.postlink)
                else:
                    self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)
            return

    def selectPage(self, action):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            pass

        try:
            self.postlink = self.menulink[c]
            if action == 'ok':
                if search('/playboy/', self.postlink) is not None:
                    self.session.openWithCallback(self.picReturn, PlayboyPicShow, self.postlink)
                elif search('blog.tvspielfilm.de', self.postlink) is not None:
                    self.session.openWithCallback(self.picReturn, TVBlog, self.postlink, True)
                elif search('www.tvspielfilm.de', self.postlink) is not None:
                    self.current = 'postview'
                    self.downloadPostPage(self.postlink, self.makePostviewPage)
                else:
                    self['statuslabel'].setText('Kein Artikel verf\xfcgbar')
                    self['statuslabel'].show()
        except IndexError:
            pass

        return

    def getPic(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPic(self.picfile)

    def showPic(self, picture):
        if self.xd == False:
            currPic = loadPic(picture, 525, 350, 3, 0, 0, 0)
        else:
            currPic = loadPic(picture, 412, 275, 3, 0, 0, 0)
        if currPic != None:
            self['picture'].instance.setPixmap(currPic)
        return

    def getPicPost(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPicPost(self.picfile)

    def showPicPost(self, picpost):
        if self.xd == False:
            currPic = loadPic(picpost, 490, 245, 3, 0, 0, 0)
        else:
            currPic = loadPic(picpost, 400, 200, 3, 0, 0, 0)
        if currPic != None:
            self['picpost'].instance.setPixmap(currPic)
            if self.trailer == True:
                self['cinlogo'].show()
                self['playlogo'].show()
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadPostPage(self, link, name):
        downloadPage(link, self.localhtml2).addCallback(name).addErrback(self.downloadError)

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        try:
            error = output.getErrorMessage()
            self.session.open(MessageBox, 'Download Fehler:\n%s' % error, MessageBox.TYPE_ERROR)
        except AttributeError:
            self.session.open(MessageBox, 'Download Fehler:\n%s' % output, MessageBox.TYPE_ERROR)

        self['statuslabel'].setText('Download Fehler')
        self['statuslabel'].show()

    def showTVNews(self):
        self.current = 'menu'
        self['menu'].show()
        self['slider_menu'].show()
        self['label'].setText('OK = Zum Artikel')
        self['picture'].show()
        self['picturetext'].show()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['cinlogo'].hide()
        self['playlogo'].hide()
        self['statuslabel'].hide()

    def down(self):
        try:
            if self.current == 'menu':
                self['menu'].down()
                c = self['menu'].getSelectedIndex()
                picurl = self.picurllist[c]
                self.download(picurl, self.getPic)
                pictext = self.pictextlist[c]
                self['picturetext'].setText(pictext)
                self['statuslabel'].hide()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def up(self):
        try:
            if self.current == 'menu':
                self['menu'].up()
                c = self['menu'].getSelectedIndex()
                picurl = self.picurllist[c]
                self.download(picurl, self.getPic)
                pictext = self.pictextlist[c]
                self['picturetext'].setText(pictext)
                self['statuslabel'].hide()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def rightDown(self):
        try:
            if self.current == 'menu':
                self['menu'].pageDown()
                c = self['menu'].getSelectedIndex()
                picurl = self.picurllist[c]
                self.download(picurl, self.getPic)
                pictext = self.pictextlist[c]
                self['picturetext'].setText(pictext)
                self['statuslabel'].hide()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def leftUp(self):
        try:
            if self.current == 'menu':
                self['menu'].pageUp()
                c = self['menu'].getSelectedIndex()
                picurl = self.picurllist[c]
                self.download(picurl, self.getPic)
                pictext = self.pictextlist[c]
                self['picturetext'].setText(pictext)
                self['statuslabel'].hide()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def zap(self):
        servicelist = self.session.instantiateDialog(ChannelSelection)
        self.session.execDialog(servicelist)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def picReturn(self):
        pass

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if self.current == 'menu':
            self.close()
        else:
            self.postviewready = False
            self.setTitle('')
            self.setTitle(self.titel)
            self.showTVNews()


class TVBlog(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="TV Spielfilm Blog">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/blog.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="800,100" size="200,250" scrollbarMode="showNever" zPosition="1" />\n\t\t\t\t<widget name="meta" position="10,60" size="224,50" font="{font};{fontsize2}" foregroundColor="#E95D85" halign="left" zPosition="1" />\n\t\t\t\t<widget name="item" position="10,385" size="100,25" font="{font};{fontsize2}" foregroundColor="#E95D85" halign="left" zPosition="1" />\n\t\t\t\t<widget name="picture" position="243,60" size="525,350" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="topictext" position="10,415" size="992,22" font="{font};{fontsize}" halign="left" zPosition="1" />\n\t\t\t\t<widget name="previewtext" position="10,442" size="992,70" font="{font};{fontsize}" halign="left" zPosition="1" />\n\t\t\t\t<widget name="picpost" position="306,60" size="400,200" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="463,138" size="85,45" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/play.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,270" size="992,235" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="987,270" size="20,235" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_b235.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="250,5" size="512,40" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" valign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="statuslabel" position="250,490" size="512,20" font="{font};{fontsize2}" foregroundColor="#858A95" halign="center" zPosition="2" />\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title="TV Spielfilm Blog">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/blogHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="menu" position="950,150" size="250,250" scrollbarMode="showNever" zPosition="1" />\n\t\t\t\t<widget name="meta" position="10,70" size="300,55" font="{font};{fontsize2}" foregroundColor="#F2A5BC" halign="left" zPosition="1" />\n\t\t\t\t<widget name="item" position="10,445" size="120,25" font="{font};{fontsize2}" foregroundColor="#F2A5BC" halign="left" zPosition="1" />\n\t\t\t\t<widget name="picture" position="320,70" size="600,400" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="topictext" position="10,475" size="1220,25" font="{font};{fontsize}" halign="left" zPosition="1" />\n\t\t\t\t<widget name="previewtext" position="10,510" size="1220,130" font="{font};{fontsize}" halign="left" zPosition="1" />\n\t\t\t\t<widget name="picpost" position="375,70" size="490,245" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="playlogo" position="565,163" size="109,58" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/playHD.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="textpage" position="10,325" size="1220,315" font="{font};{fontsize}" halign="left" zPosition="0" />\n\t\t\t\t<widget name="slider_textpage" position="1214,325" size="22,315" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/slider/slider_b315.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="364,10" size="512,40" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" valign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="statuslabel" position="250,610" size="740,20" font="{font};{fontsize2}" foregroundColor="#858A95" halign="center" zPosition="2" />\n\t\t\t</screen>'

    def __init__(self, session, link, post):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '24'
                fontsize2 = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '22'
                fontsize2 = '20'
            else:
                self.fontlarge = False
                fontsize = '20'
                fontsize2 = '18'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize,
             'fontsize2': fontsize2}
            self.skin = applySkinVars(TVBlog.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.fontlarge = True
                fontsize = '22'
                fontsize2 = '20'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.fontlarge = True
                fontsize = '20'
                fontsize2 = '18'
            else:
                self.fontlarge = False
                fontsize = '18'
                fontsize2 = '16'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize,
             'fontsize2': fontsize2}
            self.skin = applySkinVars(TVBlog.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://blog.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.localhtml2 = '/tmp/tvspielfilm2.html'
        self.current = 'menu'
        self.menulist = []
        self.menulink = []
        self.picurllist = []
        self.toptextlist = []
        self.textlist = []
        self.metalist = []
        self.post = post
        self.postlink = link
        self.link = link
        self.trailerurl = ''
        self.titel = ''
        self.hideflag = True
        self.trailer = False
        self.ready = False
        self.postviewready = False
        self.count = 1
        self.max = 1
        self['picture'] = Pixmap()
        self['picpost'] = Pixmap()
        self['playlogo'] = Pixmap()
        self['playlogo'].hide()
        self['statuslabel'] = Label('')
        self['statuslabel'].hide()
        self['item'] = Label('')
        self['meta'] = Label('')
        self['topictext'] = Label('')
        self['previewtext'] = Label('')
        self['textpage'] = ScrollLabel('')
        self['slider_textpage'] = Pixmap()
        self['slider_textpage'].hide()
        self['menu'] = MenuList([])
        self['menu'].hide()
        self['label'] = Label('OK = Post, Up/Down = Blog\nBouquet = +- Seite')
        self['actions'] = ActionMap(['OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'ChannelSelectBaseActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'nextBouquet': self.nextPage,
         'prevBouquet': self.prevPage,
         'blue': self.hideScreen,
         'displayHelp': self.infoScreen}, -1)
        self.getInfoTimer = eTimer()
        if self.post == False:
            self.getInfoTimer.callback.append(self.downloadFullPage(link, self.makeTVBlog))
        else:
            self.current = 'postview'
            self.getInfoTimer.callback.append(self.downloadPostPage(link, self.makePostviewPage))
        self.getInfoTimer.start(500, True)

    def makeTVBlog(self, string):
        output = open(self.localhtml, 'r').read()
        titel = search('<title>(.*?)</title>', output)
        self.titel = titel.group(1).replace('TV Spielfilm Blog | ', '')
        self.setTitle(self.titel)
        startpos = output.find('<div id="content">')
        endpos = output.find('<!-- end #content-->')
        bereich = output[startpos:endpos]
        bereich = sub('<iframe width="[0-9]+" height="[0-9]+" src="//www.youtube.com/embed/', '<img width="785" height="510" src="http://img.youtube.com/vi/', bereich)
        bereich = sub('" frameborder="0"', '/0.jpg"', bereich)
        bereich = sub('<img class="replacement" src="">', '<img width="630" height="404" src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/TV-Spielfilm-Logo.svg/630px-TV-Spielfilm-Logo.svg.png">', bereich)
        bereich = sub('<i class="fa fa-heart-o">', 'Likes: ', bereich)
        bereich = sub('&bull;', '\xb7', bereich)
        bereich = sub('<a href=".*?>', '', bereich)
        bereich = sub('<a title=".*?>', '', bereich)
        bereich = sub('<span class=".*?>', '', bereich)
        bereich = sub('</span>', '', bereich)
        bereich = sub('<strong>', '', bereich)
        bereich = sub('</strong', '', bereich)
        bereich = sub('</a>', ' ', bereich)
        bereich = sub('<i>', '', bereich)
        bereich = sub('</i>', '', bereich)
        bereich = sub('<b>', '', bereich)
        bereich = sub('</b>', '', bereich)
        bereich = sub('<del>', '', bereich)
        bereich = sub('</del>', '', bereich)
        bereich = sub('<br />\n', '', bereich)
        bereich = sub('<div><em>', '<p>', bereich)
        bereich = sub('</em></div>', '</p>', bereich)
        bereich = sub('<em>', '', bereich)
        bereich = sub('</em>', '', bereich)
        bereich = sub('</p></blockquote>\n<p>', '', bereich)
        bereich = transHTML(bereich)
        picurl = re.findall('<img width="[0-9]+" height="[0-9]+" src="(.*?)"', bereich)
        picurlblog = 'http://blog.tvspielfilm.de/wp-content/themes/tvspielfilm/images/header.png'
        metatext = re.findall('<p class="meta">(.*?)</p>', bereich, flags=re.S)
        toptext = re.findall('<h2 class="upperfont">(.*?)</h2>', bereich)
        text = re.findall('<div class="entry">.*?<p>(.*?)</p>', bereich, flags=re.S)
        lnk = re.findall('<a class="mainbutton" href="(.*?)"', bereich)
        idx = 0
        for x in toptext:
            idx += 1

        for i in range(idx):
            try:
                self.toptextlist.append(toptext[i])
            except IndexError:
                self.toptextlist.append(' ')

            try:
                self.textlist.append(text[i])
            except IndexError:
                self.textlist.append(' ')

            try:
                self.picurllist.append(picurl[i])
            except IndexError:
                self.picurllist.append(picurlblog)

            try:
                meta = sub('\n', '', metatext[i])
                meta = sub('[ ]+', ' ', meta)
                meta = sub('\t', '', meta)
                self.metalist.append(meta)
            except IndexError:
                self.metalist.append(' ')

            self.menulist.append(toptext[i])
            self.menulink.append(lnk[i])

        self['menu'].l.setList(self.menulist)
        self['menu'].moveToIndex(0)
        self.max = len(self.menulist)
        item = 'Post 1/%s' % str(self.max)
        self['item'].setText(item)
        try:
            self.download(picurl[0], self.getPic)
        except IndexError:
            self.download(picurlblog, self.getPic)

        try:
            meta = sub('\n', '', metatext[0])
            meta = sub('[ ]+', ' ', meta)
            meta = sub('\t', '', meta)
            self['meta'].setText(meta)
        except IndexError:
            self['meta'].setText('')

        try:
            self['topictext'].setText(toptext[0])
        except IndexError:
            self['topictext'].setText('')

        try:
            self['previewtext'].setText(text[0])
        except IndexError:
            self['previewtext'].setText('')

        if search('<a class="next page-numbers"', output) is not None:
            self['label'].setText('OK = Post, Up/Down = Blog\nBouquet = +- Seite')
        else:
            self['label'].setText('OK = Post, Up/Down = Blog\nLetzte Blog Seite')
        self.ready = True
        return

    def makePostviewPage(self, string):
        output = open(self.localhtml2, 'r').read()
        self['item'].hide()
        self['picture'].hide()
        self['topictext'].hide()
        self['previewtext'].hide()
        self['statuslabel'].hide()
        if search('<title>', output) is not None:
            titel = search('<title>(.*?)</title>', output)
            self.title = transHTML(titel.group(1)).replace(' | TV Spielfilm Blog | TV SPIELFILM bloggt aus Hollywood, aus dem Kino und von der Wohnzimmercouch', '')
            self.setTitle(self.title)
        startpos = output.find('<div id="content">')
        endpos = output.find('<!-- #homecontent -->')
        bereich = output[startpos:endpos]
        if search('<source type="video/mp4" src=".*?mp4"', bereich) is not None:
            trailerurl = search('<source type="video/mp4" src="(.*?)"', bereich)
            self.trailerurl = trailerurl.group(1)
            self['label'].setText('OK = Zum Video')
            self.trailer = True
        elif search('src="//www.youtube.com/embed/', bereich) is not None:
            trailerurl = search('src="//www.youtube.com/embed/(.*?)"', bereich)
            self.trailerurl = trailerurl.group(1)
            self['label'].setText('OK = Zum Video')
            self.trailer = True
        else:
            self['label'].setText('OK = Vollbild')
            self.trailer = False
        bereich = sub('<iframe width="[0-9]+" height="[0-9]+" src="//www.youtube.com/embed/', '<img width="785" height="510" src="http://img.youtube.com/vi/', bereich)
        bereich = sub('" frameborder="0"', '/0.jpg"', bereich)
        picurl = search('<img width="[0-9]+" height="[0-9]+" src="(.*?)"', bereich)
        if picurl is not None:
            self.download(picurl.group(1), self.getPicPost)
            self['picpost'].show()
        else:
            picurl = 'http://blog.tvspielfilm.de/wp-content/themes/tvspielfilm/images/header.png'
            self.download(picurl, self.getPicPost)
            self['picpost'].show()
        meta = search('<p class="meta">(.*?)</p>', bereich, flags=re.S)
        if meta is not None:
            meta = sub('\n', '', meta.group(1))
            meta = sub('[ ]+', ' ', meta)
            meta = sub('\t', '', meta)
            meta = sub('[ ]+von', 'Von', meta)
            meta = sub('&bull;', '\xb7', meta)
            meta = sub('<i class="fa fa-heart-o">', 'Likes: ', meta)
            meta = '<p>' + meta + '</p>'
        bereich = sub('<div>', '<p>', bereich)
        bereich = sub('</div>', '</p>', bereich)
        bereich = sub('<p><b>[^A-Za-z0-9]+</b></p>', '', bereich)
        bereich = sub('<h1 class="heading">', '<p>', bereich)
        bereich = sub('<h3 id="comments-title">', '<p>', bereich)
        bereich = sub('</h[0-9]+>', '</p>', bereich)
        bereich = sub('<cite class="fn">', '<p>', bereich)
        bereich = sub('</cite> <span class="says">', ' ', bereich)
        bereich = sub('<span.*?></span>', '', bereich)
        bereich = sub('</span>', '</p>', bereich)
        bereich = sub('class="wp-smiley" />', '>:-)', bereich)
        bereich = sub('<div class="comment-meta commentmetadata">', '<p>', bereich)
        bereich = transHTML(bereich)
        text = meta
        a = findall('<p>(.*?)</p>', bereich.replace('\r', '').replace('\n', ''))
        for x in a:
            if x != '':
                text = text + x + '\n\n'

        text = sub('<[^>]*>', '', text)
        text = sub('</p<<p<', '\n\n', text)
        text = sub('\n\\s+\n*', '\n\n', text)
        if self.fontlarge == True:
            if self.xd == False:
                fill = '____________________________________________________________________________________________________________________________________\nTV Spielfilm Blog'
            else:
                fill = '________________________________________________________________________________________________________________________\nTV Spielfilm Blog'
        elif self.xd == False:
            fill = '____________________________________________________________________________________________________________________________________________________\nTV Spielfilm Blog'
        else:
            fill = '_________________________________________________________________________________________________________________________________________\nTV Spielfilm Blog'
        text = text + fill
        self['textpage'].setText(text)
        self['textpage'].show()
        self['slider_textpage'].show()
        self.postviewready = True
        return

    def ok(self):
        if self.hideflag == False:
            return
        else:
            if self.current == 'menu' and self.ready == True:
                self.selectPage('ok')
            elif self.current == 'postview' and self.postviewready == True:
                if self.trailer == True:
                    if search('blog.tvspielfilm.de', self.trailerurl) is not None:
                        sref = eServiceReference(4097, 0, self.trailerurl)
                        sref.setName(self.title)
                        self.session.open(MoviePlayer, sref)
                    else:
                        video = self.getYouTubeURL(self.trailerurl)
                        if video is not None:
                            sref = eServiceReference(4097, 0, video)
                            sref.setName(self.title)
                            self.session.open(MoviePlayer, sref)
                        else:
                            self.session.open(MessageBox, '\nYouTube Video nicht gefunden', MessageBox.TYPE_ERROR)
                else:
                    self.session.openWithCallback(self.showPicPost(self.picfile), FullScreen)
            return

    def selectPage(self, action):
        try:
            c = self['menu'].getSelectedIndex()
        except IndexError:
            pass

        try:
            self.postlink = self.menulink[c]
            if action == 'ok':
                if search('blog.tvspielfilm.de', self.postlink) is not None:
                    self.current = 'postview'
                    self.downloadPostPage(self.postlink, self.makePostviewPage)
                else:
                    self['statuslabel'].setText('Kein Artikel verf\xfcgbar')
                    self['statuslabel'].show()
        except IndexError:
            pass

        return

    def nextPage(self):
        if self.ready == True:
            self.ready = False
            self.count += 1
            self.link = sub('/page/[0-9]+', '/page/' + str(self.count), self.link)
            self.menulist = []
            self.menulink = []
            self.picurllist = []
            self.metalist = []
            self.toptextlist = []
            self.textlist = []
            self['statuslabel'].hide()
            self.getInfoTimer.callback.append(self.downloadFullPage(self.link, self.makeTVBlog))

    def prevPage(self):
        if self.ready == True:
            self.ready = False
            self.count -= 1
            self.link = sub('/page/[0-9]+', '/page/' + str(self.count), self.link)
            self.menulist = []
            self.menulink = []
            self.picurllist = []
            self.metalist = []
            self.toptextlist = []
            self.textlist = []
            self['statuslabel'].hide()
            self.getInfoTimer.callback.append(self.downloadFullPage(self.link, self.makeTVBlog))

    def getPic(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPic(self.picfile)

    def showPic(self, picture):
        if self.xd == False:
            currPic = loadPic(picture, 600, 400, 3, 0, 0, 0)
        else:
            currPic = loadPic(picture, 525, 350, 3, 0, 0, 0)
        if currPic != None:
            self['picture'].instance.setPixmap(currPic)
        return

    def getPicPost(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPicPost(self.picfile)

    def showPicPost(self, picpost):
        if self.xd == False:
            currPic = loadPic(picpost, 490, 245, 3, 0, 0, 0)
        else:
            currPic = loadPic(picpost, 400, 200, 3, 0, 0, 0)
        if currPic != None:
            self['picpost'].instance.setPixmap(currPic)
            if self.trailer == True:
                self['playlogo'].show()
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadPostPage(self, link, name):
        downloadPage(link, self.localhtml2).addCallback(name).addErrback(self.downloadError)

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        self['statuslabel'].setText('Download Fehler')
        self['statuslabel'].show()
        self.ready = True

    def showTVBlog(self):
        self.current = 'menu'
        self['label'].setText('OK = Post, Up/Down = Blog\nBouquet = +- Seite')
        self['item'].show()
        self['picture'].show()
        self['topictext'].show()
        self['previewtext'].show()
        self['textpage'].hide()
        self['slider_textpage'].hide()
        self['picpost'].hide()
        self['playlogo'].hide()
        self['statuslabel'].hide()

    def down(self):
        try:
            if self.current == 'menu':
                self['menu'].down()
                c = self['menu'].getSelectedIndex()
                item = 'Post %s/%s' % (str(c + 1), str(self.max))
                self['item'].setText(item)
                picurl = self.picurllist[c]
                self.download(picurl, self.getPic)
                meta = self.metalist[c]
                self['meta'].setText(meta)
                toptext = self.toptextlist[c]
                self['topictext'].setText(toptext)
                text = self.textlist[c]
                self['previewtext'].setText(text)
                self['statuslabel'].hide()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def up(self):
        try:
            if self.current == 'menu':
                self['menu'].up()
                c = self['menu'].getSelectedIndex()
                item = 'Post %s/%s' % (str(c + 1), str(self.max))
                self['item'].setText(item)
                picurl = self.picurllist[c]
                self.download(picurl, self.getPic)
                meta = self.metalist[c]
                self['meta'].setText(meta)
                toptext = self.toptextlist[c]
                self['topictext'].setText(toptext)
                text = self.textlist[c]
                self['previewtext'].setText(text)
                self['statuslabel'].hide()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def rightDown(self):
        try:
            if self.current == 'menu':
                self['menu'].pageDown()
                c = self['menu'].getSelectedIndex()
                item = 'Post %s/%s' % (str(c + 1), str(self.max))
                self['item'].setText(item)
                picurl = self.picurllist[c]
                self.download(picurl, self.getPic)
                meta = self.metalist[c]
                self['meta'].setText(meta)
                toptext = self.toptextlist[c]
                self['topictext'].setText(toptext)
                text = self.textlist[c]
                self['previewtext'].setText(text)
                self['statuslabel'].hide()
            else:
                self['textpage'].pageDown()
        except IndexError:
            pass

    def leftUp(self):
        try:
            if self.current == 'menu':
                self['menu'].pageUp()
                c = self['menu'].getSelectedIndex()
                item = 'Post %s/%s' % (str(c + 1), str(self.max))
                self['item'].setText(item)
                picurl = self.picurllist[c]
                self.download(picurl, self.getPic)
                meta = self.metalist[c]
                self['meta'].setText(meta)
                toptext = self.toptextlist[c]
                self['topictext'].setText(toptext)
                text = self.textlist[c]
                self['previewtext'].setText(text)
                self['statuslabel'].hide()
            else:
                self['textpage'].pageUp()
        except IndexError:
            pass

    def getYouTubeURL(self, trailer_id):
        header = {'User-Agent': 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100627 Firefox/3.6.6',
         'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
         'Accept-Language': 'en-us,en;q=0.5'}
        VIDEO_FMT_PRIORITY_MAP = {'38': 3,
         '37': 1,
         '22': 2,
         '35': 5,
         '18': 4,
         '34': 6}
        trailer_url = None
        watch_url = 'http://www.youtube.com/watch?v=%s&gl=US&hl=en' % trailer_id
        watchrequest = Request(watch_url, None, header)
        try:
            watchvideopage = urlopen(watchrequest).read()
        except (HTTPError,
         URLError,
         HTTPException,
         socket.error,
         AttributeError):
            return trailer_url

        for el in ['&el=embedded',
         '&el=detailpage',
         '&el=vevo',
         '']:
            info_url = 'http://www.youtube.com/get_video_info?&video_id=%s%s&ps=default&eurl=&gl=US&hl=en' % (trailer_id, el)
            request = Request(info_url, None, header)
            try:
                infopage = urlopen(request).read()
                videoinfo = parse_qs(infopage)
                if ('url_encoded_fmt_stream_map' or 'fmt_url_map') in videoinfo:
                    break
            except (HTTPError,
             URLError,
             HTTPException,
             socket.error,
             AttributeError):
                return trailer_url

        if ('url_encoded_fmt_stream_map' or 'fmt_url_map') not in videoinfo:
            return trailer_url
        else:
            video_fmt_map = {}
            fmt_infomap = {}
            if videoinfo.has_key('url_encoded_fmt_stream_map'):
                tmp_fmtUrlDATA = videoinfo['url_encoded_fmt_stream_map'][0].split(',')
            else:
                tmp_fmtUrlDATA = videoinfo['fmt_url_map'][0].split(',')
            for fmtstring in tmp_fmtUrlDATA:
                fmturl = fmtid = ''
                if videoinfo.has_key('url_encoded_fmt_stream_map'):
                    try:
                        for arg in fmtstring.split('&'):
                            if arg.find('=') >= 0:
                                key, value = arg.split('=')
                                if key == 'itag':
                                    if len(value) > 3:
                                        value = value[:2]
                                    fmtid = value
                                elif key == 'url':
                                    fmturl = value

                        if fmtid != '' and fmturl != '' and VIDEO_FMT_PRIORITY_MAP.has_key(fmtid):
                            video_fmt_map[VIDEO_FMT_PRIORITY_MAP[fmtid]] = {'fmtid': fmtid,
                             'fmturl': unquote_plus(fmturl)}
                            fmt_infomap[int(fmtid)] = '%s' % unquote_plus(fmturl)
                        fmturl = fmtid = ''
                    except:
                        return trailer_url

                else:
                    fmtid, fmturl = fmtstring.split('|')
                if VIDEO_FMT_PRIORITY_MAP.has_key(fmtid) and fmtid != '':
                    video_fmt_map[VIDEO_FMT_PRIORITY_MAP[fmtid]] = {'fmtid': fmtid,
                     'fmturl': unquote_plus(fmturl)}
                    fmt_infomap[int(fmtid)] = unquote_plus(fmturl)

            if video_fmt_map and len(video_fmt_map):
                best_video = video_fmt_map[sorted(video_fmt_map.iterkeys())[0]]
                trailer_url = '%s' % best_video['fmturl'].split(';')[0]
            return trailer_url

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def picReturn(self):
        pass

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if self.current == 'menu':
            self.close()
        else:
            self.postviewready = False
            self.setTitle('')
            self.setTitle(self.titel)
            self.showTVBlog()


class TVNewsPicShow(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="Fotostrecke - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="250,7" size="512,40" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="picture" position="150,60" size="711,400" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="picindex" position="862,60" size="140,22" font="{font};{fontsize}" halign="right" zPosition="1" />\n\t\t\t\t<widget name="pictext" position="10,462" size="992,55" font="{font};{fontsize}" halign="center" zPosition="1" />\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title="Fotostrecke - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="364,10" size="512,44" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="picture" position="175,70" size="889,500" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="picindex" position="1065,70" size="165,24" font="{font};{fontsize}" halign="right" zPosition="1" />\n\t\t\t\t<widget name="pictext" position="10,577" size="1220,63" font="{font};{fontsize}" halign="center" zPosition="1" />\n\t\t\t</screen>'

    def __init__(self, session, link):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                fontsize = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                fontsize = '20'
            else:
                fontsize = '18'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVNewsPicShow.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                fontsize = '20'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                fontsize = '18'
            else:
                fontsize = '16'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize}
            self.skin = applySkinVars(TVNewsPicShow.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.hideflag = True
        self.link = link
        self.pixlist = []
        self.topline = []
        self.titel = ''
        self.picmax = 1
        self.count = 0
        self['picture'] = Pixmap()
        self['picindex'] = Label('')
        self['pictext'] = ScrollLabel('')
        self['label'] = Label('OK = Vollbild\n< > = Zur\xfcck / Vorw\xc3\xa4rts')
        self['NumberActions'] = NumberActionMap(['NumberActions',
         'OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'ChannelSelectBaseActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.picup,
         'left': self.picdown,
         'up': self.up,
         'down': self.down,
         'nextBouquet': self.zap,
         'prevBouquet': self.zap,
         'blue': self.hideScreen,
         '0': self.gotoPic,
         '1': self.gotoPic,
         '2': self.gotoPic,
         '3': self.gotoPic,
         '4': self.gotoPic,
         '5': self.gotoPic,
         '6': self.gotoPic,
         '7': self.gotoPic,
         '8': self.gotoPic,
         '9': self.gotoPic,
         'displayHelp': self.infoScreen}, -1)
        self.getInfoTimer = eTimer()
        self.getInfoTimer.callback.append(self.download(link, self.getPixPage))
        self.getInfoTimer.start(500, True)

    def getPixPage(self, output):
        if search('<title>', output) is not None:
            titel = search('<title>(.*?)</title>', output)
            titel = titel.group(1).replace('&amp;', '&')
            self.titel = sub(' - TV Spielfilm', '', titel)
            self.setTitle(self.titel)
        startpos = output.find('<div class="film-gallery">')
        if startpos == -1:
            startpos = output.find('class="film-gallery paragraph')
        endpos = output.find('<div class="swiper-slide more-galleries">')
        if endpos == -1:
            endpos = output.find('<div class="paragraph clear film-gallery"')
        bereich = output[startpos:endpos]
        bereich = sub('<br />\r\n<br />\r\n', ' \x95 ', bereich)
        bereich = sub('<br />\r\n<br />', ' \x95 ', bereich)
        bereich = sub('<br />', '', bereich)
        bereich = sub('<br/>', '', bereich)
        bereich = sub('<b>', '', bereich)
        bereich = sub('</b>', '', bereich)
        bereich = sub('<i>', '', bereich)
        bereich = sub('</i>', '', bereich)
        bereich = sub('<a href.*?</a>', '', bereich)
        bereich = sub('</h2>\n\\s+<p>', '', bereich)
        bereich = sub('&copy;', '', bereich)
        bereich = transHTML(bereich)
        self.pixlist = re.findall('<img src="(.*?)"', bereich)
        try:
            self.download(self.pixlist[0], self.getPic)
        except IndexError:
            pass

        self.picmax = len(self.pixlist)
        try:
            picnumber = self.count + 1
            self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
        except IndexError:
            pass

        self.topline = re.findall('<div class="image-text">\n\\s+(.*?)</div>', bereich, flags=re.S)
        try:
            self['pictext'].setText(self.topline[0])
        except IndexError:
            self.topline = re.findall('<span class="credit">(.*?)</span>', bereich, flags=re.S)
            try:
                self['pictext'].setText(self.topline[0])
            except IndexError:
                self.topline = re.findall('<p>(.*?)</p>', bereich, flags=re.S)
                try:
                    self['pictext'].setText(self.topline[0])
                except IndexError:
                    pass

        return

    def ok(self):
        self.session.openWithCallback(self.exit, PicShowFull, self.link, self.count, False)

    def picup(self):
        self.count += 1
        if self.count < self.picmax:
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
                self['pictext'].setText(self.topline[self.count])
            except IndexError:
                pass

        else:
            self.count = 0
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
                self['pictext'].setText(self.topline[self.count])
            except IndexError:
                pass

    def picdown(self):
        self.count -= 1
        if self.count >= 0:
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
                self['pictext'].setText(self.topline[self.count])
            except IndexError:
                pass

        else:
            self.count = self.picmax - 1
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
                self['pictext'].setText(self.topline[self.count])
            except IndexError:
                pass

    def gotoPic(self, number):
        self.session.openWithCallback(self.numberEntered, getNumber, number)

    def numberEntered(self, number):
        if number is None or number == 0:
            pass
        else:
            if number > self.picmax:
                number = self.picmax
            self.count = number - 1
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
                self['pictext'].setText(self.topline[self.count])
            except IndexError:
                pass

        return

    def up(self):
        self['pictext'].pageUp()

    def down(self):
        self['pictext'].pageDown()

    def getPic(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPic(self.picfile)

    def showPic(self, picture):
        if self.xd == False:
            currPic = loadPic(picture, 889, 500, 3, 0, 0, 0)
        else:
            currPic = loadPic(picture, 711, 400, 3, 0, 0, 0)
        if currPic != None:
            self['picture'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def zap(self):
        servicelist = self.session.instantiateDialog(ChannelSelection)
        self.session.execDialog(servicelist)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        self.close()


class PlayboyPicShow(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="Erotische Playmates - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="250,7" size="512,40" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="textpage" position="10,60" size="206,446" font="{font};{fontsize}" halign="left" zPosition="1" />\n\t\t\t\t<widget name="picture" position="226,60" size="560,400" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="picindex" position="862,60" size="140,22" font="{font};{fontsize}" halign="right" zPosition="2" />\n\t\t\t\t<widget name="pictext" position="10,462" size="992,55" font="{font};{fontsize}" halign="center" zPosition="2" />\n\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title="Erotische Playmates - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="364,10" size="512,44" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="textpage" position="10,70" size="250,560" font="{font};{fontsize}" halign="left" zPosition="1" />\n\t\t\t\t<widget name="picture" position="270,70" size="700,500" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="picindex" position="1065,70" size="165,24" font="{font};{fontsize}" halign="right" zPosition="2" />\n\t\t\t\t<widget name="pictext" position="10,577" size="1220,63" font="{font};{fontsize}" halign="center" zPosition="2" />\n\t\t\t</screen>'

    def __init__(self, session, link):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                fontsize = '24'
                fontsize2 = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                fontsize = '22'
                fontsize2 = '20'
            else:
                fontsize = '20'
                fontsize2 = '18'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize,
             'fontsize2': fontsize2}
            self.skin = applySkinVars(PlayboyPicShow.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                fontsize = '22'
                fontsize2 = '20'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                fontsize = '20'
                fontsize2 = '18'
            else:
                fontsize = '18'
                fontsize2 = '16'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize,
             'fontsize2': fontsize2}
            self.skin = applySkinVars(PlayboyPicShow.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.hideflag = True
        self.link = link
        self.pixlist = []
        self.picmax = ''
        self.count = 0
        self['picture'] = Pixmap()
        self['picindex'] = Label('')
        self['pictext'] = ScrollLabel('')
        self['textpage'] = ScrollLabel('')
        self['label'] = Label('OK = Vollbild\n< > = Zur\xfcck / Vorw\xc3\xa4rts')
        self['NumberActions'] = NumberActionMap(['NumberActions',
         'OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'ChannelSelectBaseActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.picup,
         'left': self.picdown,
         'up': self.up,
         'down': self.down,
         'nextBouquet': self.zap,
         'prevBouquet': self.zap,
         'blue': self.hideScreen,
         '0': self.gotoPic,
         '1': self.gotoPic,
         '2': self.gotoPic,
         '3': self.gotoPic,
         '4': self.gotoPic,
         '5': self.gotoPic,
         '6': self.gotoPic,
         '7': self.gotoPic,
         '8': self.gotoPic,
         '9': self.gotoPic,
         'displayHelp': self.infoScreen}, -1)
        self.getInfoTimer = eTimer()
        self.getInfoTimer.callback.append(self.download(link, self.getPicPage))
        self.getInfoTimer.start(500, True)

    def getPicPage(self, output):
        title = search('<title>(.*?)</title>', output)
        title = sub(' - TV Spielfilm', '', title.group(1))
        self.setTitle(title)
        startpos = find(output, '<div class="content-area">')
        endpos = find(output, 'Mehr Girls bei Playboy</a>')
        bereich = output[startpos:endpos]
        bereich = transHTML(bereich)
        self.pixlist = re.findall('<img src="(.*?)" alt=""', bereich)
        try:
            self.download(self.pixlist[0], self.getPic)
        except IndexError:
            pass

        self.picmax = len(self.pixlist)
        try:
            picnumber = self.count + 1
            self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
        except IndexError:
            pass

        topline = search('<p><b>(.*?)</b><br/>', output)
        if topline is not None:
            self['pictext'].setText(transHTML(topline.group(1)))
        bereich = sub('<p class="headline2">.*?</p>', '', bereich)
        bereich = sub('<br/>\n', '', bereich)
        bereich = sub('<b>', '', bereich)
        bereich = sub('</b>', '', bereich)
        text = ''
        a = findall('<p.*?>(.*?)</p>', bereich, re.S)
        for x in a:
            if x != '':
                text = text + x + '\n\n'

        text = sub('<[^>]*>', '', text)
        text = sub('</p<<p<', '\n\n', text)
        self['textpage'].setText(text)
        return

    def ok(self):
        self.session.openWithCallback(self.exit, PicShowFull, self.link, self.count, True)

    def picup(self):
        self.count += 1
        if self.count < self.picmax:
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

        else:
            self.count = 0
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

    def picdown(self):
        self.count -= 1
        if self.count >= 0:
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

        else:
            self.count = self.picmax - 1
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

    def gotoPic(self, number):
        self.session.openWithCallback(self.numberEntered, getNumber, number)

    def numberEntered(self, number):
        if number is None or number == 0:
            pass
        else:
            if number > self.picmax:
                number = self.picmax
            self.count = number - 1
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

        return

    def up(self):
        self['pictext'].pageUp()

    def down(self):
        self['pictext'].pageDown()

    def getPic(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPic(self.picfile)

    def showPic(self, picture):
        if self.xd == False:
            currPic = loadPic(picture, 700, 500, 3, 0, 0, 0)
        else:
            currPic = loadPic(picture, 560, 400, 3, 0, 0, 0)
        if currPic != None:
            self['picture'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        self['pictext'].setText('Download Fehler')

    def zap(self):
        servicelist = self.session.instantiateDialog(ChannelSelection)
        self.session.execDialog(servicelist)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        self.close()


class TVPicShow(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="1012,516" title="Fotostrecke - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1012,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="250,7" size="512,40" font="{font};16" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="800,0" size="192,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="infotext" position="10,60" size="206,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,90" size="206,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,120" size="206,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,150" size="206,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="796,60" size="206,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="796,90" size="206,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="796,120" size="206,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="796,150" size="206,20" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="picture" position="226,60" size="560,420" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pictext" position="10,480" size="992,40" font="{font};{fontsize2}" halign="center" valign="center" zPosition="1" />\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="1240,640" title="Fotostrecke - TV Spielfilm">\n\t\t\t\t<ePixmap position="0,0" size="1240,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="label" position="364,10" size="512,44" font="{font};18" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="center" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="1000,0" size="225,60" font="{font};26" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="infotext" position="10,70" size="250,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext2" position="10,105" size="250,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext3" position="10,140" size="250,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext4" position="10,175" size="250,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="left" zPosition="1" />\n\t\t\t\t<widget name="infotext5" position="980,70" size="250,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext6" position="980,105" size="250,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext7" position="980,140" size="250,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="infotext8" position="980,175" size="250,25" font="{font};{fontsize}" foregroundColor="#AAB2BA" halign="right" zPosition="1" />\n\t\t\t\t<widget name="picture" position="270,70" size="700,525" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="pictext" position="10,595" size="1220,48" font="{font};{fontsize2}" halign="center" valign="center" zPosition="1" />\n\t\t\t</screen>'

    def __init__(self, session, link):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                fontsize = '24'
                fontsize2 = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                fontsize = '22'
                fontsize2 = '20'
            else:
                fontsize = '20'
                fontsize2 = '18'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize,
             'fontsize2': fontsize2}
            self.skin = applySkinVars(TVPicShow.skinHD, self.dict)
        else:
            self.xd = True
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = 'center'
            else:
                position = str(config.plugins.tvspielfilm.position.value)
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                fontsize = '22'
                fontsize2 = '20'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                fontsize = '20'
                fontsize2 = '18'
            else:
                fontsize = '18'
                fontsize2 = '16'
            self.dict = {'position': position,
             'font': font,
             'fontsize': fontsize,
             'fontsize2': fontsize2}
            self.skin = applySkinVars(TVPicShow.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.hideflag = True
        self.link = link
        self.pixlist = []
        self.description = []
        self.titel = ''
        self.picmax = 1
        self.count = 0
        self['infotext'] = Label('')
        self['infotext2'] = Label('')
        self['infotext3'] = Label('')
        self['infotext4'] = Label('')
        self['infotext5'] = Label('')
        self['infotext6'] = Label('')
        self['infotext7'] = Label('')
        self['infotext8'] = Label('')
        self['picture'] = Pixmap()
        self['pictext'] = Label('')
        self['label'] = Label('OK = Vollbild\n< > = Zur\xfcck / Vorw\xc3\xa4rts')
        self['NumberActions'] = NumberActionMap(['NumberActions',
         'OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'ChannelSelectBaseActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.picup,
         'left': self.picdown,
         'up': self.picup,
         'down': self.picdown,
         'nextBouquet': self.zap,
         'prevBouquet': self.zap,
         'blue': self.hideScreen,
         '0': self.gotoPic,
         '1': self.gotoPic,
         '2': self.gotoPic,
         '3': self.gotoPic,
         '4': self.gotoPic,
         '5': self.gotoPic,
         '6': self.gotoPic,
         '7': self.gotoPic,
         '8': self.gotoPic,
         '9': self.gotoPic,
         'displayHelp': self.infoScreen}, -1)
        self.getPicTimer = eTimer()
        self.getPicTimer.callback.append(self.download(link, self.getPicPage))
        self.getPicTimer.start(500, True)

    def getPicPage(self, output):
        output = transHTML(output)
        if search('<title>', output) is not None:
            titel = search('<title>(.*?)</title>', output)
            titel = titel.group(1)
            self.titel = sub(' - TV Spielfilm', '', titel)
            self.setTitle(self.titel)
        startpos = output.find('<div class="film-gallery">')
        endpos = output.find('<div class="swiper-slide more-galleries">')
        bereich = output[startpos:endpos]
        bereich = sub('<span class="credit">', '', bereich)
        bereich = sub('<span class="counter">.*?</span>\n\\s+', '', bereich)
        bereich = sub('</span>\n\\s+', '', bereich)
        self.pixlist = re.findall('<img src="(.*?)"', bereich)
        try:
            self.download(self.pixlist[0], self.getPic)
        except IndexError:
            pass

        self.description = re.findall('<div class="description">\n\\s+(.*?)</div>', bereich, flags=re.S)
        self.picmax = len(self.pixlist)
        try:
            picnumber = self.count + 1
            self['pictext'].setText(self.description[0] + '\n%s von %s' % (picnumber, self.picmax))
        except IndexError:
            pass

        infotext = re.findall('<span class="text-row">(.*?)<', output)
        try:
            parts = infotext[0].split(', ')
            self['infotext'].setText(parts[0])
            self['infotext'].show()
        except IndexError:
            self['infotext'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext2'].setText(parts[1])
            self['infotext2'].show()
        except IndexError:
            self['infotext2'].setText('')

        try:
            parts = infotext[0].split(', ')
            self['infotext3'].setText(parts[2])
            self['infotext3'].show()
        except IndexError:
            self['infotext3'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext4'].setText(parts[0])
            self['infotext4'].show()
        except IndexError:
            self['infotext4'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext5'].setText(parts[1])
            self['infotext5'].show()
        except IndexError:
            self['infotext5'].setText('')

        try:
            parts = infotext[1].split(', ')
            self['infotext6'].setText(parts[2])
            self['infotext6'].show()
        except IndexError:
            self['infotext6'].setText('')

        try:
            parts = infotext[2].split(', ')
            self['infotext7'].setText(parts[0])
            self['infotext7'].show()
        except IndexError:
            self['infotext7'].setText('')

        try:
            parts = infotext[3].split(', ')
            self['infotext8'].setText(parts[0])
            self['infotext8'].show()
        except IndexError:
            self['infotext8'].setText('')

        return

    def ok(self):
        self.session.openWithCallback(self.exit, PicShowFull, self.link, self.count, False)

    def picup(self):
        self.count += 1
        if self.count < self.picmax:
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['pictext'].setText(self.description[self.count] + '\n%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

        else:
            self.count = 0
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['pictext'].setText(self.description[self.count] + '\n%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

    def picdown(self):
        self.count -= 1
        if self.count >= 0:
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['pictext'].setText(self.description[self.count] + '\n%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

        else:
            self.count = self.picmax - 1
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['pictext'].setText(self.description[self.count] + '\n%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

    def gotoPic(self, number):
        self.session.openWithCallback(self.numberEntered, getNumber, number)

    def numberEntered(self, number):
        if number is None or number == 0:
            pass
        else:
            if number > self.picmax:
                number = self.picmax
            self.count = number - 1
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['pictext'].setText(self.description[self.count] + '\n%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

        return

    def getPic(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPic(self.picfile)

    def showPic(self, picture):
        if self.xd == False:
            currPic = loadPic(picture, 700, 525, 3, 0, 0, 0)
        else:
            currPic = loadPic(picture, 560, 420, 3, 0, 0, 0)
        if currPic != None:
            self['picture'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def zap(self):
        servicelist = self.session.instantiateDialog(ChannelSelection)
        self.session.execDialog(servicelist)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        self.close()


class PicShowFull(Screen):
    skin = '\n\t\t\t<screen position="center,center" size="1024,576" flags="wfNoBorder" title="  " >\n\t\t\t\t<eLabel position="0,0" size="1024,576" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<widget name="picture" position="0,0" size="1024,576" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="picindex" position="5,5" size="100,20" font="{font};{fontsize}" foregroundColor="#A5ACAE" halign="left" transparent="1" zPosition="3" />\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,center" size="1920,720" flags="wfNoBorder" title="  " >\n\t\t\t\t<eLabel position="0,0" size="1920,720" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<widget name="picture" position="0,0" size="1920,720" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="picindex" position="10,10" size="120,22" font="{font};{fontsize}" foregroundColor="#A5ACAE" halign="left" transparent="1" zPosition="3" />\n\t\t\t</screen>'

    def __init__(self, session, link, count, playboy):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            self.xd = False
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                fontsize = '22'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                fontsize = '20'
            else:
                fontsize = '18'
            self.dict = {'font': font,
             'fontsize': fontsize}
            self.skin = applySkinVars(PicShowFull.skinHD, self.dict)
        else:
            self.xd = True
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                fontsize = '20'
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                fontsize = '18'
            else:
                fontsize = '16'
            self.dict = {'font': font,
             'fontsize': fontsize}
            self.skin = applySkinVars(PicShowFull.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.hideflag = True
        self.playboy = playboy
        self.pixlist = []
        self.count = count
        self.picmax = 1
        self['picture'] = Pixmap()
        self['picindex'] = Label('')
        self['NumberActions'] = NumberActionMap(['NumberActions',
         'OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'ChannelSelectBaseActions',
         'HelpActions'], {'ok': self.picup,
         'cancel': self.exit,
         'right': self.picup,
         'left': self.picdown,
         'up': self.picup,
         'down': self.picdown,
         'nextBouquet': self.zap,
         'prevBouquet': self.zap,
         'blue': self.hideScreen,
         '0': self.gotoPic,
         '1': self.gotoPic,
         '2': self.gotoPic,
         '3': self.gotoPic,
         '4': self.gotoPic,
         '5': self.gotoPic,
         '6': self.gotoPic,
         '7': self.gotoPic,
         '8': self.gotoPic,
         '9': self.gotoPic,
         'displayHelp': self.infoScreen}, -1)
        self.getPicTimer = eTimer()
        self.getPicTimer.callback.append(self.download(link, self.getPicPage))
        self.getPicTimer.start(500, True)

    def getPicPage(self, output):
        if self.playboy == False:
            startpos = output.find('<div class="film-gallery">')
            if startpos == -1:
                startpos = output.find('class="film-gallery paragraph')
            endpos = output.find('<div class="swiper-slide more-galleries">')
            if endpos == -1:
                endpos = output.find('<div class="paragraph clear film-gallery"')
            bereich = output[startpos:endpos]
            self.pixlist = re.findall('<img src="(.*?)"', bereich)
        else:
            startpos = find(output, '<div class="content-area">')
            endpos = find(output, 'Mehr Girls bei Playboy</a>')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            self.pixlist = re.findall('<img src="(.*?)" alt=""', bereich)
        try:
            self.download(self.pixlist[self.count], self.getPic)
        except IndexError:
            pass

        self.picmax = len(self.pixlist)
        try:
            picnumber = self.count + 1
            self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
        except IndexError:
            pass

    def picup(self):
        self.count += 1
        if self.count < self.picmax:
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

        else:
            self.count = 0
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

    def picdown(self):
        self.count -= 1
        if self.count >= 0:
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

        else:
            self.count = self.picmax - 1
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

    def gotoPic(self, number):
        self.session.openWithCallback(self.numberEntered, getNumber, number)

    def numberEntered(self, number):
        if number is None or number == 0:
            pass
        else:
            if number > self.picmax:
                number = self.picmax
            self.count = number - 1
            try:
                link = self.pixlist[self.count]
                self.download(link, self.getPic)
            except IndexError:
                pass

            try:
                picnumber = self.count + 1
                self['picindex'].setText('%s von %s' % (picnumber, self.picmax))
            except IndexError:
                pass

        return

    def getPic(self, output):
        f = open(self.picfile, 'wb')
        f.write(output)
        f.close()
        self.showPic(self.picfile)

    def showPic(self, picture):
        if self.xd == False:
            currPic = loadPic(picture, 1920, 720, 3, 0, 0, 0)
        else:
            currPic = loadPic(picture, 1024, 576, 3, 0, 0, 0)
        if currPic != None:
            self['picture'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def zap(self):
        servicelist = self.session.instantiateDialog(ChannelSelection)
        self.session.execDialog(servicelist)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        self.close()


class FullScreen(Screen):
    skin = '\n\t\t\t<screen position="center,center" size="1024,576" flags="wfNoBorder" title="  " >\n\t\t\t\t<eLabel position="0,0" size="1024,576" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<widget name="picture" position="128,0" size="768,576" alphatest="blend" zPosition="2" />\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,center" size="1920,720" flags="wfNoBorder" title="  " >\n\t\t\t\t<eLabel position="0,0" size="1920,720" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<widget name="picture" position="160,0" size="960,720" alphatest="blend" zPosition="2" />\n\t\t\t</screen>'

    def __init__(self, session):
        deskWidth = getDesktop(0).size().width()
        if deskWidth >= 1920:
            self.skin = FullScreen.skinHD
            self.xd = False
        else:
            self.skin = FullScreen.skin
            self.xd = True
        Screen.__init__(self, session)
        self.picfile = '/tmp/tvspielfilm.jpg'
        self.hideflag = True
        self['picture'] = Pixmap()
        self['actions'] = ActionMap(['OkCancelActions', 'ColorActions'], {'ok': self.exit,
         'cancel': self.exit,
         'blue': self.hideScreen}, -1)
        self.onShown.append(self.showPic)

    def showPic(self):
        if self.xd == False:
            currPic = loadPic(self.picfile, 960, 720, 3, 0, 0, 0)
        else:
            currPic = loadPic(self.picfile, 768, 576, 3, 0, 0, 0)
        if currPic != None:
            self['picture'].instance.setPixmap(currPic)
        return

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        self.close()


class serviceDB():

    def __init__(self, servicefile):
        self.servicefile = servicefile
        self.d = dict()
        try:
            for x in open(self.servicefile):
                key, val = x.split()
                self.d[key] = val

        except:
            pass

    def lookup(self, key):
        if key in self.d:
            return self.d[key]
        return 'nope'

    def close(self):
        pass


class channelDB():

    def __init__(self, servicefile):
        self.servicefile = servicefile
        self.d = dict()
        try:
            for x in open(self.servicefile):
                val, key = x.split()
                self.d[key] = val

        except:
            pass

    def lookup(self, key):
        if key in self.d:
            return self.d[key]
        return 'nope'

    def close(self):
        pass


class searchYouTube(Screen):
    skin = '\n\t\t\t<screen position="center,center" size="1000,560" title=" ">\n\t\t\t\t<ePixmap position="0,0" size="1000,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/youtube.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<ePixmap position="10,6" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/blue.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<ePixmap position="10,26" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/yellow.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="label" position="34,6" size="200,20" font="Regular;16" foregroundColor="#697178" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="34,26" size="200,20" font="Regular;16" foregroundColor="#697178" backgroundColor="#FFFFFF" halign="left" transparent="1" zPosition="2" />\n\t\t\t\t<widget render="Label" source="global.CurrentTime" position="740,0" size="240,50" font="{font};24" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="right" valign="center" zPosition="2">\n\t\t\t\t\t<convert type="ClockToText">Format:%H:%M:%S</convert>\n\t\t\t\t</widget>\n\t\t\t\t<widget name="poster1" position="10,55" size="215,120" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="poster2" position="10,180" size="215,120" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="poster3" position="10,305" size="215,120" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="poster4" position="10,430" size="215,120" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="list" position="235,55" size="755,500" scrollbarMode="showOnDemand" zPosition="1" />\n\t\t\t</screen>'

    def __init__(self, session, name, movie):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        self.dict = {'font': font}
        self.skin = applySkinVars(searchYouTube.skin, self.dict)
        Screen.__init__(self, session)
        if movie == True:
            self.name = name + ' Trailer'
        else:
            self.name = name
        name = self.name.replace(' ', '+').replace(':', '+').replace('_', '+').replace('\xc3\x84', 'Ae').replace('\xc3\x96', 'Oe').replace('\xc3\x9c', 'Ue').replace('\xc3\x9f', 'ss').replace('\xc3\xa4', 'ae').replace('\xc3\xb6', 'oe').replace('\xc3\xbc', 'ue').replace('\xc4', 'Ae').replace('\xd6', 'Oe').replace('\xdc', 'Ue').replace('\xe4', 'ae').replace('\xf6', 'oe').replace('\xfc', 'ue')
        self.link = 'http://www.youtube.com/results?filters=video&search_query=' + name
        self.titel = 'YouTube Trailer Suche | Seite '
        self.poster = []
        self.trailer_id = []
        self.trailer_list = []
        self.localhtml = '/tmp/youtube.html'
        self.poster1 = '/tmp/youtube1.jpg'
        self.poster2 = '/tmp/youtube2.jpg'
        self.poster3 = '/tmp/youtube3.jpg'
        self.poster4 = '/tmp/youtube4.jpg'
        self['poster1'] = Pixmap()
        self['poster2'] = Pixmap()
        self['poster3'] = Pixmap()
        self['poster4'] = Pixmap()
        self.ready = False
        self.hideflag = True
        self.count = 1
        self['list'] = ItemList([])
        self['label'] = Label('= Hide')
        self['label2'] = Label('= YouTube Search')
        self['actions'] = ActionMap(['OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'ChannelSelectBaseActions',
         'HelpActions',
         'NumberActions',
         'MovieSelectionActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'nextBouquet': self.nextPage,
         'prevBouquet': self.prevPage,
         'yellow': self.search,
         'blue': self.hideScreen,
         '0': self.gotoEnd,
         'bluelong': self.showHelp,
         'showEventInfo': self.showHelp,
         'displayHelp': self.infoScreen}, -1)
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        self.makeTrailerTimer = eTimer()
        self.makeTrailerTimer.callback.append(self.downloadFullPage(self.link, self.makeTrailerList))
        self.makeTrailerTimer.start(500, True)

    def makeTrailerList(self, string):
        self.setTitle(self.titel + str(self.count))
        output = open(self.localhtml, 'r').read()
        startpos = output.find('class="section-list">')
        endpos = output.find('\n</ol>\n\n')
        bereich = output[startpos:endpos]
        bereich = sub('</a>', '', bereich)
        bereich = sub('<b>', '', bereich)
        bereich = sub('</b>', '', bereich)
        bereich = sub('<wbr>', '', bereich)
        bereich = sub('</li><li>', ' \xb7 ', bereich)
        bereich = sub('&quot;', "'", bereich)
        bereich = transHTML(bereich)
        self.poster = re.findall('i.ytimg.com/(.*?)default.jpg', bereich)
        self.trailer_id = re.findall('<h3 class="yt-lockup-title.*?"><a href="/watch.v=(.*?)"', bereich)
        self.trailer_titel = re.findall('<h3 class="yt-lockup-title.*?"><a href=".*?">(.*?)<', bereich)
        trailer_time = re.findall('<span class="accessible-description" id="description-id.*?: (.*?)</span>', bereich)
        trailer_info = re.findall('<ul class="yt-lockup-meta-info">(.*?)</div>(.*?)</div>', bereich)
        for x in range(len(self.trailer_id)):
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(755, 125), font=-1, backcolor_sel=self.back_color, text=''))
            try:
                res.append(MultiContentEntryText(pos=(5, 13), size=(730, 30), font=-1, color=16777215, flags=RT_HALIGN_LEFT, text=self.trailer_titel[x]))
            except IndexError:
                pass

            try:
                res.append(MultiContentEntryText(pos=(5, 48), size=(75, 25), font=1, color=16777215, flags=RT_HALIGN_RIGHT, text=trailer_time[x] + ' \xb7 '))
            except IndexError:
                pass

            try:
                info = sub('<.*?>', '', trailer_info[x][0])
                res.append(MultiContentEntryText(pos=(85, 48), size=(650, 25), font=1, color=16777215, flags=RT_HALIGN_LEFT, text=info))
            except IndexError:
                pass

            try:
                desc = sub('<.*?>', '', trailer_info[x][1])
                res.append(MultiContentEntryText(pos=(5, 75), size=(730, 50), font=1, color=16777215, flags=RT_HALIGN_LEFT | RT_WRAP, text=desc))
            except IndexError:
                pass

            self.trailer_list.append(res)

        self['list'].l.setList(self.trailer_list)
        self['list'].l.setItemHeight(125)
        self['list'].moveToIndex(0)
        self.ready = True
        try:
            poster1 = 'http://i.ytimg.com/' + self.poster[0] + 'default.jpg'
            self.download(poster1, self.getPoster1)
            self['poster1'].show()
        except IndexError:
            self['poster1'].hide()

        try:
            poster2 = 'http://i.ytimg.com/' + self.poster[1] + 'default.jpg'
            self.download(poster2, self.getPoster2)
            self['poster2'].show()
        except IndexError:
            self['poster2'].hide()

        try:
            poster3 = 'http://i.ytimg.com/' + self.poster[2] + 'default.jpg'
            self.download(poster3, self.getPoster3)
            self['poster3'].show()
        except IndexError:
            self['poster3'].hide()

        try:
            poster4 = 'http://i.ytimg.com/' + self.poster[3] + 'default.jpg'
            self.download(poster4, self.getPoster4)
            self['poster4'].show()
        except IndexError:
            self['poster4'].hide()

    def ok(self):
        if self.ready == True:
            try:
                c = self['list'].getSelectedIndex()
                trailer_id = self.trailer_id[c]
                trailer_titel = self.trailer_titel[c]
                trailer_url = self.getTrailerURL(trailer_id)
                if trailer_url is not None:
                    sref = eServiceReference(4097, 0, trailer_url)
                    sref.setName(trailer_titel)
                    self.session.open(MoviePlayer, sref)
                else:
                    self.session.open(MessageBox, '\nYouTube Video nicht gefunden', MessageBox.TYPE_ERROR)
            except IndexError:
                pass

        return

    def getTrailerURL(self, trailer_id):
        header = {'User-Agent': 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100627 Firefox/3.6.6',
         'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
         'Accept-Language': 'en-us,en;q=0.5'}
        VIDEO_FMT_PRIORITY_MAP = {'38': 3,
         '37': 1,
         '22': 2,
         '35': 5,
         '18': 4,
         '34': 6}
        trailer_url = None
        watch_url = 'http://www.youtube.com/watch?v=%s&gl=US&hl=en' % trailer_id
        watchrequest = Request(watch_url, None, header)
        try:
            watchvideopage = urlopen(watchrequest).read()
        except (HTTPError,
         URLError,
         HTTPException,
         socket.error,
         AttributeError):
            return trailer_url

        for el in ['&el=embedded',
         '&el=detailpage',
         '&el=vevo',
         '']:
            info_url = 'http://www.youtube.com/get_video_info?&video_id=%s%s&ps=default&eurl=&gl=US&hl=en' % (trailer_id, el)
            request = Request(info_url, None, header)
            try:
                infopage = urlopen(request).read()
                videoinfo = parse_qs(infopage)
                if ('url_encoded_fmt_stream_map' or 'fmt_url_map') in videoinfo:
                    break
            except (HTTPError,
             URLError,
             HTTPException,
             socket.error,
             AttributeError):
                return trailer_url

        if ('url_encoded_fmt_stream_map' or 'fmt_url_map') not in videoinfo:
            return trailer_url
        else:
            video_fmt_map = {}
            fmt_infomap = {}
            if videoinfo.has_key('url_encoded_fmt_stream_map'):
                tmp_fmtUrlDATA = videoinfo['url_encoded_fmt_stream_map'][0].split(',')
            else:
                tmp_fmtUrlDATA = videoinfo['fmt_url_map'][0].split(',')
            for fmtstring in tmp_fmtUrlDATA:
                fmturl = fmtid = ''
                if videoinfo.has_key('url_encoded_fmt_stream_map'):
                    try:
                        for arg in fmtstring.split('&'):
                            if arg.find('=') >= 0:
                                key, value = arg.split('=')
                                if key == 'itag':
                                    if len(value) > 3:
                                        value = value[:2]
                                    fmtid = value
                                elif key == 'url':
                                    fmturl = value

                        if fmtid != '' and fmturl != '' and VIDEO_FMT_PRIORITY_MAP.has_key(fmtid):
                            video_fmt_map[VIDEO_FMT_PRIORITY_MAP[fmtid]] = {'fmtid': fmtid,
                             'fmturl': unquote_plus(fmturl)}
                            fmt_infomap[int(fmtid)] = '%s' % unquote_plus(fmturl)
                        fmturl = fmtid = ''
                    except:
                        return trailer_url

                else:
                    fmtid, fmturl = fmtstring.split('|')
                if VIDEO_FMT_PRIORITY_MAP.has_key(fmtid) and fmtid != '':
                    video_fmt_map[VIDEO_FMT_PRIORITY_MAP[fmtid]] = {'fmtid': fmtid,
                     'fmturl': unquote_plus(fmturl)}
                    fmt_infomap[int(fmtid)] = unquote_plus(fmturl)

            if video_fmt_map and len(video_fmt_map):
                best_video = video_fmt_map[sorted(video_fmt_map.iterkeys())[0]]
                trailer_url = '%s' % best_video['fmturl'].split(';')[0]
            return trailer_url

    def search(self):
        if self.ready == True:
            self.session.openWithCallback(self.searchReturn, VirtualKeyBoard, title='YouTube Trailer Suche:', text=self.name)

    def searchReturn(self, name):
        if name and name != '':
            self.name = name
            name = name.replace(' ', '+').replace(':', '+').replace('_', '+').replace('\xc4', 'Ae').replace('\xd6', 'Oe').replace('\xdc', 'Ue').replace('\xe4', 'ae').replace('\xf6', 'oe').replace('\xfc', 'ue')
            self.link = 'http://www.youtube.com/results?filters=video&search_query=' + name
            self.count = 1
            self.poster = []
            self.trailer_id = []
            self.trailer_list = []
            self.makeTrailerTimer.callback.append(self.downloadFullPage(self.link, self.makeTrailerList))

    def nextPage(self):
        if self.ready == True:
            self.count += 1
            if self.count >= 10:
                self.count = 9
            link = self.link + '&page=' + str(self.count)
            self.poster = []
            self.trailer_id = []
            self.trailer_list = []
            self.makeTrailerTimer.callback.append(self.downloadFullPage(link, self.makeTrailerList))

    def prevPage(self):
        if self.ready == True:
            self.count -= 1
            if self.count <= 0:
                self.count = 1
            link = self.link + '&page=' + str(self.count)
            self.poster = []
            self.trailer_id = []
            self.trailer_list = []
            self.makeTrailerTimer.callback.append(self.downloadFullPage(link, self.makeTrailerList))

    def down(self):
        if self.ready == True:
            try:
                c = self['list'].getSelectedIndex()
            except IndexError:
                return

            self['list'].down()
            if c + 1 == len(self.trailer_id):
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[0] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                    self['poster1'].show()
                except IndexError:
                    self['poster1'].hide()

                try:
                    poster2 = 'http://i.ytimg.com/' + self.poster[1] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                    self['poster2'].show()
                except IndexError:
                    self['poster2'].hide()

                try:
                    poster3 = 'http://i.ytimg.com/' + self.poster[2] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                    self['poster3'].show()
                except IndexError:
                    self['poster3'].hide()

                try:
                    poster4 = 'http://i.ytimg.com/' + self.poster[3] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                    self['poster4'].show()
                except IndexError:
                    self['poster4'].hide()

            elif c % 4 == 3:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c + 1] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                    self['poster1'].show()
                except IndexError:
                    self['poster1'].hide()

                try:
                    poster2 = 'http://i.ytimg.com/' + self.poster[c + 2] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                    self['poster2'].show()
                except IndexError:
                    self['poster2'].hide()

                try:
                    poster3 = 'http://i.ytimg.com/' + self.poster[c + 3] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                    self['poster3'].show()
                except IndexError:
                    self['poster3'].hide()

                try:
                    poster4 = 'http://i.ytimg.com/' + self.poster[c + 4] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                    self['poster4'].show()
                except IndexError:
                    self['poster4'].hide()

    def up(self):
        if self.ready == True:
            try:
                c = self['list'].getSelectedIndex()
            except IndexError:
                return

            self['list'].up()
            if c == 0:
                l = len(self.trailer_list)
                d = l % 4
                if d == 0:
                    d = 4
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[l - d] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                    self['poster1'].show()
                except IndexError:
                    self['poster1'].hide()

                try:
                    poster2 = 'http://i.ytimg.com/' + self.poster[l - d + 1] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                    self['poster2'].show()
                except IndexError:
                    self['poster2'].hide()

                try:
                    poster3 = 'http://i.ytimg.com/' + self.poster[l - d + 2] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                    self['poster3'].show()
                except IndexError:
                    self['poster3'].hide()

                try:
                    poster4 = 'http://i.ytimg.com/' + self.poster[l - d + 3] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                    self['poster4'].show()
                except IndexError:
                    self['poster4'].hide()

            elif c % 4 == 0:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c - 4] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                    self['poster1'].show()
                except IndexError:
                    self['poster1'].hide()

                try:
                    poster2 = 'http://i.ytimg.com/' + self.poster[c - 3] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                    self['poster2'].show()
                except IndexError:
                    self['poster2'].hide()

                try:
                    poster3 = 'http://i.ytimg.com/' + self.poster[c - 2] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                    self['poster3'].show()
                except IndexError:
                    self['poster3'].hide()

                try:
                    poster4 = 'http://i.ytimg.com/' + self.poster[c - 1] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                    self['poster4'].show()
                except IndexError:
                    self['poster4'].hide()

    def rightDown(self):
        if self.ready == True:
            try:
                c = self['list'].getSelectedIndex()
            except IndexError:
                return

            self['list'].pageDown()
            l = len(self.trailer_list)
            d = c % 4
            e = l % 4
            if e == 0:
                e = 4
            if c + e >= l:
                pass
            elif d == 0:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c + 4] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                except IndexError:
                    self['poster1'].hide()

                try:
                    poster2 = 'http://i.ytimg.com/' + self.poster[c + 5] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                except IndexError:
                    self['poster2'].hide()

                try:
                    poster3 = 'http://i.ytimg.com/' + self.poster[c + 6] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                except IndexError:
                    self['poster3'].hide()

                try:
                    poster4 = 'http://i.ytimg.com/' + self.poster[c + 7] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                except IndexError:
                    self['poster4'].hide()

            elif d == 1:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c + 3] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                except IndexError:
                    self['poster1'].hide()

                try:
                    poster2 = 'http://i.ytimg.com/' + self.poster[c + 4] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                except IndexError:
                    self['poster2'].hide()

                try:
                    poster3 = 'http://i.ytimg.com/' + self.poster[c + 5] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                except IndexError:
                    self['poster3'].hide()

                try:
                    poster4 = 'http://i.ytimg.com/' + self.poster[c + 6] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                except IndexError:
                    self['poster4'].hide()

            elif d == 2:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c + 2] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                except IndexError:
                    self['poster1'].hide()

                try:
                    poster2 = 'http://i.ytimg.com/' + self.poster[c + 3] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                except IndexError:
                    self['poster2'].hide()

                try:
                    poster3 = 'http://i.ytimg.com/' + self.poster[c + 4] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                except IndexError:
                    self['poster3'].hide()

                try:
                    poster4 = 'http://i.ytimg.com/' + self.poster[c + 5] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                except IndexError:
                    self['poster4'].hide()

            elif d == 3:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c + 1] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                except IndexError:
                    self['poster1'].hide()

                try:
                    poster2 = 'http://i.ytimg.com/' + self.poster[c + 2] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                except IndexError:
                    self['poster2'].hide()

                try:
                    poster3 = 'http://i.ytimg.com/' + self.poster[c + 3] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                except IndexError:
                    self['poster3'].hide()

                try:
                    poster4 = 'http://i.ytimg.com/' + self.poster[c + 4] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                except IndexError:
                    self['poster4'].hide()

    def leftUp(self):
        if self.ready == True:
            try:
                c = self['list'].getSelectedIndex()
            except IndexError:
                return

            self['list'].pageUp()
            d = c % 4
            if c < 4:
                pass
            elif d == 0:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c - 4] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                    poster2 = 'http://i.ytimg.com/' + self.poster[c - 3] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                    poster3 = 'http://i.ytimg.com/' + self.poster[c - 2] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                    poster4 = 'http://i.ytimg.com/' + self.poster[c - 1] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                except IndexError:
                    pass

            elif d == 1:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c - 5] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                    poster2 = 'http://i.ytimg.com/' + self.poster[c - 4] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                    poster3 = 'http://i.ytimg.com/' + self.poster[c - 3] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                    poster4 = 'http://i.ytimg.com/' + self.poster[c - 2] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                except IndexError:
                    pass

            elif d == 2:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c - 6] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                    poster2 = 'http://i.ytimg.com/' + self.poster[c - 5] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                    poster3 = 'http://i.ytimg.com/' + self.poster[c - 4] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                    poster4 = 'http://i.ytimg.com/' + self.poster[c - 3] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                except IndexError:
                    pass

            elif d == 3:
                try:
                    poster1 = 'http://i.ytimg.com/' + self.poster[c - 7] + 'default.jpg'
                    self.download(poster1, self.getPoster1)
                    poster2 = 'http://i.ytimg.com/' + self.poster[c - 6] + 'default.jpg'
                    self.download(poster2, self.getPoster2)
                    poster3 = 'http://i.ytimg.com/' + self.poster[c - 5] + 'default.jpg'
                    self.download(poster3, self.getPoster3)
                    poster4 = 'http://i.ytimg.com/' + self.poster[c - 4] + 'default.jpg'
                    self.download(poster4, self.getPoster4)
                except IndexError:
                    pass

            self['poster1'].show()
            self['poster2'].show()
            self['poster3'].show()
            self['poster4'].show()

    def gotoEnd(self):
        if self.ready == True:
            end = len(self.trailer_list) - 1
            if end > 4:
                self['list'].moveToIndex(end)
                self.leftUp()
                self.rightDown()

    def getPoster1(self, output):
        f = open(self.poster1, 'wb')
        f.write(output)
        f.close()
        self.showPoster1(self.poster1)

    def showPoster1(self, poster1):
        currPic = loadPic(poster1, 215, 120, 3, 0, 0, 0)
        if currPic != None:
            self['poster1'].instance.setPixmap(currPic)
        return

    def getPoster2(self, output):
        f = open(self.poster2, 'wb')
        f.write(output)
        f.close()
        self.showPoster2(self.poster2)

    def showPoster2(self, poster2):
        currPic = loadPic(poster2, 215, 120, 3, 0, 0, 0)
        if currPic != None:
            self['poster2'].instance.setPixmap(currPic)
        return

    def getPoster3(self, output):
        f = open(self.poster3, 'wb')
        f.write(output)
        f.close()
        self.showPoster3(self.poster3)

    def showPoster3(self, poster3):
        currPic = loadPic(poster3, 215, 120, 3, 0, 0, 0)
        if currPic != None:
            self['poster3'].instance.setPixmap(currPic)
        return

    def getPoster4(self, output):
        f = open(self.poster4, 'wb')
        f.write(output)
        f.close()
        self.showPoster4(self.poster4)

    def showPoster4(self, poster4):
        currPic = loadPic(poster4, 215, 120, 3, 0, 0, 0)
        if currPic != None:
            self['poster4'].instance.setPixmap(currPic)
        return

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass

    def downloadFullPage(self, link, name):
        downloadPage(link, self.localhtml).addCallback(name).addErrback(self.downloadPageError)

    def downloadPageError(self, output):
        try:
            error = output.getErrorMessage()
            self.session.open(MessageBox, 'The YouTube Server is not reachable:\n%s' % error, MessageBox.TYPE_ERROR)
        except AttributeError:
            self.session.open(MessageBox, '\nThe YouTube Server is not reachable.', MessageBox.TYPE_ERROR)

        self.close()

    def showHelp(self):
        self.session.open(MessageBox, '\n%s' % 'Bouquet = +- Seite\nGelb = Neue YouTube Suche', MessageBox.TYPE_INFO, close_on_any_key=True)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if fileExists(self.localhtml):
            os.remove(self.localhtml)
        if fileExists(self.poster1):
            os.remove(self.poster1)
        if fileExists(self.poster2):
            os.remove(self.poster2)
        if fileExists(self.poster3):
            os.remove(self.poster3)
        if fileExists(self.poster4):
            os.remove(self.poster4)
        self.close()


class infoScreenTVSpielfilm(Screen):
    skin = '\n\t\t\t\t<screen position="center,center" size="425,425" title=" " >\n\t\t\t\t\t<ePixmap position="0,0" size="425,425" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/info.png" zPosition="1"/>\n\t\t\t\t\t<widget name="label" position="0,72" size="425,350" font="{font};18" foregroundColor="#000000" backgroundColor="#FFFFFF" halign="center" valign="center" transparent="1" zPosition="2" />\n\t\t\t\t</screen>'

    def __init__(self, session, plugin, check):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        self.dict = {'font': font}
        self.skin = applySkinVars(infoScreenTVSpielfilm.skin, self.dict)
        Screen.__init__(self, session)
        self.check = check
        self['label'] = Label('www.kashmir-plugins.de\n\nGef\xc3\xa4llt Ihnen das Plugin?\nM\xc3\xb6chten Sie etwas spenden?\nGehen Sie dazu bitte wie folgt vor:\n\n\n\n1. Melden Sie sich bei PayPal an\n2. Klicken Sie auf: Geld senden\n3. Geld an Freunde und Familie senden\n4. Adresse: paypal@kashmir-plugins.de\n5. Betrag: 5 Euro\n6. Geld senden\nDanke!')
        self['actions'] = ActionMap(['OkCancelActions'], {'ok': self.close,
         'cancel': self.close}, -1)
        self.version = '6.6rc4'
        self.plugin = plugin
        if self.check == True:
            self.setTitle('TV Spielfilm %s' % self.version)
            if self.plugin is None:
                self.link = 'http://sites.google.com/site/kashmirplugins/home/tv-spielfilm'
                self.makeVersionTimer = eTimer()
                self.makeVersionTimer.callback.append(self.download(self.link, self.checkVersion))
                self.makeVersionTimer.start(500, True)
            elif self.plugin == 'wiki':
                self.link = 'http://sites.google.com/site/kashmirplugins/home/wikipedia'
                self.getPluginTimer = eTimer()
                self.getPluginTimer.callback.append(self.download(self.link, self.getPlugin))
                self.getPluginTimer.start(500, True)
            elif self.plugin == 'translator':
                self.link = 'http://sites.google.com/site/kashmirplugins/home/translator'
                self.getPluginTimer = eTimer()
                self.getPluginTimer.callback.append(self.download(self.link, self.getPlugin))
                self.getPluginTimer.start(500, True)
        else:
            self.setTitle('PayPal Info')
        return

    def getPlugin(self, output):
        if self.plugin == 'wiki':
            self.pluginname = 'Wikipedia'
        elif self.plugin == 'translator':
            self.pluginname = 'EPG Translator'
        pluginsource = search('<a href="(.*?).attredirects=0".*?<img alt="Version ', output)
        if pluginsource is not None:
            self.pluginsource = pluginsource.group(1)
            self.pluginfile = self.pluginsource.replace('https://sites.google.com/site/kashmirplugins/', '').replace('%5f', '_')
            self.downloadfile = '/tmp/' + str(self.pluginfile)
            self.session.openWithCallback(self.close, DownloadUpdate, self.pluginsource, self.pluginfile, self.pluginname)
        return

    def checkVersion(self, output):
        self.pluginname = 'TV Spielfilm'
        version = search('<img alt="Version (.*?)"', output)
        if version is not None:
            version = version.group(1)
            if version != self.version:
                pluginsource = search('<a href="(.*?).attredirects=0".*?<img alt="Version ', output)
                if pluginsource is not None:
                    self.pluginsource = pluginsource.group(1)
                    self.pluginfile = self.pluginsource.replace('https://sites.google.com/site/kashmirplugins/', '').replace('%5f', '_')
                    versioninfo = re.findall('<li><span style="color:rgb\\(100,118,135\\)">(.*?)</span></li>', output)
                    if len(versioninfo) > 0:
                        info = ''
                        idx = 0
                        for x in versioninfo:
                            idx += 1

                        for i in range(idx):
                            try:
                                info = info + ' - ' + versioninfo[i] + '\n'
                            except IndexError:
                                Info = ''

                        self.session.openWithCallback(self.downloadPlugin, MessageBox, '\nEine neue Plugin Version ist verf\xfcgbar:\n%s Version %s\n\n%s\nSoll die neue Version jetzt installiert werden?' % (self.pluginname, version, info), MessageBox.TYPE_YESNO)
                    else:
                        self.session.openWithCallback(self.downloadPlugin, MessageBox, '\nEine neue Plugin Version ist verf\xfcgbar:\n%s Version %s\n\nSoll die neue Version jetzt installiert werden?' % (self.pluginname, version), MessageBox.TYPE_YESNO)
            else:
                self.session.open(MessageBox, '\nwww.kashmir-plugins.de\n\nIhre %s Version %s ist aktuell.' % (self.pluginname, self.version), MessageBox.TYPE_INFO, close_on_any_key=True)
        return

    def downloadPlugin(self, answer):
        if answer is True:
            self.pluginfile = '/tmp/' + str(self.pluginfile)
            self.session.openWithCallback(self.close, DownloadUpdate, self.pluginsource, self.pluginfile, self.pluginname)

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        pass


class DownloadUpdate(Screen):
    skin = '\n\t\t\t<screen position="center,center" size="550,190" title="Download Update..." >\n\t\t\t\t<ePixmap position="10,10" size="530,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="name" position="10,70" size="530,50" font="Regular;20" halign="center" valign="center" transparent="1" zPosition="1" />\n\t\t\t\t<widget name="size" position="10,120" size="530,25" font="Regular;20" halign="center" transparent="1" zPosition="1" />\n\t\t\t\t<widget name="slider" position="10,150" size="530,30" transparent="0" zPosition="2" />\n\t\t\t</screen>'

    def __init__(self, session, url, file, name):
        Screen.__init__(self, session)
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            try:
                gMainDC.getInstance().setResolution(1920, 1080)
                desktop = getDesktop(0)
                desktop.resize(eSize(1920, 1080))
            except:
                import traceback
                traceback.print_exc()

        self.url = url
        self.file = file
        self.name = name
        self.hideflag = True
        self.install = False
        self.filesize = 0
        self.localsize = 0
        self.progress = 0
        self.slider = Slider(0, 100)
        self['name'] = Label('Downloading: %s' % self.file)
        self['size'] = Label('')
        self['slider'] = self.slider
        self['actions'] = ActionMap(['OkCancelActions', 'ColorActions'], {'ok': self.hideScreen,
         'cancel': self.exit,
         'blue': self.hideScreen}, -1)
        self.statusTimer = eTimer()
        self.statusTimer.callback.append(self.UpdateStatus)
        self.statusTimer.start(500, True)
        self.updateTimer = eTimer()
        self.updateTimer.callback.append(self.refresh)
        self.update_interval = 3000
        self.onLayoutFinish.append(self.onLayoutFinished)

    def onLayoutFinished(self):
        self.getFileSize()
        downloadPage(self.url, self.file).addCallback(self.installPlugin)

    def installPlugin(self, string):
        self.install = True
        self.container = eConsoleAppContainer()
        self.container.appClosed.append(self.finished)
        self.container.dataAvail.append(self.dataAvail)
        self.container.execute('opkg install %s' % self.file)

    def getFileSize(self):
        header = {'User-Agent': 'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100627 Firefox/3.6.6',
         'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
         'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
         'Accept-Language': 'en-us,en;q=0.5'}
        request = Request(self.url, None, header)
        try:
            filesize = urlopen(request, timeout=60).info().get('Content-Length')
            filesize = float(filesize)
            self.filesize = filesize
        except (HTTPError,
         URLError,
         HTTPException,
         socket.error,
         AttributeError):
            pass

        return

    def UpdateStatus(self):
        if fileExists(self.file):
            localsize = path.getsize(self.file)
            self.localsize = localsize
        else:
            self.localsize = 0
        if self.filesize > 0:
            self.progress = self.localsize / self.filesize * 100
        if int(self.progress) > 1:
            self['slider'].setValue(int(self.progress))
            self['size'].setText('%s KB von %s KB' % (int(self.localsize) / 1024, int(self.filesize) / 1024))
        elif self.localsize > 0 and self.filesize == 0:
            self['slider'].setValue(0)
            self['size'].setText('%s KB von ??? KB' % (int(self.localsize) / 1024))
        elif self.filesize > 0 and self.localsize == 0:
            self['slider'].setValue(0)
            self['size'].setText('0 KB von %s KB' % (int(self.filesize) / 1024))
        self.updateTimer.start(self.update_interval)

    def refresh(self):
        self.UpdateStatus()

    def dataAvail(self, data):
        if data is not None:
            self.session.open(MessageBox, '\n%s' % data, MessageBox.TYPE_INFO, close_on_any_key=True)
        return

    def finished(self, retval):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        self.install = False
        del self.container.appClosed[:]
        del self.container.dataAvail[:]
        del self.container
        self.statusTimer.stop()
        self.updateTimer.stop()
        if retval == 0:
            self.setTitle('Update finished!')
            text = self.name + ' Update finished!'
            self['name'].setText(text)
            self['slider'].setValue(100)
            self.session.openWithCallback(self.restartGUI, MessageBox, '\nDas %s Plugin wurde erfolgreich installiert.\nBitte starten Sie Enigma neu.' % self.name, MessageBox.TYPE_YESNO)
        else:
            self.close()

    def restartGUI(self, answer):
        if answer is True:
            try:
                self.session.open(TryQuitMainloop, 3)
            except RuntimeError:
                self.close()

        else:
            self.close()

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if self.install == True:
            del self.container.appClosed[:]
            del self.container.dataAvail[:]
            del self.container
        self.setTitle('Update canceled!')
        self['slider'].setValue(0)
        self.statusTimer.stop()
        self.updateTimer.stop()
        if fileExists(self.file):
            os.remove(self.file)
        self.close()


class tvMain(Screen):
    skin = '\n\t\t\t<screen position="center,{position}" size="310,560" flags="wfNoBorder" title="TV Spielfilm">\n\t\t\t\t<eLabel position="0,0" size="310,30" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<eLabel position="0,30" size="20,510" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<eLabel position="290,30" size="20,510" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<eLabel position="0,540" size="310,20" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<ePixmap position="20,30" size="270,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<ePixmap position="262,35" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="green" position="262,57" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="label" position="176,35" size="80,20" font="{font};16" foregroundColor="#000000" backgroundColor="#FFFFFF" halign="right" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="176,57" size="80,20" font="{font};16" foregroundColor="#000000" backgroundColor="#FFFFFF" halign="right" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="mainmenu" position="30,90" size="250,390" scrollbarMode="showNever" zPosition="2" />\n\t\t\t\t<widget name="secondmenu" position="30,90" size="250,450" scrollbarMode="showNever" zPosition="2" />\n\t\t\t\t<widget name="thirdmenu" position="30,90" size="250,450" scrollbarMode="showNever" zPosition="2" />\n\t\t\t</screen>'
    skinHD = '\n\t\t\t<screen position="center,{position}" size="310,640" flags="wfNoBorder" title="TV Spielfilm">\n\t\t\t\t<eLabel position="0,0" size="310,30" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<eLabel position="0,30" size="20,590" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<eLabel position="290,30" size="20,590" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<eLabel position="0,620" size="310,20" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<ePixmap position="20,30" size="270,60" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilmHD.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<ePixmap position="262,40" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="green" position="262,62" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="label" position="176,40" size="80,20" font="{font};16" foregroundColor="#000000" backgroundColor="#FFFFFF" halign="right" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="label2" position="176,62" size="80,20" font="{font};16" foregroundColor="#000000" backgroundColor="#FFFFFF" halign="right" transparent="1" zPosition="2" />\n\t\t\t\t<widget name="mainmenu" position="30,100" size="250,390" scrollbarMode="showNever" zPosition="2" />\n\t\t\t\t<widget name="secondmenu" position="30,100" size="250,510" scrollbarMode="showNever" zPosition="2" />\n\t\t\t\t<widget name="thirdmenu" position="30,100" size="250,510" scrollbarMode="showNever" zPosition="2" />\n\t\t\t</screen>'

    def __init__(self, session):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.plugin_size.value == 'full':
            position = '20'
            self.xd = False
            self.dict = {'font': font,
             'position': position}
            self.skin = applySkinVars(tvMain.skinHD, self.dict)
        else:
            deskWidth = getDesktop(0).size().width()
            if deskWidth >= 1920:
                position = '60'
            else:
                position = 'center'
            self.xd = True
            self.dict = {'font': font,
             'position': position}
            self.skin = applySkinVars(tvMain.skin, self.dict)
        self.session = session
        Screen.__init__(self, session)
        self.fhd = False
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            if getDesktop(0).size().width() == 1920:
                self.fhd = True
                try:
                    gMainDC.getInstance().setResolution(1920, 720)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 720))
                except:
                    import traceback
                    traceback.print_exc()

        self.picfile = '/tmp/tvspielfilm.jpg'
        self.pic1 = '/tmp/tvspielfilm1.jpg'
        self.pic2 = '/tmp/tvspielfilm2.jpg'
        self.pic3 = '/tmp/tvspielfilm3.jpg'
        self.pic4 = '/tmp/tvspielfilm4.jpg'
        self.pic5 = '/tmp/tvspielfilm5.jpg'
        self.pic6 = '/tmp/tvspielfilm6.jpg'
        self.wikihtml = '/tmp/wiki.html'
        self.senderhtml = '/tmp/tvssender.html'
        self.localhtml = '/tmp/tvspielfilm.html'
        self.localhtml2 = '/tmp/tvspielfilm2.html'
        if config.plugins.tvspielfilm.tipps.value == 'false':
            self.tipps = False
            self.hidetipps = True
        elif config.plugins.tvspielfilm.tipps.value == 'no':
            self.tipps = True
            self.hidetipps = True
        else:
            self.tipps = True
            self.hidetipps = False
        self.hideflag = True
        self.ready = False
        self.sparte = []
        self.genre = []
        self.sender = []
        self.mainmenulist = []
        self.mainmenulink = []
        self.secondmenulist = []
        self.secondmenulink = []
        self.thirdmenulist = []
        self.thirdmenulink = []
        self['mainmenu'] = ItemList([])
        self['secondmenu'] = ItemList([])
        self['thirdmenu'] = ItemList([])
        self.actmenu = 'mainmenu'
        self['green'] = Pixmap()
        self['label'] = Label('Import = ')
        if self.tipps == True:
            self['label2'] = Label('Tipp = ')
        else:
            self['label2'] = Label('')
            self['green'].hide()
        self['actions'] = ActionMap(['OkCancelActions',
         'DirectionActions',
         'ColorActions',
         'MovieSelectionActions',
         'ChannelSelectBaseActions',
         'HelpActions'], {'ok': self.ok,
         'cancel': self.exit,
         'right': self.rightDown,
         'left': self.leftUp,
         'down': self.down,
         'up': self.up,
         'nextBouquet': self.zap,
         'prevBouquet': self.zap,
         'yellow': self.config,
         'red': self.red,
         'green': self.green,
         'blue': self.hideScreen,
         'showEventInfo': self.infoScreen,
         'contextMenu': self.config,
         'displayHelp': self.infoScreen}, -1)
        self.servicefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/service.references'
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            self.backcolor = False
        else:
            self.backcolor = True
            self.back_color = int(config.plugins.tvspielfilm.color.value, 16)
        self.movie_stop = config.usage.on_movie_stop.value
        self.movie_eof = config.usage.on_movie_eof.value
        config.usage.on_movie_stop.value = 'quit'
        config.usage.on_movie_eof.value = 'quit'
        if self.tipps == True:
            self.TagesTipps = self.session.instantiateDialog(tvTipps)
            if self.hidetipps == False:
                self.TagesTipps.start()
                self.TagesTipps.show()
        if config.plugins.tvspielfilm.autoupdate.value == 'yes':
            self.version = '6.6rc4'
            self.link = 'http://sites.google.com/site/kashmirplugins/home/tv-spielfilm'
            self.makeVersionTimer = eTimer()
            self.makeVersionTimer.callback.append(self.downloadVersion(self.link, self.checkVersion))
            self.makeVersionTimer.start(2500, True)
        if config.plugins.tvspielfilm.meintvs.value == 'yes':
            self.MeinTVS = True
            self.error = False
            self.loginerror = False
            self.baseurl = 'http://my.tvspielfilm.de'
            self.login = config.plugins.tvspielfilm.login.value
            self.password = config.plugins.tvspielfilm.password.value
            if config.plugins.tvspielfilm.encrypt.value == 'yes':
                try:
                    self.password = b64decode(self.password)
                except TypeError:
                    config.plugins.tvspielfilm.encrypt.value = 'no'
                    config.plugins.tvspielfilm.encrypt.save()
                    configfile.save()

            self.cookiefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/cookie'
            self.cookie = cookielib.MozillaCookieJar(self.cookiefile)
            if fileExists(self.cookiefile):
                self.cookie.load()
            self.opener = urllib2.build_opener(urllib2.HTTPRedirectHandler(), urllib2.HTTPHandler(debuglevel=0), urllib2.HTTPCookieProcessor(self.cookie))
            self.opener.addheaders = [('Host', 'member.tvspielfilm.de'),
             ('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:27.0) Gecko/20100101 Firefox/27.0'),
             ('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8'),
             ('Referer', 'https://member.tvspielfilm.de/login/70.html'),
             ('Connection', 'keep-alive')]
            self.loginToTVSpielfilm()
        else:
            self.MeinTVS = False
            self.opener = False
            self.baseurl = 'http://www.tvspielfilm.de'
            self.AnzTimer = eTimer()
            self.AnzTimer.callback.append(self.makeTimerDB)
            self.AnzTimer.callback.append(self.checkMainMenu)
            self.AnzTimer.start(500, True)

    def loginToTVSpielfilm(self):
        values = urlencode({'email': self.login,
         'pw': self.password,
         'perma_login': '1',
         'done': '1',
         'checkErrors': '1'})
        try:
            response = self.opener.open('https://member.tvspielfilm.de/login/70.html', values, timeout=60)
            result = response.read()
            if search('"error":"', result) is not None:
                error = search('"error":"(.*?)\\.', result)
                self.error = 'Mein TV SPIELFILM: ' + error.group(1) + '!'
                self.loginerror = True
                if fileExists(self.cookiefile):
                    os.remove(self.cookiefile)
            else:
                self.cookie.save()
            response.close()
        except HTTPException as e:
            self.error = 'HTTP Exception Error ' + str(e)
        except HTTPError as e:
            self.error = 'HTTP Error: ' + str(e.code)
        except URLError as e:
            self.error = 'URL Error: ' + str(e.reason)
        except socket.error as e:
            self.error = 'Socket Error: ' + str(e)
        except AttributeError as e:
            self.error = 'Attribute Error: ' + str(e.message)

        self.onLayoutFinish.append(self.onLayoutFinished)
        return

    def onLayoutFinished(self):
        if self.error == False:
            self.AnzTimer = eTimer()
            self.AnzTimer.callback.append(self.makeTimerDB)
            self.AnzTimer.callback.append(self.checkMainMenu)
            self.AnzTimer.start(500, True)
        else:
            self.makeErrorTimer = eTimer()
            self.makeErrorTimer.callback.append(self.displayError)
            self.makeErrorTimer.start(500, True)

    def displayError(self):
        self.ready = True
        if self.loginerror == True:
            self.session.openWithCallback(self.configError, MessageBox, '%s\n\nSetup aufrufen und Einstellungen anpassen?' % self.error, MessageBox.TYPE_YESNO)
        else:
            self.session.open(MessageBox, '\n%s' % self.error, MessageBox.TYPE_ERROR)

    def configError(self, answer):
        if answer is True:
            self.config()
        else:
            self.MeinTVS = False
            self.AnzTimer = eTimer()
            self.AnzTimer.callback.append(self.makeTimerDB)
            self.AnzTimer.callback.append(self.checkMainMenu)
            self.AnzTimer.start(500, True)

    def ok(self):
        if self.ready == True:
            try:
                c = self.getIndex(self[self.actmenu])
            except IndexError:
                c = 0

            if self.actmenu == 'mainmenu':
                try:
                    if search('jetzt', self.mainmenulink[c]) is not None or search('time=shortly', self.mainmenulink[c]) is not None or search('abends', self.mainmenulink[c]) is not None or search('nachts', self.mainmenulink[c]) is not None:
                        if self.tipps == True:
                            self.stopTipps()
                        link = self.mainmenulink[c]
                        self.session.openWithCallback(self.selectMainMenu, TVJetztView, link, False)
                    elif search('page=1', self.mainmenulink[c]) is not None:
                        if self.tipps == True:
                            self.stopTipps()
                        link = self.mainmenulink[c]
                        self.session.openWithCallback(self.selectMainMenu, TVHeuteView, link, self.opener)
                    elif search('/bilder', self.mainmenulink[c]) is not None:
                        if self.tipps == True:
                            self.stopTipps()
                        link = self.mainmenulink[c]
                        self.session.openWithCallback(self.selectMainMenu, TVBilder, link)
                    elif search('/tv-tipps//', self.mainmenulink[c]) is not None:
                        if self.tipps == True:
                            self.stopTipps()
                        link = self.mainmenulink[c]
                        self.session.openWithCallback(self.selectMainMenu, TVNeuView, link)
                    elif search('/blog', self.mainmenulink[c]) is not None:
                        if self.tipps == True:
                            self.stopTipps()
                        link = self.mainmenulink[c]
                        self.session.openWithCallback(self.selectMainMenu, TVBlog, link, False)
                    elif search('/tv-tipps/', self.mainmenulink[c]) is not None or search('/tv-genre/', self.mainmenulink[c]) is not None or search('/trailer-und-clips/', self.mainmenulink[c]) is not None or search('/news-und-specials/', self.mainmenulink[c]) is not None:
                        link = self.mainmenulink[c]
                        self.makeSecondMenu(None, link)
                    else:
                        self.ready = False
                        link = self.mainmenulink[c]
                        if fileExists(self.senderhtml):
                            self.makeSecondMenu('string', link)
                        else:
                            self.downloadSender(link)
                except IndexError:
                    self.ready = True

            elif self.actmenu == 'secondmenu':
                if search('/tv-tipps/', self.secondmenulink[c]) is not None:
                    try:
                        if self.tipps == True:
                            self.stopTipps()
                        sparte = self.sparte[c]
                        link = self.secondmenulink[c]
                        self.session.openWithCallback(self.selectSecondMenu, TVTippsView, link, sparte)
                    except IndexError:
                        pass

                elif search('/trailer-und-clips/', self.secondmenulink[c]) is not None or search('/kino/charts/', self.secondmenulink[c]) is not None or search('/dvd/charts/', self.secondmenulink[c]) is not None or search('/kino/kino-vorschau/', self.secondmenulink[c]) is not None:
                    try:
                        if self.tipps == True:
                            self.stopTipps()
                        sparte = self.sparte[c]
                        link = self.secondmenulink[c]
                        self.session.openWithCallback(self.selectSecondMenu, TVTrailer, link, sparte)
                    except IndexError:
                        pass

                elif search('/news-und-specials/|/tatort|/kids-tv', self.secondmenulink[c]) is not None:
                    try:
                        if self.tipps == True:
                            self.stopTipps()
                        link = self.secondmenulink[c]
                        if search('/playboy/', link) is not None:
                            self.session.openWithCallback(self.selectSecondMenu, PlayboyPicShow, link)
                        else:
                            self.session.openWithCallback(self.selectSecondMenu, TVNews, link)
                    except IndexError:
                        pass

                elif search('/tv-genre/', self.secondmenulink[c]) is not None:
                    try:
                        self.ready = False
                        sparte = self.sparte[c]
                        link = self.secondmenulink[c]
                        self.makeThirdMenu(None, sparte)
                    except IndexError:
                        self.ready = True

                else:
                    try:
                        self.ready = False
                        sender = self.sender[c]
                        link = self.secondmenulink[c]
                        self.makeThirdMenu('string', sender)
                    except IndexError:
                        self.ready = True

            elif self.actmenu == 'thirdmenu':
                if search('/suche/', self.thirdmenulink[c]) is not None:
                    try:
                        if self.tipps == True:
                            self.stopTipps()
                        genre = self.genre[c]
                        link = self.thirdmenulink[c]
                        self.session.openWithCallback(self.selectThirdMenu, TVGenreView, link, genre)
                    except IndexError:
                        pass

                elif search('/tv-tipps/', self.thirdmenulink[c]) is not None:
                    try:
                        if self.tipps == True:
                            self.stopTipps()
                        sparte = self.genre[c]
                        link = self.thirdmenulink[c]
                        self.session.openWithCallback(self.selectThirdMenu, TVTippsView, link, sparte)
                    except IndexError:
                        pass

                else:
                    try:
                        if self.tipps == True:
                            self.stopTipps()
                        link = self.thirdmenulink[c].replace('my.tvspielfilm.de', 'www.tvspielfilm.de')
                        self.session.openWithCallback(self.selectThirdMenu, TVProgrammView, link, False, False)
                    except IndexError:
                        pass

        return

    def makeMainMenu(self):
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='20:15 im TV'))
        self.mainmenulist.append(res)
        self.mainmenulink.append(self.baseurl + '/tv-programm/sendungen/abends.html')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='TV-Tipps'))
        self.mainmenulist.append(res)
        self.mainmenulink.append('http://www.tvspielfilm.de/tv-tipps/')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Neu im TV'))
        self.mainmenulist.append(res)
        self.mainmenulink.append('http://www.tvspielfilm.de/tv-tipps//')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='TV-Genre'))
        self.mainmenulist.append(res)
        self.mainmenulink.append('http://www.tvspielfilm.de/tv-genre/')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Jetzt im TV'))
        self.mainmenulist.append(res)
        self.mainmenulink.append(self.baseurl + '/tv-programm/sendungen/jetzt.html')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Gleich im TV'))
        self.mainmenulist.append(res)
        self.mainmenulink.append(self.baseurl + '/tv-programm/sendungen/?page=1&order=time&time=shortly')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='22:00 im TV'))
        self.mainmenulist.append(res)
        self.mainmenulink.append(self.baseurl + '/tv-programm/sendungen/fernsehprogramm-nachts.html')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='TV-Programm'))
        self.mainmenulist.append(res)
        self.mainmenulink.append(self.baseurl + '/tv-programm/tv-sender/')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='TV-Trailer'))
        self.mainmenulist.append(res)
        self.mainmenulink.append('http://www.tvspielfilm.de/kino/trailer-und-clips/')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='TV-Bilder'))
        self.mainmenulist.append(res)
        self.mainmenulink.append('http://www.tvspielfilm.de/bilder/')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='TV-News'))
        self.mainmenulist.append(res)
        self.mainmenulink.append('http://www.tvspielfilm.de/news-und-specials/')
        res = ['']
        if self.backcolor == True:
            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='TV-Blog'))
        self.mainmenulist.append(res)
        self.mainmenulink.append('http://blog.tvspielfilm.de/page/1/')
        self['mainmenu'].l.setList(self.mainmenulist)
        self['mainmenu'].l.setItemHeight(30)
        self.selectMainMenu()

    def makeSecondMenu(self, string, link):
        if fileExists(self.senderhtml):
            output = open(self.senderhtml, 'r').read()
        else:
            output = ''
        self.secondmenulist = []
        self.secondmenulink = []
        self.sender = []
        self.sparte = []
        if search('/tv-sender/', link) is not None:
            startpos = output.find('<option value="" label="Alle Sender">Alle Sender</option>')
            endpos = output.find('<div class="button-toggle">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            bereich = sub('verschl\xc3\xbcsselte ', '', bereich)
            bereich = sub(' .deutschspr..', '', bereich)
            bereich = sub('Spartensender ARD', 'Digitale ARD', bereich)
            bereich = sub('Meine Lieblingssender', 'Lieblingssender', bereich)
            name = re.findall('<optgroup label="(.*?)">', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    if name[i] == 'Lieblingssender':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Lieblingssender')
                    elif name[i] == 'Hauptsender':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Hauptsender')
                    elif name[i] == 'Dritte Programme':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Dritte Programme')
                    elif name[i] == 'Digitale ARD & ZDF':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Digitale ARD & ZDF')
                    elif name[i] == 'Sky Cinema':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Sky Cinema')
                    elif name[i] == 'Sky 3D HD':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Sky 3D HD')
                    elif name[i] == 'Sky Sport':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Sky Sport')
                    elif name[i] == 'Sky Entertainment':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Sky Entertainment')
                    elif name[i] == 'Sky Select':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Sky Select')
                    elif name[i] == 'Pay-TV':
                        res = ['']
                        if self.backcolor == True:
                            res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                        res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                        self.secondmenulist.append(res)
                        self.secondmenulink.append(self.baseurl)
                        self.sender.append('Pay-TV')
                except IndexError:
                    pass

            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kindersender'))
            self.secondmenulist.append(res)
            self.secondmenulink.append(self.baseurl)
            self.sender.append('Kindersender')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Sportsender'))
            self.secondmenulist.append(res)
            self.secondmenulink.append(self.baseurl)
            self.sender.append('Sportsender')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Musiksender'))
            self.secondmenulist.append(res)
            self.secondmenulink.append(self.baseurl)
            self.sender.append('Musiksender')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='News'))
            self.secondmenulist.append(res)
            self.secondmenulink.append(self.baseurl)
            self.sender.append('News')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Ausland'))
            self.secondmenulist.append(res)
            self.secondmenulink.append(self.baseurl)
            self.sender.append('Ausland')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Spartensender'))
            self.secondmenulist.append(res)
            self.secondmenulink.append(self.baseurl)
            self.sender.append('Spartensender')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Auslandssender'))
            self.secondmenulist.append(res)
            self.secondmenulink.append(self.baseurl)
            self.sender.append('Auslandssender')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Regionalsender'))
            self.secondmenulist.append(res)
            self.secondmenulink.append(self.baseurl)
            self.sender.append('Regionalsender')
            self['secondmenu'].l.setList(self.secondmenulist)
            self['secondmenu'].l.setItemHeight(30)
            self['secondmenu'].moveToIndex(0)
            self.selectSecondMenu()
            if self.tipps == True:
                self.hideTipps()
        elif search('/tv-tipps/', link) is not None:
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Spielfilm'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-tipps/')
            self.sparte.append('Spielfilm')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Serie'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-tipps/')
            self.sparte.append('Serie')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Report'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-tipps/')
            self.sparte.append('Report')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Unterhaltung'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-tipps/')
            self.sparte.append('Unterhaltung')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kinder'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-tipps/')
            self.sparte.append('Kinder')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Sport'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-tipps/')
            self.sparte.append('Sport')
            self['secondmenu'].l.setList(self.secondmenulist)
            self['secondmenu'].l.setItemHeight(30)
            self['secondmenu'].moveToIndex(0)
            self.selectSecondMenu()
        elif search('/tv-genre/', link) is not None:
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Spielfilm'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-genre/')
            self.sparte.append('Spielfilm')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Serie'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-genre/')
            self.sparte.append('Serie')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Report'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-genre/')
            self.sparte.append('Report')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Unterhaltung'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-genre/')
            self.sparte.append('Unterhaltung')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kinder'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-genre/')
            self.sparte.append('Kinder')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Sport'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tv-genre/')
            self.sparte.append('Sport')
            self['secondmenu'].l.setList(self.secondmenulist)
            self['secondmenu'].l.setItemHeight(30)
            self['secondmenu'].moveToIndex(0)
            self.selectSecondMenu()
        elif search('/trailer-und-clips/', link) is not None:
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kino Neustarts'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/kino/trailer-und-clips/')
            self.sparte.append('Kino Neustarts')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kino Vorschau'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/kino/kino-vorschau/')
            self.sparte.append('Kino Vorschau')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Neueste Trailer'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/kino/trailer-und-clips/')
            self.sparte.append('Neueste Trailer')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kino Charts'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/kino/charts/')
            self.sparte.append('Kino Charts')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='DVD Charts'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/kino/dvd/charts/')
            self.sparte.append('DVD Charts')
            self['secondmenu'].l.setList(self.secondmenulist)
            self['secondmenu'].l.setItemHeight(30)
            self['secondmenu'].moveToIndex(0)
            self.selectSecondMenu()
        elif search('/news-und-specials/', link) is not None:
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Interviews & Stories'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/news-und-specials/interviewsundstories/')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Tatort'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/tatort/')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kids TV'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/kids-tv/')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Playboy Girl'))
            self.secondmenulist.append(res)
            self.secondmenulink.append('http://www.tvspielfilm.de/news-und-specials/playboy/')
            self['secondmenu'].l.setList(self.secondmenulist)
            self['secondmenu'].l.setItemHeight(30)
            self['secondmenu'].moveToIndex(0)
            self.selectSecondMenu()
        return

    def makeThirdMenu(self, string, sender):
        if string != None:
            output = open(self.senderhtml, 'r').read()
        self.thirdmenulist = []
        self.thirdmenulink = []
        self.genre = []
        if sender == 'Lieblingssender':
            startpos = output.find('<optgroup label="Meine Lieblingssender">')
            endpos = output.find('<optgroup label="Hauptsender">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Hauptsender':
            startpos = output.find('<optgroup label="Hauptsender">')
            endpos = output.find('<optgroup label="Dritte Programme">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Dritte Programme':
            startpos = output.find('<optgroup label="Dritte Programme">')
            endpos = output.find('<optgroup label="Sportsender">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Kindersender':
            startpos = output.find('<optgroup label="Kindersender">')
            endpos = output.find('<optgroup label="Ausland ')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Digitale ARD & ZDF':
            startpos = output.find('<optgroup label="Spartensender ARD')
            endpos = output.find('<optgroup label="News')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Ausland':
            startpos = output.find('<optgroup label="Ausland (deutschspr.)">')
            endpos = output.find('<optgroup label="Regionalsender">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Regionalsender':
            startpos = output.find('<optgroup label="Regionalsender">')
            endpos = output.find('<optgroup label="Musiksender">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'News':
            startpos = output.find('<optgroup label="News')
            endpos = output.find('<optgroup label="Kindersender">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Sportsender':
            startpos = output.find('<optgroup label="Sportsender">')
            endpos = output.find('<optgroup label="Spartensender ARD')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Musiksender':
            startpos = output.find('<optgroup label="Musiksender">')
            endpos = output.find('<optgroup label="Spartensender">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Spartensender':
            startpos = output.find('<optgroup label="Spartensender">')
            endpos = output.find('<optgroup label="Shopping">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Sky Cinema':
            startpos = output.find('<optgroup label="Sky Cinema">')
            endpos = output.find('<optgroup label="Sky Sport">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Sky Sport':
            startpos = output.find('<optgroup label="Sky Sport">')
            endpos = output.find('<optgroup label="Sky Entertainment">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Sky Entertainment':
            startpos = output.find('<optgroup label="Sky Entertainment">')
            endpos = output.find('<optgroup label="Blue Movie">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Sky Select':
            startpos = output.find('<optgroup label="Sky Select">')
            endpos = output.find('<optgroup label="Pay-TV">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Pay-TV':
            startpos = output.find('<optgroup label="Pay-TV">')
            endpos = output.find('<optgroup label="Auslandssender">')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Auslandssender':
            startpos = output.find('<optgroup label="Auslandssender">')
            endpos = output.find('<optgroup label="alle Sender')
            bereich = output[startpos:endpos]
            bereich = transHTML(bereich)
            lnk = re.findall('value="(.*?)">', bereich)
            name = re.findall('<option label="(.*?)"', bereich)
            idx = 0
            for x in name:
                idx += 1

            for i in range(idx):
                try:
                    res = ['']
                    if self.backcolor == True:
                        res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
                    res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text=name[i]))
                    self.thirdmenulist.append(res)
                    self.thirdmenulink.append(lnk[i])
                except IndexError:
                    pass

            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Spielfilm':
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Alle Genres'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=&time=day&date=&channel=')
            self.genre.append('Spielfilm: Alle Genres')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Abenteuer'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Abenteuer&time=day&date=&channel=')
            self.genre.append('Spielfilm: Abenteuer')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Action'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Action&time=day&date=&channel=')
            self.genre.append('Spielfilm: Action')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Dokumentation'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Dokumentation&time=day&date=&channel=')
            self.genre.append('Spielfilm: Dokumentation')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Drama'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Drama&time=day&date=&channel=')
            self.genre.append('Spielfilm: Drama')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Episodenfilm'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Episodenfilm&time=day&date=&channel=')
            self.genre.append('Spielfilm: Episodenfilm')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Erotik'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Erotik&time=day&date=&channel=')
            self.genre.append('Spielfilm: Erotik')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Familie/Kinder'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Familie%2FKinder&time=day&date=&channel=')
            self.genre.append('Spielfilm: Familie/Kinder')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Fantasy'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Fantasy&time=day&date=&channel=')
            self.genre.append('Spielfilm: Fantasy')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Filmkunst'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Filmkunst&time=day&date=&channel=')
            self.genre.append('Spielfilm: Filmkunst')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Heimat'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Heimat&time=day&date=&channel=')
            self.genre.append('Spielfilm: Heimat')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Historie'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Historie&time=day&date=&channel=')
            self.genre.append('Spielfilm: Historie')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Horror'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Horror&time=day&date=&channel=')
            self.genre.append('Spielfilm: Horror')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Katastrophenfilm'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Katastrophenfilm&time=day&date=&channel=')
            self.genre.append('Spielfilm: Katastrophenfilm')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Klassiker'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Klassiker&time=day&date=&channel=')
            self.genre.append('Spielfilm: Klassiker')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kom\xc3\xb6die'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Kom%C3%B6die&time=day&date=&channel=')
            self.genre.append('Spielfilm: Kom\xc3\xb6die')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kriegsfilm'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Kriegsfilm&time=day&date=&channel=')
            self.genre.append('Spielfilm: Kriegsfilm')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Krimi'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Krimi&time=day&date=&channel=')
            self.genre.append('Spielfilm: Krimi')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Literatur/Theater'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Literatur%2FTheater&time=day&date=&channel=')
            self.genre.append('Spielfilm: Literatur/Theater')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Love Story'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Love+Story&time=day&date=&channel=')
            self.genre.append('Spielfilm: Love Story')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='M\xc3\xa4rchen'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=M%C3%A4rchen&time=day&date=&channel=')
            self.genre.append('Spielfilm: M\xc3\xa4rchen')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Musikfilm'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Musikfilm&time=day&date=&channel=')
            self.genre.append('Spielfilm: Musikfilm')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Portr\xc3\xa4t'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Portr%C3%A4t&time=day&date=&channel=')
            self.genre.append('Spielfilm: Portr\xc3\xa4t')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Road Movie'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Road+Movie&time=day&date=&channel=')
            self.genre.append('Spielfilm: Road Movie')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='SciFi'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=SciFi&time=day&date=&channel=')
            self.genre.append('Spielfilm: SciFi')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Thriller'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Thriller&time=day&date=&channel=')
            self.genre.append('Spielfilm: Thriller')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Trickfilm'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Trickfilm&time=day&date=&channel=')
            self.genre.append('Spielfilm: Trickfilm')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Western'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SP&genreSP=Western&time=day&date=&channel=')
            self.genre.append('Spielfilm: Western')
            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Serie':
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Alle Genres'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=&time=day&date=&channel=')
            self.genre.append('Serie: Alle Genres')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Action'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Action&time=day&date=&channel=')
            self.genre.append('Serie: Action')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Arzt'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Arzt&time=day&date=&channel=')
            self.genre.append('Serie: Arzt')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Comedy'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Comedy&time=day&date=&channel=')
            self.genre.append('Serie: Comedy')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Daily Soap'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Daily+Soap&time=day&date=&channel=')
            self.genre.append('Serie: Daily Soap')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Dokuserie'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Dokuserie&time=day&date=&channel=')
            self.genre.append('Serie: Dokuserie')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Familienserie'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Familienserie&time=day&date=&channel=')
            self.genre.append('Serie: Familienserie')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Horror'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Horror&time=day&date=&channel=')
            self.genre.append('Serie: Horror')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kinder-/Jugend'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Kinder-%2FJugend&time=day&date=&channel=')
            self.genre.append('Serie: Kinder-/Jugend')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Krimi'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Krimi&time=day&date=&channel=')
            self.genre.append('Serie: Krimi')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Science Fiction'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Science+Fiction&time=day&date=&channel=')
            self.genre.append('Serie: Science Fiction')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Soap'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Soap&time=day&date=&channel=')
            self.genre.append('Serie: Soap')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Western'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SE&genreSE=Western&time=day&date=&channel=')
            self.genre.append('Serie: Western')
            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Report':
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Alle Genres'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=&time=day&date=&channel=')
            self.genre.append('Report: Alle Genres')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Dokumentation'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=Dokumentation&time=day&date=&channel=')
            self.genre.append('Report: Dokumentation')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Gesellschaft'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=Gesellschaft&time=day&date=&channel=')
            self.genre.append('Report: Gesellschaft')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Justiz'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=Justiz&time=day&date=&channel=')
            self.genre.append('Report: Justiz')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Magazin'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=Magazin&time=day&date=&channel=')
            self.genre.append('Report: Magazin')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Natur'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=Natur&time=day&date=&channel=')
            self.genre.append('Report: Natur')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Politik'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=Politik&time=day&date=&channel=')
            self.genre.append('Report: Politik')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Ratgeber'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=Ratgeber&time=day&date=&channel=')
            self.genre.append('Report: Ratgeber')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Technik'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=Technik&time=day&date=&channel=')
            self.genre.append('Report: Technik')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Wissenschaft'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=RE&genreRE=Wissenschaft&time=day&date=&channel=')
            self.genre.append('Report: Wissenschaft')
            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Unterhaltung':
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Alle Genres'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=U&genreU=&time=day&date=&channel=')
            self.genre.append('Unterhaltung: Alle Genres')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Comedy'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=U&genreU=Comedy&time=day&date=&channel=')
            self.genre.append('Unterhaltung: Comedy')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Familie'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=U&genreU=Familie&time=day&date=&channel=')
            self.genre.append('Unterhaltung: Familie')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kultur'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=U&genreU=Kultur&time=day&date=&channel=')
            self.genre.append('Unterhaltung: Kultur')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Late Night'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=U&genreU=Late+Night&time=day&date=&channel=')
            self.genre.append('Unterhaltung: Late Night')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Musik'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=U&genreU=Musik&time=day&date=&channel=')
            self.genre.append('Unterhaltung: Musik')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Quiz'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=U&genreU=Quiz&time=day&date=&channel=')
            self.genre.append('Unterhaltung: Quiz')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Show'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=U&genreU=Show&time=day&date=&channel=')
            self.genre.append('Unterhaltung: Show')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Talk'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=U&genreU=Talk&time=day&date=&channel=')
            self.genre.append('Unterhaltung: Talk')
            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Kinder':
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Alle Genres'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=KIN&genreKIN=&time=day&date=&channel=')
            self.genre.append('Kinder: Alle Genres')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Bildung'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=KIN&genreKIN=Bildung&time=day&date=&channel=')
            self.genre.append('Kinder: Bildung')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Magazin'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=KIN&genreKIN=Magazin&time=day&date=&channel=')
            self.genre.append('Kinder: Magazin')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Reportage'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=KIN&genreKIN=Reportage&time=day&date=&channel=')
            self.genre.append('Kinder: Reportage')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Serie'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=KIN&genreKIN=Serie&time=day&date=&channel=')
            self.genre.append('Kinder: Serie')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Show'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=KIN&genreKIN=Show&time=day&date=&channel=')
            self.genre.append('Kinder: Show')
            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        elif sender == 'Sport':
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Alle Genres'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=&time=day&date=&channel=')
            self.genre.append('Sport: Alle Genres')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Basketball'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Basketball&time=day&date=&channel=')
            self.genre.append('Sport: Basketball')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Billard'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Billard&time=day&date=&channel=')
            self.genre.append('Sport: Billard')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Boxen'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Boxen&time=day&date=&channel=')
            self.genre.append('Sport: Boxen')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Formel 1'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Formel+1&time=day&date=&channel=')
            self.genre.append('Sport: Formel 1')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Funsport'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Funsport&time=day&date=&channel=')
            self.genre.append('Sport: Funsport')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Fu\xc3\x9fball'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Fu%C3%9Fball&time=day&date=&channel=')
            self.genre.append('Sport: Fu\xc3\x9fball')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Golf'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Golf&time=day&date=&channel=')
            self.genre.append('Sport: Golf')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Handball'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Handball&time=day&date=&channel=')
            self.genre.append('Sport: Handball')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Kampfsport'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Kampfsport&time=day&date=&channel=')
            self.genre.append('Sport: Kampfsport')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Leichtathletik'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Leichtathletik&time=day&date=&channel=')
            self.genre.append('Sport: Leichtathletik')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Motorsport'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Motorsport&time=day&date=&channel=')
            self.genre.append('Sport: Motorsport')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Poker'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Poker&time=day&date=&channel=')
            self.genre.append('Sport: Poker')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Radsport'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Radsport&time=day&date=&channel=')
            self.genre.append('Sport: Radsport')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Tennis'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Tennis&time=day&date=&channel=')
            self.genre.append('Sport: Tennis')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='US Sport'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=US+Sport&time=day&date=&channel=')
            self.genre.append('Sport: US Sport')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Wassersport'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Wassersport&time=day&date=&channel=')
            self.genre.append('Sport: Wassersport')
            res = ['']
            if self.backcolor == True:
                res.append(MultiContentEntryText(pos=(0, 0), size=(250, 30), font=-2, color=16777215, color_sel=16777215, backcolor_sel=self.back_color, text=''))
            res.append(MultiContentEntryText(pos=(0, 1), size=(250, 30), font=-2, flags=RT_HALIGN_CENTER, text='Wintersport'))
            self.thirdmenulist.append(res)
            self.thirdmenulink.append('http://www.tvspielfilm.de/suche/?tab=TV-Sendungen&ext=1&q=&cat[]=SPO&genreSPO=Wintersport&time=day&date=&channel=')
            self.genre.append('Sport: Wintersport')
            self['thirdmenu'].l.setList(self.thirdmenulist)
            self['thirdmenu'].l.setItemHeight(30)
            self['thirdmenu'].moveToIndex(0)
            self.selectThirdMenu()
        return

    def selectMainMenu(self):
        self.actmenu = 'mainmenu'
        self['mainmenu'].show()
        self['secondmenu'].hide()
        self['thirdmenu'].hide()
        self['mainmenu'].selectionEnabled(1)
        self['secondmenu'].selectionEnabled(0)
        self['thirdmenu'].selectionEnabled(0)
        if self.tipps == True:
            if self.hidetipps == False:
                self.showTipps()
            else:
                self['label2'].show()
                self['green'].show()
        self.ready = True

    def selectSecondMenu(self):
        if len(self.secondmenulist) > 0:
            self.actmenu = 'secondmenu'
            self['mainmenu'].hide()
            self['secondmenu'].show()
            self['thirdmenu'].hide()
            self['mainmenu'].selectionEnabled(0)
            self['secondmenu'].selectionEnabled(1)
            self['thirdmenu'].selectionEnabled(0)
            if self.tipps == True and self.hidetipps == False:
                self.showTipps()
        self.ready = True

    def selectThirdMenu(self):
        if len(self.thirdmenulist) > 0:
            self.actmenu = 'thirdmenu'
            self['mainmenu'].hide()
            self['secondmenu'].hide()
            self['thirdmenu'].show()
            self['mainmenu'].selectionEnabled(0)
            self['secondmenu'].selectionEnabled(0)
            self['thirdmenu'].selectionEnabled(1)
            if self.tipps == True:
                self.hideTipps()
        self.ready = True

    def green(self):
        if self.tipps == True and self.ready == True:
            if self.hidetipps == False:
                self.TagesTipps.ok()
            elif self.actmenu == 'mainmenu' or self.actmenu == 'secondmenu' and self.hidetipps == True:
                self.startTipps()

    def hideTipps(self):
        self.TagesTipps.hide()
        self['label2'].hide()
        self['green'].hide()
        self.hidetipps = True

    def showTipps(self):
        self.TagesTipps.show()
        self['label2'].show()
        self['green'].show()
        self.hidetipps = False

    def startTipps(self):
        self.TagesTipps.start()
        self.TagesTipps.show()
        self.hidetipps = False

    def stopTipps(self):
        self.TagesTipps.stop()
        self.TagesTipps.hide()
        self.hidetipps = True

    def up(self):
        self[self.actmenu].up()

    def down(self):
        self[self.actmenu].down()

    def leftUp(self):
        self[self.actmenu].pageUp()

    def rightDown(self):
        self[self.actmenu].pageDown()

    def checkVersion(self, output):
        self.pluginname = 'TV Spielfilm'
        version = search('<img alt="Version (.*?)"', output)
        if version is not None:
            version = version.group(1)
            if version != self.version:
                pluginsource = search('<a href="(.*?).attredirects=0".*?<img alt="Version ', output)
                if pluginsource is not None:
                    self.pluginsource = pluginsource.group(1)
                    self.pluginfile = self.pluginsource.replace('https://sites.google.com/site/kashmirplugins/', '').replace('%5f', '_')
                    versioninfo = re.findall('<li><span style="color:rgb\\(100,118,135\\)">(.*?)</span></li>', output)
                    if len(versioninfo) > 0:
                        info = ''
                        idx = 0
                        for x in versioninfo:
                            idx += 1

                        for i in range(idx):
                            try:
                                info = info + ' - ' + versioninfo[i] + '\n'
                            except IndexError:
                                Info = ''

                        if self.tipps == True:
                            self.stopTipps()
                        self.session.openWithCallback(self.downloadPlugin, MessageBox, '\nEine neue Plugin Version ist verf\xfcgbar:\n%s Version %s\n\n%s\nSoll die neue Version jetzt installiert werden?' % (self.pluginname, version, info), MessageBox.TYPE_YESNO)
                    else:
                        if self.tipps == True:
                            self.stopTipps()
                        self.session.openWithCallback(self.downloadPlugin, MessageBox, '\nEine neue Plugin Version ist verf\xfcgbar:\n%s Version %s\n\nSoll die neue Version jetzt installiert werden?' % (self.pluginname, version), MessageBox.TYPE_YESNO)
            elif config.plugins.tvspielfilm.paypal.value == 'yes':
                import random
                number = random.randint(1, 4)
                if number == 1:
                    self.session.open(infoScreenTVSpielfilm, None, False)
        return

    def downloadPlugin(self, answer):
        if answer is True:
            if self.tipps == True:
                self.TagesTipps.stop()
                self.session.deleteDialog(self.TagesTipps)
            self.pluginfile = '/tmp/' + str(self.pluginfile)
            self.session.openWithCallback(self.close, DownloadUpdate, self.pluginsource, self.pluginfile, self.pluginname)

    def downloadVersion(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadVersionError)

    def downloadVersionError(self, output):
        self.ready = True

    def downloadError(self, output):
        try:
            error = output.getErrorMessage()
            self.session.open(MessageBox, 'Der TV Spielfilm Server ist zurzeit nicht erreichbar:\n%s' % error, MessageBox.TYPE_ERROR)
            self.ready = True
        except AttributeError:
            self.ready = True

    def checkMainMenu(self):
        if fileExists(self.servicefile):
            self.makeMainMenu()
        else:
            self.session.openWithCallback(self.returnFirstRun, makeServiceFile)

    def downloadSender(self, link):
        if self.MeinTVS == True:
            try:
                response = self.opener.open(link, timeout=60)
                data = response.read()
                f = open(self.senderhtml, 'wb')
                f.write(data)
                f.close()
                response.close()
            except HTTPException as e:
                self.error = 'HTTP Exception Error ' + str(e)
            except HTTPError as e:
                self.error = 'HTTP Error: ' + str(e.code)
            except URLError as e:
                self.error = 'URL Error: ' + str(e.reason)
            except socket.error as e:
                self.error = 'Socket Error: ' + str(e)
            except AttributeError as e:
                self.error = 'Attribute Error: ' + str(e.message)

            if self.error == False:
                self.makeSecondMenu('string', link)
            else:
                self.makeErrorTimer = eTimer()
                self.makeErrorTimer.callback.append(self.displayError)
                self.makeErrorTimer.start(500, True)
        else:
            downloadPage(link, self.senderhtml).addCallback(self.makeSecondMenu, link).addErrback(self.downloadError)

    def getIndex(self, list):
        return list.getSelectedIndex()

    def makeTimerDB(self):
        timerxml = open('/etc/enigma2/timers.xml').read()
        timer = re.findall('<timer begin="(.*?)" end=".*?" serviceref="(.*?)"', timerxml)
        timerfile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db'
        f = open(timerfile, 'w')
        data = ''
        idx = 0
        for x in timer:
            idx += 1

        for i in range(idx):
            try:
                timerstart = timer[i - 1][0]
                timerstart = int(timerstart) + int(config.recording.margin_before.value) * 60
                timerday = time.strftime('%Y-%m-%d', time.localtime(timerstart))
                timerhour = time.strftime('%H:%M', time.localtime(timerstart))
                timersref = timer[i - 1][1]
                data = data + timerday + ':::' + timerhour + ':::' + timersref + '\n'
            except IndexError:
                pass

        f.write(data)
        f.close()

    def red(self):
        if self.ready == True:
            if self.tipps == True:
                self.stopTipps()
            self.session.openWithCallback(self.returnRed, MessageBox, '\nImportiere TV Spielfilm Sender?', MessageBox.TYPE_YESNO)

    def returnRed(self, answer):
        if answer is True:
            if fileExists(self.servicefile):
                os.remove(self.servicefile)
            self.session.openWithCallback(self.returnServiceFile, makeServiceFile)

    def returnServiceFile(self, result):
        if result == True:
            self.selectMainMenu()
        else:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
            self.close()

    def returnFirstRun(self, result):
        if result == True:
            self.checkMainMenu()
        else:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
            self.close()

    def config(self):
        if self.ready == True:
            if self.tipps == True:
                self.stopTipps()
                self.session.deleteDialog(self.TagesTipps)
            if fileExists(self.senderhtml):
                os.remove(self.senderhtml)
            config.usage.on_movie_stop.value = self.movie_stop
            config.usage.on_movie_eof.value = self.movie_eof
            self.session.openWithCallback(self.closeconf, tvsConfig)

    def closeconf(self):
        if fileExists(self.picfile):
            os.remove(self.picfile)
        if fileExists(self.pic1):
            os.remove(self.pic1)
        if fileExists(self.pic2):
            os.remove(self.pic2)
        if fileExists(self.pic3):
            os.remove(self.pic3)
        if fileExists(self.pic4):
            os.remove(self.pic4)
        if fileExists(self.pic5):
            os.remove(self.pic5)
        if fileExists(self.pic6):
            os.remove(self.pic6)
        if fileExists(self.wikihtml):
            os.remove(self.wikihtml)
        if fileExists(self.senderhtml):
            os.remove(self.senderhtml)
        if fileExists(self.localhtml):
            os.remove(self.localhtml)
        if fileExists(self.localhtml2):
            os.remove(self.localhtml2)
        if self.fhd == True:
            try:
                gMainDC.getInstance().setResolution(1920, 1080)
                desktop = getDesktop(0)
                desktop.resize(eSize(1920, 1080))
            except:
                import traceback
                traceback.print_exc()

        self.close()

    def zap(self):
        if self.ready == True:
            if self.tipps == True:
                self.stopTipps()
            servicelist = self.session.instantiateDialog(ChannelSelection)
            self.session.execDialog(servicelist)

    def infoScreen(self):
        if self.ready == True:
            if self.tipps == True:
                self.stopTipps()
            self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            self.hideflag = True
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        if self.actmenu == 'mainmenu':
            if self.tipps == True:
                self.TagesTipps.stop()
                self.session.deleteDialog(self.TagesTipps)
            if fileExists(self.picfile):
                os.remove(self.picfile)
            if fileExists(self.pic1):
                os.remove(self.pic1)
            if fileExists(self.pic2):
                os.remove(self.pic2)
            if fileExists(self.pic3):
                os.remove(self.pic3)
            if fileExists(self.pic4):
                os.remove(self.pic4)
            if fileExists(self.pic5):
                os.remove(self.pic5)
            if fileExists(self.pic6):
                os.remove(self.pic6)
            if fileExists(self.wikihtml):
                os.remove(self.wikihtml)
            if fileExists(self.senderhtml):
                os.remove(self.senderhtml)
            if fileExists(self.localhtml):
                os.remove(self.localhtml)
            if fileExists(self.localhtml2):
                os.remove(self.localhtml2)
            config.usage.on_movie_stop.value = self.movie_stop
            config.usage.on_movie_eof.value = self.movie_eof
            if self.fhd == True:
                try:
                    gMainDC.getInstance().setResolution(1920, 1080)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 1080))
                except:
                    import traceback
                    traceback.print_exc()

            self.close()
        elif self.actmenu == 'secondmenu':
            self.selectMainMenu()
        elif self.actmenu == 'thirdmenu':
            self.selectSecondMenu()


class makeServiceFile(Screen):
    skin = '\n\t\t\t<screen position="center,180" size="565,195" backgroundColor="#20000000" title="Import TV Spielfilm Sender: TV Bouquet Auswahl">\n\t\t\t\t<ePixmap position="0,0" size="565,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="list" position="10,60" size="545,125" scrollbarMode="showOnDemand" zPosition="1" />\n\t\t\t</screen>'

    def __init__(self, session):
        self.skin = makeServiceFile.skin
        self.session = session
        Screen.__init__(self, session)
        self['list'] = MenuList([])
        self['actions'] = ActionMap(['OkCancelActions'], {'ok': self.ok,
         'cancel': self.exit}, -1)
        self.servicefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/service.references'
        self.ready = False
        self.bouquetsTimer = eTimer()
        self.bouquetsTimer.callback.append(self.getBouquets)
        self.bouquetsTimer.start(500, True)

    def getBouquets(self):
        bouquets = []
        if config.usage.multibouquet.value:
            bouquet_rootstr = '1:7:1:0:0:0:0:0:0:0:FROM BOUQUET "bouquets.tv" ORDER BY bouquet'
        else:
            bouquet_rootstr = '1:7:1:0:0:0:0:0:0:0:FROM BOUQUET "userbouquet.favourites.tv" ORDER BY bouquet'
        bouquet_root = eServiceReference(bouquet_rootstr)
        serviceHandler = eServiceCenter.getInstance()
        if config.usage.multibouquet.value:
            list = serviceHandler.list(bouquet_root)
            if list:
                while True:
                    s = list.getNext()
                    if not s.valid():
                        break
                    if s.flags & eServiceReference.isDirectory:
                        info = serviceHandler.info(s)
                        if info:
                            bouquets.append((info.getName(s), s))

        else:
            info = serviceHandler.info(bouquet_root)
            if info:
                bouquets.append((info.getName(bouquet_root), bouquet_root))
        entrys = [ (x[0], x[1]) for x in bouquets ]
        self['list'].l.setList(entrys)
        try:
            if config.plugins.tvspielfilm.font.value == 'yes':
                self['list'].l.setFont(gFont('Sans', 20))
            else:
                self['list'].l.setFont(gFont('Regular', 20))
        except (AttributeError, TypeError):
            pass

        self.ready = True

    def ok(self):
        if self.ready == True:
            self.ready = False
            try:
                bouquet = self.getCurrent()
                from Components.Sources.ServiceList import ServiceList
                slist = ServiceList(bouquet, validate_commands=False)
                services = slist.getServicesAsList(format='S')
                search = ['IBDCTSERNX']
                search.extend([ (service, 0, -1) for service in services ])
                self.epgcache = eEPGCache.getInstance()
                events = self.epgcache.lookupEvent(search)
                eventlist = []
                for eventinfo in events:
                    eventlist.append((eventinfo[8], eventinfo[7]))

            except Exception:
                bouquet = '1:7:1:0:0:0:0:0:0:0:FROM BOUQUET "userbouquet.favourites.tv" ORDER BY bouquet'
                bouquet = eServiceReference(bouquet)
                from Components.Sources.ServiceList import ServiceList
                slist = ServiceList(bouquet, validate_commands=False)
                services = slist.getServicesAsList(format='S')
                search = ['IBDCTSERNX']
                search.extend([ (service, 0, -1) for service in services ])
                self.epgcache = eEPGCache.getInstance()
                events = self.epgcache.lookupEvent(search)
                eventlist = []
                for eventinfo in events:
                    eventlist.append((eventinfo[8], eventinfo[7]))

            data = str(eventlist)
            data = data.decode('latin1').encode('utf-8')
            data = sub('[[]', '', data)
            data = sub('[)][]]', '', data)
            data = sub('[(]', '', data)
            data = sub('[/]', ' ', data)
            data = sub(':0:0:0:.*?[)], ', ':0:0:0:\n', data)
            data = sub(':0:0:0::[a-zA-Z0-9_-]+', ':0:0:0:', data)
            data = sub("'", '', data)
            data = sub('HITRADIO.*?\n', '', data)
            data = transCHANNEL(data)
            f = open(self.servicefile, 'a')
            f.write(data)
            f.close()
            fnew = open(self.servicefile + '.new', 'w')
            newdata = ''
            count = 0
            search = re.compile(' [a-z0-9-]+ ').search
            for line in open(self.servicefile):
                if search(line):
                    line = ''
                elif 'nickcc' in line:
                    line = line.replace('nickcc', 'nick') + line.replace('nickcc', 'cc')
                    count += 1
                elif 'vivacc' in line:
                    line = line.replace('vivacc', 'viva') + line.replace('vivacc', 'cc')
                    count += 1
                line = line.strip()
                if not line == '' and ',' not in line and '/' not in line and ' 1:64:' not in line and '#' + line[0:5] not in newdata:
                    count += 1
                    fnew.write(line)
                    fnew.write(os.linesep)
                    newdata = newdata + '#' + str(line[0:5])

            f.close()
            fnew.close()
            os.rename(self.servicefile + '.new', self.servicefile)
            self.ready = True
            if newdata == '':
                self.session.openWithCallback(self.noBouquet, MessageBox, '\nKeine TV Spielfilm Sender gefunden.\nBitte w\xc3\xa4hlen Sie ein anderes TV Bouquet.', MessageBox.TYPE_YESNO)
            else:
                self.session.openWithCallback(self.otherBouquet, MessageBox, '\nInsgesamt %s TV Spielfilm Sender importiert.\nM\xc3\xb6chten Sie ein weiteres TV Bouquet importieren?' % str(count), MessageBox.TYPE_YESNO)

    def otherBouquet(self, answer):
        if answer is True:
            self.bouquetsTimer.callback.append(self.getBouquets)
        else:
            self.close(True)

    def noBouquet(self, answer):
        if answer is True:
            self.bouquetsTimer.callback.append(self.getBouquets)
        else:
            if fileExists(self.servicefile):
                os.remove(self.servicefile)
            self.close(False)

    def getCurrent(self):
        cur = self['list'].getCurrent()
        return cur and cur[1]

    def up(self):
        if self.ready == True:
            self['list'].up()

    def down(self):
        if self.ready == True:
            self['list'].down()

    def exit(self):
        if self.ready == True:
            self.close(False)


class tvTipps(Screen):
    skin = '\n\t\t\t<screen position="{position}" size="740,270" flags="wfNoBorder" title=" ">\n\t\t\t\t<widget name="picture" position="0,0" size="387,270" alphatest="blend" zPosition="1" />\n\t\t\t\t<widget name="elabel" position="387,0" size="{size},150" font="{font};18" backgroundColor="#FF000000" zPosition="1" />\n\t\t\t\t<widget name="elabel2" position="{position2},0" size="{size2}" font="{font};18" backgroundColor="#000000" zPosition="1" />\n\t\t\t\t<widget name="elabel3" position="387,150" size="353,125" font="{font};18" backgroundColor="#FFFFFF" zPosition="1" />\n\t\t\t\t<widget name="label" position="402,151" size="288,24" font="{font};20" foregroundColor="#697279" backgroundColor="#FFFFFF" halign="left" zPosition="2" />\n\t\t\t\t<widget name="label2" position="402,176" size="288,48" font="{font};22" foregroundColor="#{color}" backgroundColor="#FFFFFF" halign="left" zPosition="2" />\n\t\t\t\t<widget name="label3" position="402,225" size="328,42" font="{font};18" foregroundColor="#000000" backgroundColor="#FFFFFF" halign="left" zPosition="2" />\n\t\t\t\t<widget name="thumb" position="695,160" size="40,40" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/icons/rating small1HD.png" alphatest="blend" zPosition="2" />\n\t\t\t\t<widget name="label4" position="40,220" size="100,25" font="{font};22" foregroundColor="#FFFFFF" backgroundColor="#CD006C" halign="center" valign="center" zPosition="2" />\n\t\t\t\t<widget name="label5" position="40,245" size="100,25" font="{font};18" foregroundColor="#CD006C" backgroundColor="#FFFFFF" halign="center" valign="center" zPosition="2" />\n\t\t\t</screen>'

    def __init__(self, session):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        if config.plugins.tvspielfilm.color.value == '0x00000000':
            color = '4176B6'
        else:
            color = str(config.plugins.tvspielfilm.color.value)
            color = sub('0x00', '', color)
        deskWidth = getDesktop(0).size().width()
        if deskWidth >= 1920:
            position = '0,450'
            size = '98'
            position2 = '485'
            size2 = '20,150'
        else:
            position = '0,306'
            size = '0'
            position2 = '387'
            size2 = '0,0'
        self.dict = {'position': position,
         'size': size,
         'position2': position2,
         'size2': size2,
         'font': font,
         'color': color}
        self.skin = applySkinVars(tvTipps.skin, self.dict)
        Screen.__init__(self, session)
        self.baseurl = 'http://www.tvspielfilm.de'
        self.pic1 = '/tmp/tvspielfilm1.jpg'
        self.pic2 = '/tmp/tvspielfilm2.jpg'
        self.pic3 = '/tmp/tvspielfilm3.jpg'
        self.pic4 = '/tmp/tvspielfilm4.jpg'
        self.pic5 = '/tmp/tvspielfilm5.jpg'
        self.max = 6
        self.count = 0
        self.ready = False
        self.hideflag = True
        self.infolink = ''
        self.tippsinfo = []
        self.tippslink = []
        self.tippschannel = []
        self.tippspicture = []
        self['picture'] = Pixmap()
        self['thumb'] = Pixmap()
        self['picture'].hide()
        self['thumb'].hide()
        self['label'] = Label('')
        self['label2'] = Label('')
        self['label3'] = Label('')
        self['label4'] = Label('')
        self['label5'] = Label('')
        self['elabel'] = Label('')
        self['elabel2'] = Label('')
        self['elabel3'] = Label('')
        self['label'].hide()
        self['label2'].hide()
        self['label3'].hide()
        self['label4'].hide()
        self['label5'].hide()
        self['elabel'].hide()
        self['elabel2'].hide()
        self['elabel3'].hide()
        self['actions'] = ActionMap(['OkCancelActions'], {'ok': self.ok,
         'cancel': self.exit}, -1)
        self.onLayoutFinish.append(self.start)

    def start(self):
        self.getTippsTimer = eTimer()
        self.getTippsTimer.callback.append(self.downloadFirst(self.baseurl, self.getTagesTipps))
        self.getTippsTimer.start(500, True)
        self.getNextTimer = eTimer()
        self.getNextTimer.callback.append(self.nextTipp)
        self.getNextTimer.start(5000, False)

    def stop(self):
        self.getTippsTimer.stop()
        self.getNextTimer.stop()
        if self.nextTipp in self.getNextTimer.callback:
            self.getNextTimer.callback.remove(self.nextTipp)
        self.hide()

    def getTagesTipps(self, output):
        self.ready = False
        startpos = find(output, 'teaser-top">')
        endpos = find(output, '<div class="block-rotation">')
        bereich = output[startpos:endpos]
        bereich = re.sub('<ul.*?</ul>', '', bereich, flags=re.S)
        if search('/news-und-specials/', bereich) is not None:
            bereich = re.sub('<a href="http://my.tvspielfilm.de/news-und-specials/.*?</a>', '', bereich, flags=re.S)
            bereich = re.sub('<a href="http://www.tvspielfilm.de/news-und-specials/.*?</a>', '', bereich, flags=re.S)
        if search('pdf.tvspielfilm.de', bereich) is not None:
            bereich = re.sub('<a href="http://pdf.tvspielfilm.de/.*?</a>', '', bereich, flags=re.S)
        self.tippspicture = re.findall('<img src="(.*?)"', bereich, flags=re.S)
        try:
            self.download(self.tippspicture[0], self.getPic)
        except IndexError:
            pass

        self.tippschannel = re.findall('<span class="subline .*?">(.*?)</span>', bereich)
        try:
            parts = self.tippschannel[0].split(' | ')
            times = parts[1]
            channel = parts[2]
            channel = shortenChannel(channel)
            self['label4'].setText(times)
            self['label4'].show()
            self['label5'].setText(channel[0:10])
            self['label5'].show()
        except IndexError:
            self['label4'].hide()
            self['label5'].hide()

        self.tippsinfo = re.findall('<span class="headline">(.*?)</span>', bereich)
        self.tippslink = re.findall('<a href="(.*?)" target', bereich)
        try:
            self.infolink = self.tippslink[0]
            tipp = 'Tipp des Tages'
            titel = self.tippsinfo[0]
            text = self.tippschannel[0]
        except IndexError:
            tipp = ''
            titel = ''
            text = ''

        self['label'].setText(tipp)
        self['label2'].setText(titel)
        self['label3'].setText(text)
        self['label'].show()
        self['label2'].show()
        self['label3'].show()
        self['elabel'].show()
        self['elabel2'].show()
        self['elabel3'].show()
        self['thumb'].show()
        try:
            self.download(self.tippspicture[1], self.getPic2)
            self.download(self.tippspicture[2], self.getPic3)
            self.download(self.tippspicture[3], self.getPic4)
            self.download(self.tippspicture[4], self.getPic5)
        except IndexError:
            pass

        self.ready = True
        return

    def ok(self):
        if self.ready == True and search('/tv-programm/sendung/', self.infolink) is not None:
            self.hide()
            self.getNextTimer.stop()
            self.session.openWithCallback(self.returnInfo, TVProgrammView, self.infolink, False, True)
        return

    def returnInfo(self):
        self.show()
        self.getNextTimer.start(5000, False)

    def nextTipp(self):
        if self.ready == True:
            self.count += 1
            if self.count < self.max:
                pic = '/tmp/tvspielfilm%s.jpg' % str(self.count + 1)
                if fileExists(pic):
                    self.showPic(pic)
                try:
                    self.infolink = self.tippslink[self.count]
                    tipp = 'Tipp des Tages'
                    titel = self.tippsinfo[self.count]
                    text = self.tippschannel[self.count]
                except IndexError:
                    tipp = ''
                    titel = ''
                    text = ''

                self['label'].setText(tipp)
                self['label2'].setText(titel)
                self['label3'].setText(text)
                try:
                    parts = self.tippschannel[self.count].split(' | ')
                    times = parts[1]
                    channel = parts[2]
                    channel = shortenChannel(channel)
                    self['label4'].setText(times)
                    self['label4'].show()
                    self['label5'].setText(channel[0:10])
                    self['label5'].show()
                except IndexError:
                    self['label4'].hide()
                    self['label5'].hide()

            else:
                self.count = 0
                pic = '/tmp/tvspielfilm1.jpg'
                if fileExists(pic):
                    self.showPic(pic)
                try:
                    self.infolink = self.tippslink[self.count]
                    tipp = 'Tipp des Tages'
                    titel = self.tippsinfo[self.count]
                    text = self.tippschannel[self.count]
                except IndexError:
                    tipp = ''
                    titel = ''
                    text = ''

                self['label'].setText(tipp)
                self['label2'].setText(titel)
                self['label3'].setText(text)
                try:
                    parts = self.tippschannel[self.count].split(' | ')
                    times = parts[1]
                    channel = parts[2]
                    channel = shortenChannel(channel)
                    self['label4'].setText(times)
                    self['label4'].show()
                    self['label5'].setText(channel[0:10])
                    self['label5'].show()
                except IndexError:
                    self['label4'].hide()
                    self['label5'].hide()

    def getPic(self, output):
        f = open(self.pic1, 'wb')
        f.write(output)
        f.close()
        self.showPic(self.pic1)

    def showPic(self, picture):
        currPic = loadPic(picture, 387, 270, 3, 0, 0, 0)
        if currPic != None:
            self['picture'].instance.setPixmap(currPic)
            self['picture'].show()
        return

    def getPic2(self, output):
        f = open(self.pic2, 'wb')
        f.write(output)
        f.close()

    def getPic3(self, output):
        f = open(self.pic3, 'wb')
        f.write(output)
        f.close()

    def getPic4(self, output):
        f = open(self.pic4, 'wb')
        f.write(output)
        f.close()

    def getPic5(self, output):
        f = open(self.pic5, 'wb')
        f.write(output)
        f.close()

    def download(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadError)

    def downloadError(self, output):
        self.ready = True

    def downloadFirst(self, link, name):
        getPage(link).addCallback(name).addErrback(self.downloadFirstError)

    def downloadFirstError(self, output):
        try:
            error = output.getErrorMessage()
            self.session.open(MessageBox, 'Der TV Spielfilm Server ist zurzeit nicht erreichbar:\n%s' % error, MessageBox.TYPE_ERROR)
        except AttributeError:
            self.session.open(MessageBox, 'Der TV Spielfilm Server ist zurzeit nicht erreichbar.' % error, MessageBox.TYPE_ERROR)

        self.ready = True

    def zap(self):
        servicelist = self.session.instantiateDialog(ChannelSelection)
        self.session.execDialog(servicelist)

    def infoScreen(self):
        self.session.open(infoScreenTVSpielfilm, None, True)
        return

    def hideScreen(self):
        if self.hideflag == True:
            self.hideflag = False
            count = 40
            while count > 0:
                count -= 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

        else:
            self.hideflag = True
            count = 0
            while count < 40:
                count += 1
                f = open('/proc/stb/video/alpha', 'w')
                f.write('%i' % (config.av.osd_alpha.value * count / 40))
                f.close()

    def exit(self):
        if self.hideflag == False:
            f = open('/proc/stb/video/alpha', 'w')
            f.write('%i' % config.av.osd_alpha.value)
            f.close()
        self.close()


class tvsConfig(ConfigListScreen, Screen):
    skin = '\n\t\t\t<screen position="center,center" size="545,500" backgroundColor="#20000000" title="TV Spielfilm Setup">\n\t\t\t\t<ePixmap position="0,0" size="545,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<ePixmap position="10,59" size="525,1" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/setup/seperator.png" alphatest="off" zPosition="1" />\n\t\t\t\t<widget name="config" position="10,60" size="525,100" itemHeight="25" scrollbarMode="showOnDemand" zPosition="1" />\n\t\t\t\t<ePixmap position="10,161" size="525,1" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/setup/seperator.png" alphatest="off" zPosition="1" />\n\t\t\t\t<ePixmap position="125,171" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<ePixmap position="350,171" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<eLabel position="150,170" size="180,20" font="{font};18" halign="left" text="Speichern" transparent="1" zPosition="1" />\n\t\t\t\t<eLabel position="375,170" size="180,20" font="{font};18" halign="left" text="Abbrechen" transparent="1" zPosition="1" />\n\t\t\t\t<widget name="plugin" position="10,200" size="525,295" alphatest="blend" zPosition="1" />\n\t\t\t</screen>'

    def __init__(self, session):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        self.dict = {'font': font}
        self.skin = applySkinVars(tvsConfig.skin, self.dict)
        Screen.__init__(self, session)
        self.password = config.plugins.tvspielfilm.password.value
        self.encrypt = config.plugins.tvspielfilm.encrypt.value
        self['plugin'] = Pixmap()
        list = []
        list.append(getConfigListEntry('Plugin Gr\xc3\xb6\xc3\x9fe:', config.plugins.tvspielfilm.plugin_size))
        list.append(getConfigListEntry('Plugin Position:', config.plugins.tvspielfilm.position))
        list.append(getConfigListEntry('Plugin Schriftgr\xc3\xb6\xc3\x9fe:', config.plugins.tvspielfilm.font_size))
        list.append(getConfigListEntry('Plugin Sans Serif Schrift:', config.plugins.tvspielfilm.font))
        list.append(getConfigListEntry('Benutze Mein TV SPIELFILM:', config.plugins.tvspielfilm.meintvs))
        list.append(getConfigListEntry('Login (E-mail):', config.plugins.tvspielfilm.login))
        list.append(getConfigListEntry('Passwort:', config.plugins.tvspielfilm.password))
        list.append(getConfigListEntry('Passwort Verschl\xfcsselung:', config.plugins.tvspielfilm.encrypt))
        list.append(getConfigListEntry('Benutze eigene Picons (100x60):', config.plugins.tvspielfilm.picon))
        self.foldername = getConfigListEntry('Picon Ordner:', config.plugins.tvspielfilm.piconfolder)
        list.append(self.foldername)
        list.append(getConfigListEntry('Farbe Listen Auswahl:', config.plugins.tvspielfilm.color))
        list.append(getConfigListEntry('Zeige Tipp des Tages:', config.plugins.tvspielfilm.tipps))
        list.append(getConfigListEntry('Starte Heute im TV mit:', config.plugins.tvspielfilm.primetime))
        list.append(getConfigListEntry('Starte TVS EventView mit:', config.plugins.tvspielfilm.eventview))
        list.append(getConfigListEntry('Beende TVS Jetzt nach dem Zappen:', config.plugins.tvspielfilm.zapexit))
        list.append(getConfigListEntry('Zeige Genre/Episode/Jahr am Ende des Titels:', config.plugins.tvspielfilm.genreinfo))
        list.append(getConfigListEntry('Max. Seiten TV-Suche:', config.plugins.tvspielfilm.maxsearch))
        list.append(getConfigListEntry('Max. Seiten TV-Genre Suche:', config.plugins.tvspielfilm.maxgenre))
        list.append(getConfigListEntry('Benutze AutoTimer Plugin:', config.plugins.tvspielfilm.autotimer))
        list.append(getConfigListEntry('Full HD Skin Support:', config.plugins.tvspielfilm.fhd))
        list.append(getConfigListEntry('Auto Update Check:', config.plugins.tvspielfilm.autoupdate))
        list.append(getConfigListEntry('PayPal Info:', config.plugins.tvspielfilm.paypal))
        ConfigListScreen.__init__(self, list, on_change=self.UpdateComponents)
        self['actions'] = ActionMap(['OkCancelActions', 'ColorActions'], {'ok': self.save,
         'cancel': self.cancel,
         'red': self.cancel,
         'green': self.save}, -1)
        self.onLayoutFinish.append(self.UpdateComponents)

    def UpdateComponents(self):
        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/setup/' + str(config.plugins.tvspielfilm.color.value) + '.png'
        if fileExists(png):
            self['plugin'].instance.setPixmapFromFile(png)
        current = self['config'].getCurrent()
        if current == self.foldername:
            self.session.openWithCallback(self.folderSelected, FolderSelection, config.plugins.tvspielfilm.piconfolder.value)
        elif current == getConfigListEntry('PayPal Info:', config.plugins.tvspielfilm.paypal):
            import time
            from Screens.InputBox import PinInput
            self.pin = int(time.strftime('%d%m'))
            self.session.openWithCallback(self.returnPin, PinInput, pinList=[self.pin], triesEntry=config.ParentalControl.retries.servicepin)

    def folderSelected(self, folder):
        if folder is not None:
            config.plugins.tvspielfilm.piconfolder.value = folder
            config.plugins.tvspielfilm.piconfolder.save()
        return

    def returnPin(self, pin):
        if pin:
            config.plugins.tvspielfilm.paypal.value = 'no'
            config.plugins.tvspielfilm.paypal.save()
            configfile.save()
        else:
            config.plugins.tvspielfilm.paypal.value = 'yes'
            config.plugins.tvspielfilm.paypal.save()

    def save(self):
        config.plugins.tvspielfilm.plugin_size.save()
        config.plugins.tvspielfilm.position.save()
        config.plugins.tvspielfilm.font_size.save()
        config.plugins.tvspielfilm.font.save()
        config.plugins.tvspielfilm.meintvs.save()
        config.plugins.tvspielfilm.login.save()
        if config.plugins.tvspielfilm.password.value != self.password:
            if config.plugins.tvspielfilm.encrypt.value == 'yes':
                password = b64encode(str(config.plugins.tvspielfilm.password.value))
                config.plugins.tvspielfilm.password.value = password
            config.plugins.tvspielfilm.password.save()
        elif config.plugins.tvspielfilm.encrypt.value != self.encrypt:
            if self.encrypt == 'yes':
                try:
                    password = b64decode(str(config.plugins.tvspielfilm.password.value))
                    config.plugins.tvspielfilm.password.value = password
                except TypeError:
                    pass

            else:
                password = b64encode(str(config.plugins.tvspielfilm.password.value))
                config.plugins.tvspielfilm.password.value = password
            config.plugins.tvspielfilm.password.save()
            config.plugins.tvspielfilm.encrypt.save()
        config.plugins.tvspielfilm.picon.save()
        config.plugins.tvspielfilm.piconfolder.save()
        config.plugins.tvspielfilm.color.save()
        config.plugins.tvspielfilm.tipps.save()
        config.plugins.tvspielfilm.primetime.save()
        config.plugins.tvspielfilm.eventview.save()
        config.plugins.tvspielfilm.zapexit.save()
        config.plugins.tvspielfilm.genreinfo.save()
        config.plugins.tvspielfilm.maxsearch.save()
        config.plugins.tvspielfilm.maxgenre.save()
        config.plugins.tvspielfilm.autotimer.save()
        config.plugins.tvspielfilm.fhd.save()
        config.plugins.tvspielfilm.autoupdate.save()
        config.plugins.tvspielfilm.paypal.save()
        configfile.save()
        self.exit()

    def cancel(self):
        for x in self['config'].list:
            x[1].cancel()

        self.exit()

    def exit(self):
        if config.plugins.tvspielfilm.meintvs.value == 'yes' and config.plugins.tvspielfilm.login.value == '' or config.plugins.tvspielfilm.meintvs.value == 'yes' and config.plugins.tvspielfilm.password.value == '':
            self.session.openWithCallback(self.nologin_return, MessageBox, 'Sie haben den Mein TV SPIELFILM Login aktiviert, aber unvollst\xc3\xa4ndige Login-Daten angegeben.\n\nM\xc3\xb6chten Sie die Mein TV SPIELFILM Login-Daten jetzt angeben oder Mein TV SPIELFILM deaktivieren?', MessageBox.TYPE_YESNO)
        else:
            self.session.openWithCallback(self.close, tvMain)

    def nologin_return(self, answer):
        if answer is True:
            pass
        else:
            config.plugins.tvspielfilm.meintvs.value = 'no'
            config.plugins.tvspielfilm.meintvs.save()
            configfile.save()
            self.session.openWithCallback(self.close, tvMain)


class FolderSelection(Screen):
    skin = '\n\t\t\t<screen position="center,center" size="545,510" backgroundColor="#20000000" title="TV Spielfilm Setup">\n\t\t\t\t<ePixmap position="0,0" size="545,50" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/tvspielfilm.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<ePixmap position="10,59" size="525,1" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/setup/seperator.png" alphatest="off" zPosition="1" />\n\t\t\t\t<widget name="folderlist" position="10,60" size="525,100" itemHeight="25" scrollbarMode="showNever" zPosition="1" />\n\t\t\t\t<ePixmap position="10,161" size="525,1" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/setup/seperator.png" alphatest="off" zPosition="1" />\n\t\t\t\t<ePixmap position="125,171" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/green.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<ePixmap position="350,171" size="18,18" pixmap="/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/buttons/red.png" alphatest="blend" zPosition="1" />\n\t\t\t\t<eLabel position="150,170" size="180,20" font="{font};18" halign="left" text="Speichern" transparent="1" zPosition="1" />\n\t\t\t\t<eLabel position="375,170" size="180,20" font="{font};18" halign="left" text="Abbrechen" transparent="1" zPosition="1" />\n\t\t\t\t<widget name="plugin" position="10,200" size="525,300" alphatest="blend" zPosition="1" />\n\t\t\t</screen>'

    def __init__(self, session, folder):
        if config.plugins.tvspielfilm.font.value == 'yes':
            font = 'Sans'
        else:
            font = 'Regular'
        self.dict = {'font': font}
        self.skin = applySkinVars(FolderSelection.skin, self.dict)
        Screen.__init__(self, session)
        self['plugin'] = Pixmap()
        noFolder = ['/bin',
         '/boot',
         '/dev',
         '/etc',
         '/proc',
         '/sbin',
         '/sys']
        self['folderlist'] = FileList(folder, showDirectories=True, showFiles=False, inhibitDirs=noFolder)
        self['actions'] = ActionMap(['OkCancelActions', 'DirectionActions', 'ColorActions'], {'ok': self.ok,
         'cancel': self.cancel,
         'right': self.right,
         'left': self.left,
         'down': self.down,
         'up': self.up,
         'red': self.cancel,
         'green': self.green}, -1)
        self.onLayoutFinish.append(self.pluginPic)

    def pluginPic(self):
        png = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/pic/setup/' + str(config.plugins.tvspielfilm.color.value) + '.png'
        if fileExists(png):
            self['plugin'].instance.setPixmapFromFile(png)

    def ok(self):
        if self['folderlist'].canDescent():
            self['folderlist'].descent()

    def right(self):
        self['folderlist'].pageDown()

    def left(self):
        self['folderlist'].pageUp()

    def down(self):
        self['folderlist'].down()

    def up(self):
        self['folderlist'].up()

    def green(self):
        self.close(self['folderlist'].getSelection()[0])

    def cancel(self):
        self.close(None)
        return


class ItemList(MenuList):

    def __init__(self, items, enableWrapAround = True):
        MenuList.__init__(self, items, enableWrapAround, eListboxPythonMultiContent)
        if config.plugins.tvspielfilm.font.value == 'yes':
            self.l.setFont(-2, gFont('Sans', 24))
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.l.setFont(-1, gFont('Sans', 26))
                self.l.setFont(0, gFont('Sans', 24))
                self.l.setFont(1, gFont('Sans', 22))
                self.l.setFont(2, gFont('Sans', 20))
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.l.setFont(-1, gFont('Sans', 24))
                self.l.setFont(0, gFont('Sans', 22))
                self.l.setFont(1, gFont('Sans', 20))
                self.l.setFont(2, gFont('Sans', 18))
            else:
                self.l.setFont(-1, gFont('Sans', 22))
                self.l.setFont(0, gFont('Sans', 20))
                self.l.setFont(1, gFont('Sans', 18))
                self.l.setFont(2, gFont('Sans', 16))
        else:
            self.l.setFont(-2, gFont('Regular', 24))
            if config.plugins.tvspielfilm.font_size.value == 'verylarge':
                self.l.setFont(-1, gFont('Regular', 26))
                self.l.setFont(0, gFont('Regular', 24))
                self.l.setFont(1, gFont('Regular', 22))
                self.l.setFont(2, gFont('Regular', 20))
            elif config.plugins.tvspielfilm.font_size.value == 'large':
                self.l.setFont(-1, gFont('Regular', 24))
                self.l.setFont(0, gFont('Regular', 22))
                self.l.setFont(1, gFont('Regular', 20))
                self.l.setFont(2, gFont('Regular', 18))
            else:
                self.l.setFont(-1, gFont('Regular', 22))
                self.l.setFont(0, gFont('Regular', 20))
                self.l.setFont(1, gFont('Regular', 18))
                self.l.setFont(2, gFont('Regular', 16))


class BlinkingLabel(Label, BlinkingWidget):

    def __init__(self, text = ''):
        Label.__init__(self, text=text)
        BlinkingWidget.__init__(self)


class tvJetzt(Screen):
    skin = '\n\t\t\t\t<screen position="0,0" size="0,0" >\n\t\t\t\t</screen>'

    def __init__(self, session):
        self.skin = tvJetzt.skin
        self.session = session
        Screen.__init__(self, session)
        self.fhd = False
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            if getDesktop(0).size().width() == 1920:
                self.fhd = True
                try:
                    gMainDC.getInstance().setResolution(1920, 720)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 720))
                except:
                    import traceback
                    traceback.print_exc()

        self.servicefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/service.references'
        self.channel_db = channelDB(self.servicefile)
        self.JetztTimer = eTimer()
        self.JetztTimer.callback.append(self.makeTimerDB)
        self.JetztTimer.callback.append(self.makeCheck)
        self.JetztTimer.start(200, True)

    def makeCheck(self):
        if fileExists(self.servicefile):
            link = 'http://www.tvspielfilm.de/tv-programm/sendungen/abends.html'
            self.session.openWithCallback(self.exit, TVJetztView, link, True)
        else:
            self.session.openWithCallback(self.returnServiceFile, makeServiceFile)

    def returnServiceFile(self, result):
        if result == True:
            link = 'http://www.tvspielfilm.de/tv-programm/sendungen/jetzt.html'
            self.session.openWithCallback(self.exit, TVJetztView, link, True)
        else:
            if self.fhd == True:
                try:
                    gMainDC.getInstance().setResolution(1920, 1080)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 1080))
                except:
                    import traceback
                    traceback.print_exc()

            self.close()

    def makeTimerDB(self):
        timerxml = open('/etc/enigma2/timers.xml').read()
        timer = re.findall('<timer begin="(.*?)" end=".*?" serviceref="(.*?)"', timerxml)
        timerfile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db'
        f = open(timerfile, 'w')
        data = ''
        idx = 0
        for x in timer:
            idx += 1

        for i in range(idx):
            try:
                timerstart = timer[i - 1][0]
                timerstart = int(timerstart) + int(config.recording.margin_before.value) * 60
                timerday = time.strftime('%Y-%m-%d', time.localtime(timerstart))
                timerhour = time.strftime('%H:%M', time.localtime(timerstart))
                timersref = timer[i - 1][1]
                data = data + timerday + ':::' + timerhour + ':::' + timersref + '\n'
            except IndexError:
                pass

        f.write(data)
        f.close()

    def exit(self):
        if self.fhd == True:
            try:
                gMainDC.getInstance().setResolution(1920, 1080)
                desktop = getDesktop(0)
                desktop.resize(eSize(1920, 1080))
            except:
                import traceback
                traceback.print_exc()

        self.close()


class tvEvent(Screen):
    skin = '\n\t\t\t\t<screen position="0,0" size="0,0" >\n\t\t\t\t</screen>'

    def __init__(self, session):
        self.skin = tvEvent.skin
        self.session = session
        Screen.__init__(self, session)
        self.fhd = False
        if config.plugins.tvspielfilm.fhd.value == 'yes':
            if getDesktop(0).size().width() == 1920:
                self.fhd = True
                try:
                    gMainDC.getInstance().setResolution(1920, 720)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 720))
                except:
                    import traceback
                    traceback.print_exc()

        self.servicefile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/service.references'
        self.channel_db = channelDB(self.servicefile)
        self.EventTimer = eTimer()
        self.EventTimer.callback.append(self.makeTimerDB)
        self.EventTimer.callback.append(self.makeChannelLink)
        self.EventTimer.start(200, True)

    def makeChannelLink(self):
        if fileExists(self.servicefile):
            sref = ServiceReference(self.session.nav.getCurrentlyPlayingServiceReference())
            sref = str(sref) + 'FIN'
            sref = sub(':0:0:0:.*?FIN', ':0:0:0:', sref)
            channel = self.channel_db.lookup(sref)
            if channel == 'nope':
                self.session.open(MessageBox, 'Service not found:\nNo entry for current service reference\n%s' % str(sref), MessageBox.TYPE_INFO, close_on_any_key=True)
                if self.fhd == True:
                    try:
                        gMainDC.getInstance().setResolution(1920, 1080)
                        desktop = getDesktop(0)
                        desktop.resize(eSize(1920, 1080))
                    except:
                        import traceback
                        traceback.print_exc()

                self.close()
            else:
                link = 'http://www.tvspielfilm.de/tv-programm/sendungen/&page=0,' + str(channel) + '.html'
                self.session.openWithCallback(self.exit, TVProgrammView, link, True, False)
        else:
            self.session.openWithCallback(self.returnServiceFile, makeServiceFile)

    def returnServiceFile(self, result):
        if result == True:
            self.EventTimer.callback.append(self.makeChannelLink)
        else:
            if self.fhd == True:
                try:
                    gMainDC.getInstance().setResolution(1920, 1080)
                    desktop = getDesktop(0)
                    desktop.resize(eSize(1920, 1080))
                except:
                    import traceback
                    traceback.print_exc()

            self.close()

    def makeTimerDB(self):
        timerxml = open('/etc/enigma2/timers.xml').read()
        timer = re.findall('<timer begin="(.*?)" end=".*?" serviceref="(.*?)"', timerxml)
        timerfile = '/usr/lib/enigma2/python/Plugins/Extensions/TVSpielfilm/db/timer.db'
        f = open(timerfile, 'w')
        data = ''
        idx = 0
        for x in timer:
            idx += 1

        for i in range(idx):
            try:
                timerstart = timer[i - 1][0]
                timerstart = int(timerstart) + int(config.recording.margin_before.value) * 60
                timerday = time.strftime('%Y-%m-%d', time.localtime(timerstart))
                timerhour = time.strftime('%H:%M', time.localtime(timerstart))
                timersref = timer[i - 1][1]
                data = data + timerday + ':::' + timerhour + ':::' + timersref + '\n'
            except IndexError:
                pass

        f.write(data)
        f.close()

    def exit(self):
        if self.fhd == True:
            try:
                gMainDC.getInstance().setResolution(1920, 1080)
                desktop = getDesktop(0)
                desktop.resize(eSize(1920, 1080))
            except:
                import traceback
                traceback.print_exc()

        self.close()


def transCHANNEL(data):
    data = sub('Das Erste.*?,', 'ard', data)
    data = sub('ZDF HD,', 'zdf', data)
    data = sub('ZDF,', 'zdf', data)
    data = sub('zdf_neo.*?,', '2neo', data)
    data = sub('zdf neo.*?,', '2neo', data)
    data = sub('ZDF_neo.*?,', '2neo', data)
    data = sub('ZDF neo.*?,', '2neo', data)
    data = sub('ZDFneo.*?,', '2neo', data)
    data = sub('zdf.kultur.*?,', '2kult', data)
    data = sub('zdf kultur.*?,', '2kult', data)
    data = sub('ZDF.kultur.*?,', '2kult', data)
    data = sub('ZDF kultur.*?,', '2kult', data)
    data = sub('ZDFinfo.*?,', 'zinfo', data)
    data = sub('ZDF info.*?,', 'zinfo', data)
    data = sub('EinsPlus.*?,', 'mux', data)
    data = sub('eins plus.*?,', 'mux', data)
    data = sub('Zee.One.*?,', 'zee-1', data)
    data = sub('zee.one.*?,', 'zee-1', data)
    data = sub('One,', 'fes', data)
    data = sub('One HD,', 'fes', data)
    data = sub('ONE,', 'fes', data)
    data = sub('ONE HD,', 'fes', data)
    data = sub('Einsfestival.*?,', 'fes', data)
    data = sub('EinsFestival.*?,', 'fes', data)
    data = sub('eins festival.*?,', 'fes', data)
    data = sub('tagesschau.*?,', 'tag24', data)
    data = sub('3sat.*?,', '3sat', data)
    data = sub('3Sat.*?,', '3sat', data)
    data = sub('phoenix.*?,', 'phoen', data)
    data = sub('Phoenix.*?,', 'phoen', data)
    data = sub('PHOENIX.*?,', 'phoen', data)
    data = sub('ProSieben,', 'pro7', data)
    data = sub('ProSieben Austria,', 'pro7', data)
    data = sub('ProSieben HD,', 'pro7', data)
    data = sub('Prosieben,', 'pro7', data)
    data = sub('Prosieben Austria,', 'pro7', data)
    data = sub('Prosieben HD,', 'pro7', data)
    data = sub('Pro 7,', 'pro7', data)
    data = sub('Pro7,', 'pro7', data)
    data = sub('Pro 7 HD,', 'pro7', data)
    data = sub('Pro7 HD,', 'pro7', data)
    data = sub('Pro.*?Fun,', 'pro7f', data)
    data = sub('Pro.*?FUN,', 'pro7f', data)
    data = sub('Pro.*?Fun HD,', 'pro7f', data)
    data = sub('Pro.*?FUN HD,', 'pro7f', data)
    data = sub('Pro.*?Maxx,', 'pro7m', data)
    data = sub('Pro.*?MAXX,', 'pro7m', data)
    data = sub('Pro.*?Maxx HD,', 'pro7m', data)
    data = sub('Pro.*?MAXX HD,', 'pro7m', data)
    data = sub('SAT 1,', 'sat1', data)
    data = sub('SAT.1,', 'sat1', data)
    data = sub('Sat.1,', 'sat1', data)
    data = sub('SAT.1 A.*?,', 'sat1', data)
    data = sub('Sat.1 A.*?,', 'sat1', data)
    data = sub('SAT 1 HD,', 'sat1', data)
    data = sub('SAT.1 HD,', 'sat1', data)
    data = sub('Sat.1 HD,', 'sat1', data)
    data = sub('SAT 1 emotions.*?,', 'sat1e', data)
    data = sub('SAT.1 emotions.*?,', 'sat1e', data)
    data = sub('Sat.1 emotions.*?,', 'sat1e', data)
    data = sub('SAT 1 Emotions.*?,', 'sat1e', data)
    data = sub('SAT.1 Emotions.*?,', 'sat1e', data)
    data = sub('Sat.1 Emotions.*?,', 'sat1e', data)
    data = sub('SAT 1 Gold.*?,', 'sat1g', data)
    data = sub('SAT.1 Gold.*?,', 'sat1g', data)
    data = sub('Sat.1 Gold.*?,', 'sat1g', data)
    data = sub('RTL,', 'rtl', data)
    data = sub('RTL Television.*?,', 'rtl', data)
    data = sub('RTL Austria,', 'rtl', data)
    data = sub('RTL HD,', 'rtl', data)
    data = sub('RTL 2.*?,', 'rtl2', data)
    data = sub('RTL2.*?,', 'rtl2', data)
    data = sub('RTL II.*?,', 'rtl2', data)
    data = sub('RTLII.*?,', 'rtl2', data)
    data = sub('Super rtl', 'super', data)
    data = sub('SUPER rtl', 'super', data)
    data = sub('SUPER RTL.*?,', 'super', data)
    data = sub('RTLPlus,', 'rtlpl', data)
    data = sub('RTLplus,', 'rtlpl', data)
    data = sub('rtlplus,', 'rtlpl', data)
    data = sub('RTL Crime.*?,', 'rtl-c', data)
    data = sub('RTL Living.*?,', 'rtl-l', data)
    data = sub('RTL Nitro.*?,', 'rtl-n', data)
    data = sub('RTL NITRO.*?,', 'rtl-n', data)
    data = sub('RTLNITRO.*?,', 'rtl-n', data)
    data = sub('NITRO.*?,', 'rtl-n', data)
    data = sub('RTL Passion.*?,', 'pass', data)
    data = sub('Passion,', 'pass', data)
    data = sub('Passion HD,', 'pass', data)
    data = sub('VOX.*?,', 'vox', data)
    data = sub('Vox.*?,', 'vox', data)
    data = sub('sixx.*?,', 'sixx', data)
    data = sub('SIXX.*?,', 'sixx', data)
    data = sub('kabel eins,', 'k1', data)
    data = sub('kabel eins C.*?,', 'k1cla', data)
    data = sub('Kabel 1,', 'k1', data)
    data = sub('Kabel 1 Austria,', 'k1', data)
    data = sub('Kabel 1 C.*?,', 'k1cla', data)
    data = sub('kabel 1 C.*?,', 'k1cla', data)
    data = sub('kabel eins HD,', 'k1', data)
    data = sub('kabel 1 HD,', 'k1', data)
    data = sub('Kabel 1 HD,', 'k1', data)
    data = sub('kabel eins Doku,', 'k1doku', data)
    data = sub('Kabel eins Doku,', 'k1doku', data)
    data = sub('kabel 1 Doku,', 'k1doku', data)
    data = sub('Kabel 1 Doku,', 'k1doku', data)
    data = sub('kabel eins Doku Austria,', 'k1doku', data)
    data = sub('Kabel eins Doku Austria,', 'k1doku', data)
    data = sub('kabel 1 Doku Austria,', 'k1doku', data)
    data = sub('Kabel 1 Doku Austria,', 'k1doku', data)
    data = sub('SKY', 'Sky', data)
    data = sub('Sky 1.*?,', 'sky1', data)
    data = sub('Sky Arts.*?,', 'arts', data)
    data = sub('Sky 007.*?,', 'sky-h', data)
    data = sub('Sky Atlantic.*?,', 'skyat', data)
    data = sub('Sky Cinema Premieren,', 'cin', data)
    data = sub('Sky Cinema Premieren HD,', 'cin', data)
    data = sub('Sky Cinema Thriller HD,', 'skyth', data)
    data = sub('Sky Cinema Premieren.*?,', 'cin24', data)
    data = sub('Sky Cinema Premieren +24,', 'cin24', data)
    data = sub('Sky Action.*?,', 'sky-a', data)
    data = sub('Sky Cinema Action.*?,', 'sky-a', data)
    data = sub('Sky Fun.*?,', 'sky-c', data)
    data = sub('Sky Cinema Fun.*?,', 'sky-c', data)
    data = sub('Sky Special HD.*?,', 'sky-e', data)
    data = sub('Sky Cinema Special HD,*?,', 'skycs', data)
    data = sub('Sky Family.*?,', 'sky-f', data)
    data = sub('Sky Cinema Family.*?,', 'sky-f', data)
    data = sub('Sky Best Of HD.*?,', 'sky-h', data)
    data = sub('Sky Cinema Best Of HD.*?,', 'sky-h', data)
    data = sub('Sky Nostalgie.*?,', 'sky-n', data)
    data = sub('Sky Cinema Nostalgie.*?,', 'sky-n', data)
    data = sub('Sky Xmas.*?,', 'xmas', data)
    data = sub('Sky Christmas.*?,', 'xmas', data)
    data = sub('Sky Cinema Star.*?,', 'sky-h', data)
    data = sub('Sky Krimi.*?,', 'sky-k', data)
    data = sub('Sky 3D,', 'sky3d', data)
    data = sub('Sky Select.*?,', 'sky-s', data)
    data = sub('Sky select.*?,', 'sky-s', data)
    data = sub('Sky Bundesliga 1,', 'buli', data)
    data = sub('Sky Bundesliga HD 1,', 'buli', data)
    data = sub('Sky Bundesliga.*?\n', '', data)
    data = sub('Sky Sport News.*?,', 'snhd', data)
    data = sub('Sky Sport HD,', 'snhd', data)
    data = sub('Sky Sport HD 1,', 'hdspo', data)
    data = sub('Sky Sport 1 HD,', 'hdspo', data)
    data = sub('Sky Sport HD 2,', 'shd2', data)
    data = sub('Sky Sport 2 HD,', 'shd2', data)
    data = sub('Sky Sport 1,', 'spo1', data)
    data = sub('Sky Sport 2,', 'spo2', data)
    data = sub('Sky Sport Austria.*?,', 'spo-a', data)
    data = sub('Sky Sport.*?\n', '', data)
    data = sub('SPORT1,', 'sport', data)
    data = sub('Sport1,', 'sport', data)
    data = sub('SPORT 1,', 'sport', data)
    data = sub('Sport 1,', 'sport', data)
    data = sub('SPORT1 HD,', 'sport', data)
    data = sub('Sport1 HD,', 'sport', data)
    data = sub('SPORT 1 HD,', 'sport', data)
    data = sub('Sport 1 HD,', 'sport', data)
    data = sub('SPORT1[+].*?,', 's1plu', data)
    data = sub('Sport1[+].*?,', 's1plu', data)
    data = sub('SPORT 1[+],', 's1plu', data)
    data = sub('Sport 1[+],', 's1plu', data)
    data = sub('SPORT 1[+] HD,', 's1plu', data)
    data = sub('Sport 1[+] HD,', 's1plu', data)
    data = sub('SPORT1 US.*?,', 'sp1us', data)
    data = sub('Sport1 US.*?,', 'sp1us', data)
    data = sub('SPORT 1 US,', 'sp1us', data)
    data = sub('Sport 1 US,', 'sp1us', data)
    data = sub('SPORT 1 US HD,', 'sp1us', data)
    data = sub('Sport 1 US HD,', 'sp1us', data)
    data = sub('EUROSPORT 2.*?,', 'euro2', data)
    data = sub('Eurosport 2.*?,', 'euro2', data)
    data = sub('EUROSPORT .*?,', 'euro', data)
    data = sub('Eurosport .*?,', 'euro', data)
    data = sub('ESPN America.*?,', 'nasn', data)
    data = sub('ESPN Classic.*?,', 'espn', data)
    data = sub('Motors TV.*?,', 'motor', data)
    data = sub('Motorvision TV.*?,', 'movtv', data)
    data = sub('sportdigital.*?,', 'spo-d', data)
    data = sub('Extreme Sports.*?,', 'ex-sp', data)
    data = sub('kabel.*?lassic.*?,', 'k1cla', data)
    data = sub('Kabel.*?lassic.*?,', 'k1cla', data)
    data = sub('MGM.*?,', 'mgm', data)
    data = sub('KINOWELT.*?,', 'kinow', data)
    data = sub('Kinowelt.*?,', 'kinow', data)
    data = sub('FOX.*?,', 'fox', data)
    data = sub('Fox.*?,', 'fox', data)
    data = sub('SYFY.*?,', 'scifi', data)
    data = sub('SyFy.*?,', 'scifi', data)
    data = sub('Syfy.*?,', 'scifi', data)
    data = sub('TNT F.*?,', 'tnt-f', data)
    data = sub('TNT S.*?,', 'tnt-s', data)
    data = sub('TNT C.*?,', 'tnt-c', data)
    data = sub('TNT G.*?,', 'glitz', data)
    data = sub('glitz.*?,', 'glitz', data)
    data = sub('Universal.*?,', 'unive', data)
    data = sub('UNIVERSAL.*?,', 'unive', data)
    data = sub('TOGGO.*?,', 'toggo', data)
    data = sub('Romance TV.*?,', 'rom', data)
    data = sub('Heimatkanal.*?,', 'heima', data)
    data = sub('The Biography.*?,', 'bio', data)
    data = sub('Biography.*?,', 'bio', data)
    data = sub('Bio Channel,', 'bio', data)
    data = sub('Tele 5.*?,', 'tele5', data)
    data = sub('TELE 5.*?,', 'tele5', data)
    data = sub('DAS VIERTE.*?,', 'dvier', data)
    data = sub('Das Vierte.*?,', 'dvier', data)
    data = sub('ANIXE.*?,', 'anixe', data)
    data = sub('Anixe.*?,', 'anixe', data)
    data = sub('13th.*?,', '13th', data)
    data = sub('13TH.*?,', '13th', data)
    data = sub('AXN.*?,', 'axn', data)
    data = sub('Silverline.*?,', 'silve', data)
    data = sub('Welt der Wunder.*?,', 'wdwtv', data)
    data = sub('arte.*?,', 'arte', data)
    data = sub('ARTE.*?,', 'arte', data)
    data = sub('n-tv.*?,', 'ntv', data)
    data = sub('N24 D.*?,', 'n24doku', data)
    data = sub('N24.*?,', 'welt', data)
    data = sub('Welt.*?,', 'welt', data)
    data = sub('CNN.*?,', 'cnn', data)
    data = sub('BBC W.*?,', 'bbc', data)
    data = sub('BBC E.*?,', 'bbc-e', data)
    data = sub('DMAX.*?,', 'dmax', data)
    data = sub('Spiegel TV.*?,', 'sptvw', data)
    data = sub('Spiegel Geschichte.*?,', 'sp-ge', data)
    data = sub('Spiegel History.*?,', 'sp-ge', data)
    data = sub('HISTORY.*?,', 'hishd', data)
    data = sub('History.*?,', 'hishd', data)
    data = sub('The History.*?,', 'hishd', data)
    data = sub('Animal Planet.*?,', 'aplan', data)
    data = sub('Planet.*?,', 'plane', data)
    data = sub('PLANET.*?,', 'plane', data)
    data = sub('Discovery.*?HD,', 'hddis', data)
    data = sub('Discovery Channel,', 'disco', data)
    data = sub('NatGeo Wild.*?,', 'n-gw', data)
    data = sub('Nat Geo Wild.*?,', 'n-gw', data)
    data = sub('Nat GEO Wild.*?,', 'n-gw', data)
    data = sub('NatGeo People.*?,', 'n-gp', data)
    data = sub('Nat Geo People.*?,', 'n-gp', data)
    data = sub('Nat GEO People.*?,', 'n-gp', data)
    data = sub('NatGeo HD,', 'n-ghd', data)
    data = sub('Nat Geo HD,', 'n-ghd', data)
    data = sub('Nat GEO HD,', 'n-ghd', data)
    data = sub('NATGEO HD,', 'n-ghd', data)
    data = sub('NAT GEO HD,', 'n-ghd', data)
    data = sub('National Geographic.*?,', 'n-geo', data)
    data = sub('BonGusto,', 'gusto', data)
    data = sub('Bon Gusto HD,', 'gusto', data)
    data = sub('ServusTV.*?,', 'servu', data)
    data = sub('Servus TV.*?,', 'servu', data)
    data = sub('SR Fernsehen.*?,', 'swr', data)
    data = sub('Bayerisches.*?,', 'br', data)
    data = sub('BR M.*?,', 'br', data)
    data = sub('BR N.*?,', 'br', data)
    data = sub('BR S.*?,', 'br', data)
    data = sub('BR Fern.*?,', 'br', data)
    data = sub('BR-alpha,', 'bralp', data)
    data = sub('ARD-alpha,', 'alpha', data)
    data = sub('SRF1.*?,', 'sf1', data)
    data = sub('SRF 1.*?,', 'sf1', data)
    data = sub('SF2.*?,', 'sf2', data)
    data = sub('SRF2.*?,', 'sf2', data)
    data = sub('SRF 2.*?,', 'sf2', data)
    data = sub('SRF zwei.*?,', 'sf2', data)
    data = sub('Hamburg 1,', 'hh1', data)
    data = sub('m.*?nchen2,', 'mue2', data)
    data = sub('m.*?nchen.tv,', 'tvm', data)
    data = sub('tv.berlin,', 'tvb', data)
    data = sub('Leipzig Fernsehen.*?,', 'leitv', data)
    data = sub('NRW.TV.*?,', 'nrwtv', data)
    data = sub('rheinmain tv.*?,', 'rmtv', data)
    data = sub('Rhein-Neckar Fernsehen.*?,', 'rnf', data)
    data = sub('Sachsen Fernsehen.*?,', 'sach', data)
    data = sub('ORF 1.*?,', 'orf1', data)
    data = sub('ORF1.*?,', 'orf1', data)
    data = sub('ORF eins.*?,', 'orf1', data)
    data = sub('ORF 2.*?,', 'orf2', data)
    data = sub('ORF2.*?,', 'orf2', data)
    data = sub('ORF.III.*?,', 'orf3', data)
    data = sub('ORF.Sport.*?,', 'orfsp', data)
    data = sub('ORF.SPORT.*?,', 'orfsp', data)
    data = sub('SF1.*?,', 'sf1', data)
    data = sub('SF 1.*?,', 'sf1', data)
    data = sub('SF 2.*?,', 'sf2', data)
    data = sub('SF zwei.*?,', 'sf2', data)
    data = sub('ATV,', 'atv', data)
    data = sub('ATV HD,', 'atv', data)
    data = sub('ATV2,', 'atv2', data)
    data = sub('ATV2 HD,', 'atv2', data)
    data = sub('ATV 2,', 'atv2', data)
    data = sub('ATV 2 HD,', 'atv2', data)
    data = sub('ATV II,', 'atv2', data)
    data = sub('PULS 4.*?,', 'puls4', data)
    data = sub('Boomerang.*?,', 'boom', data)
    data = sub('Nick/Comedy.*?,', 'nickcc', data)
    data = sub('NICK/Comedy.*?,', 'nickcc', data)
    data = sub('VIVA/Comedy.*?,', 'vivacc', data)
    data = sub('VIVA/COMEDY.*?,', 'vivacc', data)
    data = sub('Nick Jr.*?,', 'nickj', data)
    data = sub('NICK.*?,', 'nick', data)
    data = sub('Nicktoons.*?,', 'nickt', data)
    data = sub('COMEDY CENTRAL.*?,', 'cc', data)
    data = sub('Comedy Central.*?,', 'cc', data)
    data = sub('ComedyCentral.*?,', 'cc', data)
    data = sub('Cartoon Net.*?,', 'c-net', data)
    data = sub('Disney Cine.*?,', 'dcm', data)
    data = sub('Disney Channel.*?,', 'disne', data)
    data = sub('Disney HD,', 'disne', data)
    data = sub('Disney Junior.*?,', 'djun', data)
    data = sub('Disney XD.*?,', 'dxd', data)
    data = sub('Junior.*?,', 'junio', data)
    data = sub('KiKA.*?,', 'kika', data)
    data = sub('VH1 Classic.*?,', 'vh1', data)
    data = sub('DELUXE MUSIC.*?,', 'dmc', data)
    data = sub('Deluxe Music.*?,', 'dmc', data)
    data = sub('MTV,', 'mtv', data)
    data = sub('MTV HD,', 'mtv', data)
    data = sub('MTV G.*?,', 'mtv', data)
    data = sub('MTV Ba.*?,', 'mtv-b', data)
    data = sub('MTV Da.*?.*?,', 'mtv-d', data)
    data = sub('MTV Hi.*?.*?,', 'mtv-h', data)
    data = sub('MTV Li.*?,', 'mtv-l', data)
    data = sub('VIVA.*?,', 'viva', data)
    data = sub('iM1,', 'imt', data)
    data = sub('Rock TV.*?,', 'rck', data)
    data = sub('Jukebox.*?,', 'juke', data)
    data = sub('TRACE.*?,', 'trace', data)
    data = sub('CLASSICA.*?,', 'class', data)
    data = sub('Classica.*?,', 'class', data)
    data = sub('Gute Laune.*?,', 'laune', data)
    data = sub('Beate-Uhse.*?,', 'butv', data)
    data = sub('Lust Pur.*?,', 'lustp', data)
    data = sub('Playboy TV,', 'pboy', data)
    data = sub('Al Jazeera.*?,', 'aljaz', data)
    data = sub('center.tv.*?,', 'cente', data)
    data = sub('Bloomberg.*?,', 'blm', data)
    data = sub('euronews.*?,', 'euron', data)
    data = sub('EuroNews.*?,', 'euron', data)
    data = sub('bibel TV,', 'bibel', data)
    data = sub('Bibel TV,', 'bibel', data)
    data = sub('Kirchen TV,', 'ktv', data)
    data = sub('TIMM,', 'timm', data)
    data = sub('HSE 24.*?,', 'hse', data)
    data = sub('HSE24.*?,', 'hse', data)
    data = sub('QVC.*?,', 'qvc', data)
    data = sub('Sonnenklar.*?,', 'sklar', data)
    data = sub('sonnenklar.*?,', 'sklar', data)
    data = sub('Goldstar TV,', 'gold', data)
    data = sub('Animax,', 'amax', data)
    data = sub('ANIMAX,', 'amax', data)
    data = sub('Blue Movie 2,', 'blum2', data)
    data = sub('BLUE MOVIE 2,', 'blum2', data)
    data = sub('Blue Movie 3,', 'blum3', data)
    data = sub('BLUE MOVIE 3,', 'blum3', data)
    data = sub('Blue Movie.*?,', 'blum', data)
    data = sub('BLUE MOVIE.*?,', 'blum', data)
    data = sub('Adult Channel,', 'adult', data)
    data = sub('Das Neue TV.*?,', 'dntv', data)
    data = sub('Deutsches Wetter.*?,', 'dwf', data)
    data = sub('E!.*?,', 'e!', data)
    data = sub('Fashion TV.*?,', 'fatv', data)
    data = sub('Family TV.*?,', 'famtv', data)
    data = sub('Mezzo.*?,', 'mezzo', data)
    data = sub('Nautical.*?,', 'nauch', data)
    data = sub('NL 1.*?,', 'nl1', data)
    data = sub('NL 2.*?,', 'nl2', data)
    data = sub('NL 3.*?,', 'nl3', data)
    data = sub('DR1.*?,', 'dr1', data)
    data = sub('Belgien.*?,', 'be1', data)
    data = sub('France 24.*?fran.*?,', 'fr24f', data)
    data = sub('France 24.*?eng.*?,', 'fr24e', data)
    data = sub('TV2.*?,', 'tv2', data)
    data = sub('TV5.*?,', 'tv5', data)
    data = sub('RiC.*?,', 'ric', data)
    data = sub('TLC.*?,', 'tlc', data)
    data = sub('STAR TV.*?,', 'sttv', data)
    data = sub('Star TV.*?,', 'sttv', data)
    data = sub('center.tv.*?,', 'cente', data)
    data = sub('Liga total!.*?,', 'liga', data)
    data = sub('LIGA total!.*?,', 'liga', data)
    data = sub('Sony.*?,', 'sony', data)
    data = sub('SONY.*?,', 'sony', data)
    data = sub('eoTV.*?,', 'eotv', data)
    data = sub('EOTV.*?,', 'eotv', data)
    data = sub('Erf.*?,', 'erf', data)
    data = sub('ERF.*?,', 'erf', data)
    data = sub('FLT.*?,', 'flt', data)
    data = sub('flt.*?,', 'flt', data)
    data = sub('Joiz.*?,', 'joiz', data)
    data = sub('joiz.*?,', 'joiz', data)
    data = sub('Auto Motor Sport.*?,', 'ams', data)
    data = sub('yourfamily.*?,', 'yfe', data)
    data = sub('Yourfamily.*?,', 'yfe', data)
    data = sub('Your Family.*?,', 'yfe', data)
    data = sub('3 Plus,', '3plus', data)
    data = sub('3+,', '3plus', data)
    data = sub('A&E,', 'aetv', data)
    data = sub('blizz.*?,', 'blizz', data)
    data = sub('QLAR.*?,', 'qlar', data)
    data = sub('Fine Living.*?,', 'fln', data)
    data = sub('Food Network.*?,', 'food', data)
    data = sub('Marco Polo.*?,', 'mapo', data)
    data = sub('Travel Channel.*?,', 'trch', data)
    data = sub('Channel21.*?,', 'ch21', data)
    data = sub('GEO Television.*?,', 'geo', data)
    data = sub('Geo Television.*?,', 'geo', data)
    data = sub('FIX.*?FOXI.*?,', 'fftv', data)
    data = sub('Fix.*?Foxi.*?,', 'fftv', data)
    data = sub('WELT HD.*?,', 'welt', data)
    data = sub('DW,', 'dwtv', data)
    data = sub('Deutsche Welle.*?,', 'dwtv', data)
    data = sub('rbb.*?,', 'rbb', data)
    data = sub('RBB.*?,', 'rbb', data)
    data = sub('NDR.*?,', 'n3', data)
    data = sub('MDR.*?,', 'mdr', data)
    data = sub('WDR.*?,', 'wdr', data)
    data = sub('hr.*?,', 'hr', data)
    data = sub('HR.*?,', 'hr', data)
    data = sub('SWR.*?,', 'swr', data)
    data = sub('BR.*?,', 'swr', data)
    return data


def main(session, **kwargs):
    session.open(tvMain)


def mainjetzt(session, **kwargs):
    session.open(tvJetzt)


def mainevent(session, **kwargs):
    session.open(tvEvent)


def Plugins(**kwargs):
    return [PluginDescriptor(name='TV Spielfilm', description='TV Spielfilm', where=[PluginDescriptor.WHERE_PLUGINMENU], icon='plugin.png', fnc=main),
     PluginDescriptor(name='TV Spielfilm Jetzt', description='TV Spielfilm Jetzt im TV', where=[PluginDescriptor.WHERE_PLUGINMENU], icon='jetzt.png', fnc=mainjetzt),
     PluginDescriptor(name='TV Spielfilm EventView', description='TV Spielfilm EventView', where=[PluginDescriptor.WHERE_EVENTINFO], fnc=mainevent)]
